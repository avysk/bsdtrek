%!PS-Adobe-3.0
%%Title: getpar.h, trek.h, abandon.c, attack.c, autover.c, capture.c, cgetc.c, check_out.c, checkcond.c, compkl.c
%%For: Kenji Rikitake
%%Creator: a2ps version 4.13
%%CreationDate: Fri Oct 25 10:08:51 2013
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 86
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( *) S 8 T (@\(#\)getpar.h) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $DragonFly: src/games/trek/getpar.h,v 1.2 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(#include) K
() p 16 T (<stdbool.h>) N
() N
(struct) k
( cvntab) p 16 T () S 24 T () S
(/* used for getcodpar\(\) parameter list */) c n
({) p n
() S 8 T () S
(const) K
( ) p
(char) k
() p 24 T (*abrev;) N
() S 8 T () S
(const) K
( ) p
(char) k
() p 24 T (*full;) N
() S 8 T () S
(void) k
() p 16 T (\(*value\)\() S
(int) k
(\);) p n
() S 8 T () S
(int) k
() p 16 T (value2;) N
(};) N
() N
(extern) K
( ) p
(struct) k
( cvntab) p 24 T (Lentab[];) N
(extern) K
( ) p
(struct) k
( cvntab) p 24 T (Skitab[];) N
() N
(int) k
() p 8 T (getintpar\() S
(const) K
( ) p
(char) k
( *\);) p n
(double) k
() p 8 T (getfltpar\() S
(const) K
( ) p
(char) k
( *\);) p n
(long) k
() p 8 T (getynpar\() S
(const) K
( ) p
(char) k
( *\);) p n
(struct) k
( cvntab) p 16 T (*getcodpar\() S
(const) K
( ) p
(char) k
( *, ) p
(struct) k
( cvntab *\);) p n
(void) k
() p 8 T (getstrpar\() S
(const) K
( ) p
(char) k
( *, ) p
(char) k
( *, ) p
(int) k
(, ) p
(const) K
( ) p
(char) k
( *\);) p n
(bool) S 8 T (testnl\() S
(void) k
(\);) p n
(void) k
() p 8 T (skiptonl\() S
(char) k
(\);) p n
(bool) S 8 T (readdelim\() S
(char) k
(\);) p n
(getpar.h) (Page 1/1) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(getpar.h) (1/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( *) S 8 T (@\(#\)trek.h) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $DragonFly: src/games/trek/trek.h,v 1.2 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(#include) K
() p 16 T (<math.h>) N
(#include) K
() p 16 T (<setjmp.h>) N
(#include) K
() p 16 T (<stdbool.h>) N
(#include) K
() p 16 T (<stdio.h>) N
(#include) K
() p 16 T (<stdlib.h>) N
(#include) K
() p 16 T (<string.h>) N
(#include) K
() p 16 T (<unistd.h>) N
(/*) c n
(**  Global Declarations) N
(**) N
(**) S 8 T (Virtually all non-local variable declarations are made in this) N
(**) S 8 T (file.  Exceptions are those things which are initialized, which) N
(**) S 8 T (are defined in "externs.c", and things which are local to one) N
(**) S 8 T (program file.) N
(**) N
(**) S 8 T (So far as I know, nothing in here must be preinitialized to) N
(**) S 8 T (zero.) N
(**) N
(**) S 8 T (You may have problems from the loader if you move this to a) N
(**) S 8 T (different machine.  These things actually get allocated in each) N
(**) S 8 T (source file, which UNIX allows; however, you may \(on other) N
(**) S 8 T (systems\) have to change everything in here to be "extern" and) N
(**) S 8 T (actually allocate stuff in "externs.c") N
(*/) N
() p n
(extern) K
() p 8 T (jmp_buf) S 16 T (env;) N
(trek.h) (Page 1/8) (Oct 11, 13 12:13) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*********************  GALAXY  **************************/) c n
() p n
(/* galactic parameters */) c n
(# define) K
() p 16 T (NSECTS) S 24 T () S 32 T (10) S 40 T () S
(/* dimensions of quadrant in sectors */) c n
(# define) K
() p 16 T (NQUADS) S 24 T () S 32 T (8) S 40 T () S
(/* dimension of galazy in quadrants */) c n
(# define) K
() p 16 T (NINHAB) S 24 T () S 32 T (32) S 40 T () S
(/* number of quadrants which are inhabit) c n
(ed */) N
() p n
(struct) k
( quad) p 16 T () S 24 T () S
(/* definition for each quadrant */) c n
({) p n
() S 8 T () S
(char) k
() p 16 T (bases;) S 24 T () S 32 T () S
(/* number of bases in this quadrant */) c n
() p 8 T () S
(char) k
() p 16 T (klings;) S 24 T () S 32 T () S
(/* number of Klingons in this quadrant */) c n
() p 8 T () S
(char) k
() p 16 T (holes;) S 24 T () S 32 T () S
(/* number of black holes in this quadrant */) c n
() p 8 T () S
(int) k
() p 16 T (scanned;) S 32 T () S
(/* star chart entry \(see below\) */) c n
() p 8 T () S
(char) k
() p 16 T (stars;) S 24 T () S 32 T () S
(/* number of stars in this quadrant */) c n
() p 8 T () S
(char) k
() p 16 T (qsystemname;) S 32 T () S
(/* starsystem name \(see below\) */) c n
(};) p n
() N
(# define) K
() p 16 T (Q_DISTRESSED) S 32 T (0200) N
(# define) K
() p 16 T (Q_SYSTEM) S 32 T (077) N
() N
(/*  systemname conventions:) c n
( *) S 8 T (1 -> NINHAB) S 24 T (index into Systemname table for live system.) N
( *) S 8 T (+ Q_DISTRESSED) S 24 T (distressed starsystem -- systemname & Q_SYSTEM) N
( *) S 8 T () S 16 T () S 24 T (is the index into the Event table which will) N
( *) S 8 T () S 16 T () S 24 T (have the system name) N
( *) S 8 T (0) S 16 T () S 24 T (dead or nonexistent starsystem) N
( *) N
( *  starchart \("scanned"\) conventions:) N
( *) S 8 T (0 -> 999) S 24 T (taken as is) N
( *) S 8 T (-1) S 16 T () S 24 T (not yet scanned \("..."\)) N
( *) S 8 T (1000) S 16 T () S 24 T (supernova \("///"\)) N
( *) S 8 T (1001) S 16 T () S 24 T (starbase + ??? \(".1."\)) N
(*/) N
() p n
(/* ascii names of systems */) c n
(extern) K
( ) p
(const) K
( ) p
(char) k
() p 24 T (*Systemname[NINHAB];) N
() N
(/* quadrant definition */) c n
(struct) k
( quad) p 16 T (Quad[NQUADS][NQUADS];) N
() N
(/* defines for sector map  \(below\) */) c n
(# define) K
() p 16 T (EMPTY) S 24 T () S 32 T (') S
(.) str
(') p n
(# define) K
() p 16 T (STAR) S 24 T () S 32 T (') S
(*) str
(') p n
(# define) K
() p 16 T (BASE) S 24 T () S 32 T (') S
(#) str
(') p n
(# define) K
() p 16 T (ENTERPRISE) S 32 T (') S
(E) str
(') p n
(# define) K
() p 16 T (QUEENE) S 24 T () S 32 T (') S
(Q) str
(') p n
(# define) K
() p 16 T (KLINGON) S 24 T () S 32 T (') S
(K) str
(') p n
(# define) K
() p 16 T (INHABIT) S 24 T () S 32 T (') S
(@) str
(') p n
(# define) K
() p 16 T (HOLE) S 24 T () S 32 T (') S
( ) str
(') p n
() N
(/* current sector map */) c n
(char) k
() p 8 T (Sect[NSECTS][NSECTS];) N
() N
() N
(/************************ DEVICES ******************************/) c n
() p n
(# define) K
() p 16 T (NDEV) S 24 T () S 32 T (16) S 40 T () S
(/* max number of devices */) c n
() p n
(/* device tokens */) c n
(# define) K
() p 16 T (WARP) S 24 T () S 32 T (0) S 40 T () S
(/* warp engines */) c n
(# define) K
() p 16 T (SRSCAN) S 24 T () S 32 T (1) S 40 T () S
(/* short range scanners */) c n
(trek.h) (Page 2/8) (Oct 11, 13 12:13) title
border
grestore
(Printed by Kenji Rikitake) rhead
(trek.h) (2/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(# define) K
() p 16 T (LRSCAN) S 24 T () S 32 T (2) S 40 T () S
(/* long range scanners */) c n
(# define) K
() p 16 T (PHASER) S 24 T () S 32 T (3) S 40 T () S
(/* phaser control */) c n
(# define) K
() p 16 T (TORPED) S 24 T () S 32 T (4) S 40 T () S
(/* photon torpedo control */) c n
(# define) K
() p 16 T (IMPULSE) S 24 T () S 32 T (5) S 40 T () S
(/* impulse engines */) c n
(# define) K
() p 16 T (SHIELD) S 24 T () S 32 T (6) S 40 T () S
(/* shield control */) c n
(# define) K
() p 16 T (COMPUTER) S 32 T (7) S 40 T () S
(/* on board computer */) c n
(# define) K
() p 16 T (SSRADIO) S 24 T () S 32 T (8) S 40 T () S
(/* subspace radio */) c n
(# define) K
() p 16 T (LIFESUP) S 24 T () S 32 T (9) S 40 T () S
(/* life support systems */) c n
(# define) K
() p 16 T (SINS) S 24 T () S 32 T (10) S 40 T () S
(/* Space Inertial Navigation System */) c n
(# define) K
() p 16 T (CLOAK) S 24 T () S 32 T (11) S 40 T () S
(/* cloaking device */) c n
(# define) K
() p 16 T (XPORTER) S 24 T () S 32 T (12) S 40 T () S
(/* transporter */) c n
(# define) K
() p 16 T (SHUTTLE) S 24 T () S 32 T (13) S 40 T () S
(/* shuttlecraft */) c n
() p n
(/* device names */) c n
(struct) k
( device) p n
({) N
() S 8 T () S
(const) K
( ) p
(char) k
() p 24 T (*name;) S 32 T () S 40 T () S
(/* device name */) c n
() p 8 T () S
(const) K
( ) p
(char) k
() p 24 T (*person;) S 40 T () S
(/* the person who fixes it */) c n
(};) p n
() N
(extern) K
( ) p
(struct) k
( device) p 24 T (Device[NDEV];) N
() N
(/***************************  EVENTS  ****************************/) c n
() p n
(# define) K
() p 16 T (NEVENTS) S 24 T () S 32 T (12) S 40 T () S
(/* number of different event types */) c n
() p n
(# define) K
() p 16 T (E_LRTB) S 24 T () S 32 T (1) S 40 T () S
(/* long range tractor beam */) c n
(# define) K
() p 16 T (E_KATSB) S 24 T () S 32 T (2) S 40 T () S
(/* Klingon attacks starbase */) c n
(# define) K
() p 16 T (E_KDESB) S 24 T () S 32 T (3) S 40 T () S
(/* Klingon destroys starbase */) c n
(# define) K
() p 16 T (E_ISSUE) S 24 T () S 32 T (4) S 40 T () S
(/* distress call is issued */) c n
(# define) K
() p 16 T (E_ENSLV) S 24 T () S 32 T (5) S 40 T () S
(/* Klingons enslave a quadrant */) c n
(# define) K
() p 16 T (E_REPRO) S 24 T () S 32 T (6) S 40 T () S
(/* a Klingon is reproduced */) c n
(# define) K
() p 16 T (E_FIXDV) S 24 T () S 32 T (7) S 40 T () S
(/* fix a device */) c n
(# define) K
() p 16 T (E_ATTACK) S 32 T (8) S 40 T () S
(/* Klingon attack during rest period */) c n
(# define) K
() p 16 T (E_SNAP) S 24 T () S 32 T (9) S 40 T () S
(/* take a snapshot for time warp */) c n
(# define) K
() p 16 T (E_SNOVA) S 24 T () S 32 T (10) S 40 T () S
(/* supernova occurs */) c n
() p n
(# define) K
() p 16 T (E_GHOST) S 24 T () S 32 T (0100) S 40 T () S
(/* ghost of a distress call if ssradio o) c n
(ut */) N
(# define) K
() p 16 T (E_HIDDEN) S 32 T (0200) S 40 T () S
(/* event that is unreportable because ss) c n
(radio out */) N
(# define) K
() p 16 T (E_EVENT) S 24 T () S 32 T (077) S 40 T () S
(/* mask to get event code */) c n
() p n
(struct) k
( event) p n
({) N
() S 8 T () S
(short) k
() p 16 T (x, y;) S 24 T () S 32 T () S 40 T () S
(/* coordinates */) c n
() p 8 T () S
(double) k
() p 16 T (date;) S 24 T () S 32 T () S 40 T () S
(/* trap stardate */) c n
() p 8 T () S
(char) k
() p 16 T (evcode;) S 24 T () S 32 T () S 40 T () S
(/* event type */) c n
() p 8 T () S
(short) k
() p 16 T (systemname;) S 32 T () S 40 T () S
(/* starsystem name */) c n
(};) p n
(/* systemname conventions:) c n
( *) S 8 T (1 -> NINHAB) S 24 T (index into Systemname table for reported distress calls) N
( *) N
( * evcode conventions:) N
( *) S 8 T (1 -> NEVENTS-1) S 24 T (event type) N
( *) S 8 T (+ E_HIDDEN) S 24 T (unreported \(SSradio out\)) N
( *) S 8 T (+ E_GHOST) S 24 T (actually already expired) N
( *) S 8 T (0) S 16 T () S 24 T (unallocated) N
( */) N
() p n
(# define) K
() p 16 T (MAXEVENTS) S 32 T (25) S 40 T () S
(/* max number of concurrently pending ev) c n
(ents */) N
(trek.h) (Page 3/8) (Oct 11, 13 12:13) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(struct) k
( event) p 16 T (Event[MAXEVENTS];) S 40 T () S
(/* dynamic event list; one entry per pen) c n
(ding event */) N
() p n
(/*****************************  KLINGONS  *******************************/) c n
() p n
(struct) k
( kling) p n
({) N
() S 8 T () S
(short) k
() p 16 T (x, y;) S 24 T () S 32 T () S
(/* coordinates */) c n
() p 8 T () S
(int) k
() p 16 T (power;) S 24 T () S 32 T () S
(/* power left */) c n
() p 8 T () S
(double) k
() p 16 T (dist;) S 24 T () S 32 T () S
(/* distance to Enterprise */) c n
() p 8 T () S
(double) k
() p 16 T (avgdist;) S 32 T () S
(/* average over this move */) c n
() p 8 T () S
(char) k
() p 16 T (srndreq;) S 32 T () S
(/* set if surrender has been requested */) c n
(};) p n
() N
(# define) K
() p 16 T (MAXKLQUAD) S 32 T (9) S 40 T () S
(/* maximum klingons per quadrant */) c n
() p n
(/********************** MISCELLANEOUS ***************************/) c n
() p n
(/* condition codes */) c n
(# define) K
() p 16 T (GREEN) S 24 T () S 32 T (0) N
(# define) K
() p 16 T (DOCKED) S 24 T () S 32 T (1) N
(# define) K
() p 16 T (YELLOW) S 24 T () S 32 T (2) N
(# define) K
() p 16 T (RED) S 24 T () S 32 T (3) N
() N
(/* starbase coordinates */) c n
(# define) K
() p 16 T (MAXBASES) S 32 T (9) S 40 T () S
(/* maximum number of starbases in galaxy) c n
( */) N
() p n
(/*  distress calls  */) c n
(# define) K
() p 16 T (MAXDISTR) S 32 T (5) S 40 T () S
(/* maximum concurrent distress calls */) c n
() p n
(/* phaser banks */) c n
(# define) K
() p 16 T (NBANKS) S 24 T () S 32 T (6) S 40 T () S
(/* number of phaser banks */) c n
() p n
(struct) k
( xy) p n
({) N
() S 8 T () S
(short) k
() p 16 T (x, y;) S 24 T () S 32 T () S
(/* coordinates */) c n
(};) p n
() N
() N
(/*) c n
( *) S 8 T (note that much of the stuff in the following structs CAN NOT) N
( *) S 8 T (be moved around!!!!) N
( */) N
() p n
() N
(/* information regarding the state of the starship */) c n
(struct) k n
({) p n
() S 8 T () S
(double) k
() p 16 T (warp;) S 24 T () S 32 T () S
(/* warp factor */) c n
() p 8 T () S
(double) k
() p 16 T (warp2;) S 24 T () S 32 T () S
(/* warp factor squared */) c n
() p 8 T () S
(double) k
() p 16 T (warp3;) S 24 T () S 32 T () S
(/* warp factor cubed */) c n
() p 8 T () S
(char) k
() p 16 T (shldup;) S 24 T () S 32 T () S
(/* shield up flag */) c n
() p 8 T () S
(char) k
() p 16 T (cloaked;) S 32 T () S
(/* set if cloaking device on */) c n
() p 8 T () S
(int) k
() p 16 T (energy;) S 24 T () S 32 T () S
(/* starship's energy */) c n
() p 8 T () S
(int) k
() p 16 T (shield;) S 24 T () S 32 T () S
(/* energy in shields */) c n
() p 8 T () S
(double) k
() p 16 T (reserves;) S 32 T () S
(/* life support reserves */) c n
() p 8 T () S
(int) k
() p 16 T (crew;) S 24 T () S 32 T () S
(/* ship's complement */) c n
() p 8 T () S
(int) k
() p 16 T (brigfree;) S 32 T () S
(/* space left in brig */) c n
() p 8 T () S
(char) k
() p 16 T (torped;) S 24 T () S 32 T () S
(/* torpedoes */) c n
() p 8 T () S
(char) k
() p 16 T (cloakgood;) S 32 T () S
(/* set if we have moved */) c n
(trek.h) (Page 4/8) (Oct 11, 13 12:13) title
border
grestore
(Printed by Kenji Rikitake) rhead
(trek.h) (3/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(int) k
() p 16 T (quadx;) S 24 T () S 32 T () S
(/* quadrant x coord */) c n
() p 8 T () S
(int) k
() p 16 T (quady;) S 24 T () S 32 T () S
(/* quadrant y coord */) c n
() p 8 T () S
(int) k
() p 16 T (sectx;) S 24 T () S 32 T () S
(/* sector x coord */) c n
() p 8 T () S
(int) k
() p 16 T (secty;) S 24 T () S 32 T () S
(/* sector y coord */) c n
() p 8 T () S
(short) k
() p 16 T (cond;) S 24 T () S 32 T () S
(/* condition code */) c n
() p 8 T () S
(char) k
() p 16 T (sinsbad;) S 32 T () S
(/* Space Inertial Navigation System condition */) c n
() p 8 T () S
(const) K
( ) p
(char) k
() p 24 T (*shipname;) S 40 T () S
(/* name of current starship */) c n
() p 8 T () S
(char) k
() p 16 T (ship;) S 24 T () S 32 T () S
(/* current starship */) c n
() p 8 T () S
(int) k
() p 16 T (distressed;) S 32 T () S
(/* number of distress calls */) c n
(}) p 8 T (Ship;) N
() N
(/* sinsbad is set if SINS is working but not calibrated */) c n
() p n
(/* game related information, mostly scoring */) c n
(struct) k n
({) p n
() S 8 T () S
(int) k
() p 16 T (killk;) S 24 T () S 32 T () S
(/* number of klingons killed */) c n
() p 8 T () S
(int) k
() p 16 T (deaths;) S 24 T () S 32 T () S
(/* number of deaths onboard Enterprise */) c n
() p 8 T () S
(char) k
() p 16 T (negenbar;) S 32 T () S
(/* number of hits on negative energy barrier */) c n
() p 8 T () S
(char) k
() p 16 T (killb;) S 24 T () S 32 T () S
(/* number of starbases killed */) c n
() p 8 T () S
(int) k
() p 16 T (kills;) S 24 T () S 32 T () S
(/* number of stars killed */) c n
() p 8 T () S
(char) k
() p 16 T (skill;) S 24 T () S 32 T () S
(/* skill rating of player */) c n
() p 8 T () S
(char) k
() p 16 T (length;) S 24 T () S 32 T () S
(/* length of game */) c n
() p 8 T () S
(char) k
() p 16 T (killed;) S 24 T () S 32 T () S
(/* set if you were killed */) c n
() p 8 T () S
(char) k
() p 16 T (killinhab;) S 32 T () S
(/* number of inhabited starsystems killed */) c n
() p 8 T () S
(char) k
() p 16 T (tourn;) S 24 T () S 32 T () S
(/* set if a tournament game */) c n
() p 8 T () S
(char) k
() p 16 T (passwd[15];) S 32 T () S
(/* game password */) c n
() p 8 T () S
(char) k
() p 16 T (snap;) S 24 T () S 32 T () S
(/* set if snapshot taken */) c n
() p 8 T () S
(char) k
() p 16 T (helps;) S 24 T () S 32 T () S
(/* number of help calls */) c n
() p 8 T () S
(int) k
() p 16 T (captives;) S 32 T () S
(/* total number of captives taken */) c n
(}) p 8 T (Game;) N
() N
(/* per move information */) c n
(struct) k n
({) p n
() S 8 T () S
(char) k
() p 16 T (free;) S 24 T () S 32 T () S
(/* set if a move is free */) c n
() p 8 T () S
(char) k
() p 16 T (endgame;) S 32 T () S
(/* end of game flag */) c n
() p 8 T () S
(char) k
() p 16 T (shldchg;) S 32 T () S
(/* set if shields changed this move */) c n
() p 8 T () S
(char) k
() p 16 T (newquad;) S 32 T () S
(/* set if just entered this quadrant */) c n
() p 8 T () S
(char) k
() p 16 T (resting;) S 32 T () S
(/* set if this move is a rest */) c n
() p 8 T () S
(double) k
() p 16 T (time;) S 24 T () S 32 T () S
(/* time used this move */) c n
(}) p 8 T (Move;) N
() N
(/* parametric information */) c n
(struct) k n
({) p n
() S 8 T () S
(char) k
() p 16 T (bases;) S 24 T () S 32 T () S
(/* number of starbases */) c n
() p 8 T () S
(char) k
() p 16 T (klings;) S 24 T () S 32 T () S
(/* number of klingons */) c n
() p 8 T () S
(double) k
() p 16 T (date;) S 24 T () S 32 T () S
(/* stardate */) c n
() p 8 T () S
(double) k
() p 16 T (time;) S 24 T () S 32 T () S
(/* time left */) c n
() p 8 T () S
(double) k
() p 16 T (resource;) S 32 T () S
(/* Federation resources */) c n
() p 8 T () S
(int) k
() p 16 T (energy;) S 24 T () S 32 T () S
(/* starship's energy */) c n
() p 8 T () S
(int) k
() p 16 T (shield;) S 24 T () S 32 T () S
(/* energy in shields */) c n
() p 8 T () S
(double) k
() p 16 T (reserves;) S 32 T () S
(/* life support reserves */) c n
() p 8 T () S
(int) k
() p 16 T (crew;) S 24 T () S 32 T () S
(/* size of ship's complement */) c n
() p 8 T () S
(int) k
() p 16 T (brigfree;) S 32 T () S
(/* max possible number of captives */) c n
() p 8 T () S
(char) k
() p 16 T (torped;) S 24 T () S 32 T () S
(/* photon torpedos */) c n
() p 8 T () S
(double) k
() p 16 T (damfac[NDEV];) S 32 T () S
(/* damage factor */) c n
() p 8 T () S
(double) k
() p 16 T (dockfac;) S 32 T () S
(/* docked repair time factor */) c n
() p 8 T () S
(double) k
() p 16 T (regenfac;) S 32 T () S
(/* regeneration factor */) c n
() p 8 T () S
(int) k
() p 16 T (stopengy;) S 32 T () S
(/* energy to do emergency stop */) c n
() p 8 T () S
(int) k
() p 16 T (shupengy;) S 32 T () S
(/* energy to put up shields */) c n
(trek.h) (Page 5/8) (Oct 11, 13 12:13) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(int) k
() p 16 T (klingpwr;) S 32 T () S
(/* Klingon initial power */) c n
() p 8 T () S
(int) k
() p 16 T (warptime;) S 32 T () S
(/* time chewer multiplier */) c n
() p 8 T () S
(double) k
() p 16 T (phasfac;) S 32 T () S
(/* Klingon phaser power eater factor */) c n
() p 8 T () S
(char) k
() p 16 T (moveprob[6];) S 32 T () S
(/* probability that a Klingon moves */) c n
() p 8 T () S
(double) k
() p 16 T (movefac[6];) S 32 T () S
(/* Klingon move distance multiplier */) c n
() p 8 T () S
(double) k
() p 16 T (eventdly[NEVENTS];) S 40 T () S
(/* event time multipliers */) c n
() p 8 T () S
(double) k
() p 16 T (navigcrud[2];) S 32 T () S
(/* navigation crudup factor */) c n
() p 8 T () S
(int) k
() p 16 T (cloakenergy;) S 32 T () S
(/* cloaking device energy per stardate */) c n
() p 8 T () S
(double) k
() p 16 T (damprob[NDEV];) S 32 T () S
(/* damage probability */) c n
() p 8 T () S
(double) k
() p 16 T (hitfac;) S 24 T () S 32 T () S
(/* Klingon attack factor */) c n
() p 8 T () S
(int) k
() p 16 T (klingcrew;) S 32 T () S
(/* number of Klingons in a crew */) c n
() p 8 T () S
(double) k
() p 16 T (srndrprob;) S 32 T () S
(/* surrender probability */) c n
() p 8 T () S
(int) k
() p 16 T (energylow;) S 32 T () S
(/* low energy mark \(cond YELLOW\) */) c n
(}) p 8 T (Param;) N
() N
(/* Sum of damage probabilities must add to 1000 */) c n
() p n
(/* other information kept in a snapshot */) c n
(struct) k n
({) p n
() S 8 T () S
(short) k
() p 16 T (bases;) S 24 T () S 32 T () S
(/* number of starbases */) c n
() p 8 T () S
(char) k
() p 16 T (klings;) S 24 T () S 32 T () S
(/* number of klingons */) c n
() p 8 T () S
(double) k
() p 16 T (date;) S 24 T () S 32 T () S
(/* stardate */) c n
() p 8 T () S
(double) k
() p 16 T (time;) S 24 T () S 32 T () S
(/* time left */) c n
() p 8 T () S
(double) k
() p 16 T (resource;) S 32 T () S
(/* Federation resources */) c n
() p 8 T () S
(char) k
() p 16 T (distressed;) S 32 T () S
(/* number of currently distressed quadrants */) c n
() p 8 T () S
(struct) k
( event) p 24 T (*eventptr[NEVENTS];) S 48 T () S
(/* pointer to event structs */) c n
() p 8 T () S
(struct) k
( xy) p 24 T (base[MAXBASES];) S 40 T () S 48 T () S
(/* locations of starbases */) c n
(}) p 8 T (Now;) N
() N
(/* Other stuff, not dumped in a snapshot */) c n
(struct) k n
({) p n
() S 8 T () S
(struct) k
( kling) p 24 T (klingon[MAXKLQUAD];) S 48 T () S
(/* sorted Klingon list */) c n
() p 8 T () S
(int) k
() p 16 T () S 24 T (nkling;) S 32 T () S 40 T () S 48 T () S
(/* number of Klingons in this se) c n
(ctor */) N
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(/* < 0 means automatic override ) c n
(mode */) N
() p 8 T () S
(struct) k
( xy) p 24 T (starbase;) S 40 T () S
(/* starbase in current quadrant */) c n
() p 8 T () S
(char) k
() p 16 T () S 24 T (snapshot[) S
(sizeof) K
( Quad + ) p
(sizeof) K
( Event + ) p
(sizeof) K
( Now];) p 80 T () S
() c n
(/* snapshot for time warp */) N
() p 8 T () S
(char) k
() p 16 T () S 24 T (statreport;) S 40 T () S 48 T () S
(/* set to get a status report on) c n
( a srscan */) N
(}) p 8 T (Etc;) N
() N
(/*) c n
( *) S 8 T (eventptr is a pointer to the event[] entry of the last) N
( *) S 8 T (scheduled event of each type.  Zero if no such event scheduled.) N
( */) N
() p n
(/* Klingon move indicies */) c n
(# define) K
() p 16 T (KM_OB) S 24 T () S 32 T (0) S 40 T () S
(/* Old quadrant, Before attack */) c n
(# define) K
() p 16 T (KM_OA) S 24 T () S 32 T (1) S 40 T () S
(/* Old quadrant, After attack */) c n
(# define) K
() p 16 T (KM_EB) S 24 T () S 32 T (2) S 40 T () S
(/* Enter quadrant, Before attack */) c n
(# define) K
() p 16 T (KM_EA) S 24 T () S 32 T (3) S 40 T () S
(/* Enter quadrant, After attack */) c n
(# define) K
() p 16 T (KM_LB) S 24 T () S 32 T (4) S 40 T () S
(/* Leave quadrant, Before attack */) c n
(# define) K
() p 16 T (KM_LA) S 24 T () S 32 T (5) S 40 T () S
(/* Leave quadrant, After attack */) c n
() p n
(/* you lose codes */) c n
(# define) K
() p 16 T (L_NOTIME) S 32 T (1) S 40 T () S
(/* ran out of time */) c n
(# define) K
() p 16 T (L_NOENGY) S 32 T (2) S 40 T () S
(/* ran out of energy */) c n
(# define) K
() p 16 T (L_DSTRYD) S 32 T (3) S 40 T () S
(/* destroyed by a Klingon */) c n
(trek.h) (Page 6/8) (Oct 11, 13 12:13) title
border
grestore
(Printed by Kenji Rikitake) rhead
(trek.h) (4/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(# define) K
() p 16 T (L_NEGENB) S 32 T (4) S 40 T () S
(/* ran into the negative energy barrier ) c n
(*/) N
(# define) K
() p 16 T (L_SUICID) S 32 T (5) S 40 T () S
(/* destroyed in a nova */) c n
(# define) K
() p 16 T (L_SNOVA) S 24 T () S 32 T (6) S 40 T () S
(/* destroyed in a supernova */) c n
(# define) K
() p 16 T (L_NOLIFE) S 32 T (7) S 40 T () S
(/* life support died \(so did you\) */) c n
(# define) K
() p 16 T (L_NOHELP) S 32 T (8) S 40 T () S
(/* you could not be rematerialized */) c n
(# define) K
() p 16 T (L_TOOFAST) S 32 T (9) S 40 T () S
(/* pretty stupid going at warp 10 */) c n
(# define) K
() p 16 T (L_STAR) S 24 T () S 32 T (10) S 40 T () S
(/* ran into a star */) c n
(# define) K
() p 16 T (L_DSTRCT) S 32 T (11) S 40 T () S
(/* self destructed */) c n
(# define) K
() p 16 T (L_CAPTURED) S 32 T (12) S 40 T () S
(/* captured by Klingons */) c n
(# define) K
() p 16 T (L_NOCREW) S 32 T (13) S 40 T () S
(/* you ran out of crew */) c n
() p n
(/******************  COMPILE OPTIONS  ***********************/) c n
() p n
(/* Trace info */) c n
(# define) K
() p 16 T (xTRACE) S 24 T () S 32 T (1) N
(int) k
() p 8 T (Trace;) N
() N
(/* external function definitions */) c n
(void) k
() p 8 T (abandon\() S
(int) k
(\);) p n
(void) k
() p 8 T (attack\() S
(int) k
(\);) p n
(void) k
() p 8 T (autover\() S
(void) k
(\);) p n
(void) k
() p 8 T (capture\() S
(int) k
(\);) p n
(int) k
() p 8 T (cgetc\() S
(int) k
(\);) p n
(bool) S 8 T (check_out\() S
(int) k
(\);) p n
(void) k
() p 8 T (checkcond\() S
(void) k
(\);) p n
(void) k
() p 8 T (compkldist\(bool\);) N
(void) k
() p 8 T (computer\() S
(int) k
(\);) p n
(void) k
() p 8 T (damage\() S
(int) k
(, ) p
(double) k
(\);) p n
(bool) S 8 T (damaged\() S
(int) k
(\);) p n
(void) k
() p 8 T (dcrept\() S
(int) k
(\);) p n
(void) k
() p 8 T (destruct\() S
(int) k
(\);) p n
(void) k
() p 8 T (dock\() S
(int) k
(\);) p n
(void) k
() p 8 T (undock\() S
(int) k
(\);) p n
(void) k
() p 8 T (dumpgame\() S
(int) k
(\);) p n
(bool) S 8 T (restartgame\() S
(void) k
(\);) p n
(void) k
() p 8 T (dumpme\() S
(int) k
(\);) p n
(int) k
() p 8 T (dumpssradio\() S
(void) k
(\);) p n
(void) k
() p 8 T (events\() S
(int) k
(\);) p n
(bool) S 8 T (getcodi\() S
(int) k
( *, ) p
(double) k
( *\);) p n
(void) k
() p 8 T (help\() S
(int) k
(\);) p n
(void) k
() p 8 T (impulse\() S
(int) k
(\);) p n
(void) k
() p 8 T (initquad\() S
(int) k
(\);) p n
(void) k
() p 8 T (sector\() S
(int) k
( *, ) p
(int) k
( *\);) p n
(void) k
() p 8 T (killk\() S
(int) k
(, ) p
(int) k
(\);) p n
(void) k
() p 8 T (killb\() S
(int) k
(, ) p
(int) k
(\);) p n
(void) k
() p 8 T (kills\() S
(int) k
(, ) p
(int) k
(, ) p
(int) k
(\);) p n
(void) k
() p 8 T (killd\() S
(int) k
(, ) p
(int) k
(, ) p
(int) k
(\);) p n
(void) k
() p 8 T (klmove\() S
(int) k
(\);) p n
(void) k
() p 8 T (lose\() S
(int) k
(\);) p n
(void) k
() p 8 T (lrscan\() S
(int) k
(\);) p n
(double) k
() p 8 T (move\() S
(int) k
(, ) p
(int) k
(, ) p
(double) k
(, ) p
(double) k
(\);) p n
(void) k
() p 8 T (nova\() S
(int) k
(, ) p
(int) k
(\);) p n
(void) k
() p 8 T (out\() S
(int) k
(\);) p n
(void) k
() p 8 T (phaser\() S
(int) k
(\);) p n
(void) k
() p 8 T (play\() S
(void) k
(\);) p n
(void) k
() p 8 T (ram\() S
(int) k
(, ) p
(int) k
(\);) p n
(int) k
() p 8 T (ranf\() S
(int) k
(\);) p n
(double) k
() p 8 T (franf\() S
(void) k
(\);) p n
(void) k
() p 8 T (rest\() S
(int) k
(\);) p n
(struct) k
( event) p 16 T (*schedule\() S
(int) k
(, ) p
(double) k
(, ) p
(char) k
(, ) p
(char) k
(, ) p
(char) k
(\);) p n
(void) k
() p 8 T (reschedule\() S
(struct) k
( event *, ) p
(double) k
(\);) p n
(trek.h) (Page 7/8) (Oct 11, 13 12:13) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(void) k
() p 8 T (unschedule\() S
(struct) k
( event *\);) p n
(struct) k
( event) p 16 T (*xsched\() S
(int) k
(, ) p
(int) k
(, ) p
(int) k
(, ) p
(int) k
(, ) p
(int) k
(\);) p n
(void) k
() p 8 T (xresched\() S
(struct) k
( event *, ) p
(int) k
(, ) p
(int) k
(\);) p n
(long) k
() p 8 T (score\() S
(void) k
(\);) p n
(void) k
() p 8 T (setup\() S
(void) k
(\);) p n
(void) k
() p 8 T (setwarp\() S
(int) k
(\);) p n
(void) k
() p 8 T (shield\() S
(int) k
(\);) p n
(void) k
() p 8 T (snova\() S
(int) k
(, ) p
(int) k
(\);) p n
(void) k
() p 8 T (srscan\() S
(int) k
(\);) p n
(const) K
( ) p
(char) k
() p 16 T (*systemname\() S
(struct) k
( quad *\);) p n
(void) k
() p 8 T (torped\() S
(int) k
(\);) p n
(char) k
() p 8 T (*bmove\() S
(const) K
( ) p
(void) k
( *, ) p
(void) k
( *, size_t\);) p n
(bool) S 8 T (sequal\() S
(const) K
( ) p
(char) k
( *, ) p
(const) K
( ) p
(char) k
( *\);) p n
(void) k
() p 8 T (syserr\() S
(const) K
( ) p
(char) k
( *, ...\);) p n
(void) k
() p 8 T (visual\() S
(int) k
(\);) p n
(void) k
() p 8 T (warp\() S
(int) k
(, ) p
(int) k
(, ) p
(double) k
(\);) p n
(void) k
() p 8 T (dowarp\() S
(int) k
(\);) p n
(void) k
() p 8 T (win\() S
(void) k
(\);) p n
(trek.h) (Page 8/8) (Oct 11, 13 12:13) title
border
grestore
(Printed by Kenji Rikitake) rhead
(trek.h) (5/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)abandon.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/abandon.c,v 1.4 1999/11/30 03:49:43 billf Exp $) N
( * $DragonFly: src/games/trek/abandon.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  Abandon Ship) N
(**) N
(**) S 8 T (The ship is abandoned.  If your current ship is the Faire) N
(**) S 8 T (Queene, or if your shuttlecraft is dead, you're out of) N
(**) S 8 T (luck.  You need the shuttlecraft in order for the captain) N
(**) S 8 T (\(that's you!!\) to escape.) N
(**) N
(**) S 8 T (Your crew can beam to an inhabited starsystem in the) N
(**) S 8 T (quadrant, if there is one and if the transporter is working.) N
(**) S 8 T (If there is no inhabited starsystem, or if the transporter) N
(**) S 8 T (is out, they are left to die in outer space.) N
(**) N
(**) S 8 T (These currently just count as regular deaths, but they) N
(**) S 8 T (should count very heavily against you.) N
(**) N
(**) S 8 T (If there are no starbases left, you are captured by the) N
(**) S 8 T (Klingons, who torture you mercilessly.  However, if there) N
(**) S 8 T (is at least one starbase, you are returned to the) N
(**) S 8 T (Federation in a prisoner of war exchange.  Of course, this) N
(**) S 8 T (can't happen unless you have taken some prisoners.) N
(**) N
(**) S 8 T (Uses trace flag 40) N
(abandon.c) (Page 1/3) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(*/) c n
() p n
(void) k n
(abandon\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(struct) k
( quad) p 24 T (*q;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (j;) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() N
() S 8 T () S
(if) K
( \(Ship.ship == QUEENE\) {) p n
() S 8 T () S 16 T (printf\(") S
(You may not abandon ye Faire Queene\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(Ship.cond != DOCKED\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(damaged\(SHUTTLE\)\) {) p n
() S 8 T () S 16 T () S 24 T (out\(SHUTTLE\);) N
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (printf\(") S
(Officers escape in shuttlecraft\\n) str
("\);) p n
() S 8 T () S 16 T () S
(/* decide on fate of crew */) c n
() p 8 T () S 16 T (q = &Quad[Ship.quadx][Ship.quady];) N
() S 8 T () S 16 T () S
(if) K
( \(q->qsystemname == 0 || damaged\(XPORTER\)\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(Entire crew of %d left to die in outer space\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T (Ship.crew\);) N
() S 8 T () S 16 T () S 24 T (Game.deaths += Ship.crew;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(Crew beams down to planet %s\\n) str
(", systemname\(q\)\);) p n
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() S 8 T () S
(/* see if you can be exchanged */) c n
() p 8 T () S
(if) K
( \(Now.bases == 0 || Game.captives < 20 * Game.skill\)) p n
() S 8 T () S 16 T (lose\(L_CAPTURED\);) N
() S 8 T () S
(/* re-outfit new ship */) c n
() p 8 T (printf\(") S
(You are hereby put in charge of an antiquated but still\\n) str
("\);) p n
() S 8 T (printf\(") S
(  functional ship, the Fairie Queene.\\n) str
("\);) p n
() S 8 T (Ship.ship = QUEENE;) N
() S 8 T (Ship.shipname = ") S
(Fairie Queene) str
(";) p n
() S 8 T (Param.energy = Ship.energy = 3000;) N
() S 8 T (Param.torped = Ship.torped = 6;) N
() S 8 T (Param.shield = Ship.shield = 1250;) N
() S 8 T (Ship.shldup = 0;) N
() S 8 T (Ship.cloaked = 0;) N
() S 8 T (Ship.warp = 5.0;) N
() S 8 T (Ship.warp2 = 25.0;) N
() S 8 T (Ship.warp3 = 125.0;) N
() S 8 T (Ship.cond = GREEN;) N
() S 8 T () S
(/* clear out damages on old ship */) c n
() p 8 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (e = &Event[i];) N
() S 8 T () S 16 T () S
(if) K
( \(e->evcode != E_FIXDV\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T (unschedule\(e\);) N
() S 8 T (}) N
() S 8 T () S
(/* get rid of some devices and redistribute probabilities */) c n
() p 8 T (i = Param.damprob[SHUTTLE] + Param.damprob[CLOAK];) N
() S 8 T (Param.damprob[SHUTTLE] = Param.damprob[CLOAK] = 0;) N
(abandon.c) (Page 2/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(abandon.c) (6/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(while) K
( \(i > 0\)) p n
() S 8 T () S 16 T () S
(for) K
( \(j = 0; j < NDEV; j++\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(Param.damprob[j] != 0\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (Param.damprob[j] += 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T (i--;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(i <= 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T () S
(/* pick a starbase to restart at */) c n
() p 8 T (i = ranf\(Now.bases\);) N
() S 8 T (Ship.quadx = Now.base[i].x;) N
() S 8 T (Ship.quady = Now.base[i].y;) N
() S 8 T () S
(/* setup that quadrant */) c n
() p 8 T () S
(while) K
( \(1\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (initquad\(1\);) N
() S 8 T () S 16 T (Sect[Ship.sectx][Ship.secty] = EMPTY;) N
() S 8 T () S 16 T () S
(for) K
( \(i = 0; i < 5; i++\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (Ship.sectx = Etc.starbase.x + ranf\(3\) - 1;) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(Ship.sectx < 0 || Ship.sectx >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T (Ship.secty = Etc.starbase.y + ranf\(3\) - 1;) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(Ship.secty < 0 || Ship.secty >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(Sect[Ship.sectx][Ship.secty] == EMPTY\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (Sect[Ship.sectx][Ship.secty] = QUEENE;) N
() S 8 T () S 16 T () S 24 T () S 32 T (dock\(0\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (compkldist\(0\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(return) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
(}) N
(abandon.c) (Page 3/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(abandon.c) (7/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)attack.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/attack.c,v 1.4 1999/11/30 03:49:43 billf Exp $) N
( * $DragonFly: src/games/trek/attack.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  Klingon Attack Routine) N
(**) N
(**) S 8 T (This routine performs the Klingon attack provided that) N
(**) S 8 T (\(1\) Something happened this move \(i.e., not free\), and) N
(**) S 8 T (\(2\) You are not cloaked.  Note that if you issue the) N
(**) S 8 T (cloak command, you are not considered cloaked until you) N
(**) S 8 T (expend some time.) N
(**) N
(**) S 8 T (Klingons are permitted to move both before and after the) N
(**) S 8 T (attack.  They will tend to move toward you before the) N
(**) S 8 T (attack and away from you after the attack.) N
(**) N
(**) S 8 T (Under certain conditions you can get a critical hit.  This) N
(**) S 8 T (sort of hit damages devices.  The probability that a given) N
(**) S 8 T (device is damaged depends on the device.  Well protected) N
(**) S 8 T (devices \(such as the computer, which is in the core of the) N
(**) S 8 T (ship and has considerable redundancy\) almost never get) N
(**) S 8 T (damaged, whereas devices which are exposed \(such as the) N
(**) S 8 T (warp engines\) or which are particularly delicate \(such as) N
(**) S 8 T (the transporter\) have a much higher probability of being) N
(**) S 8 T (damaged.) N
(**) N
(attack.c) (Page 1/4) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(**) c 8 T (The actual amount of damage \(i.e., how long it takes to fix) N
(**) S 8 T (it\) depends on the amount of the hit and the "damfac[]") N
(**) S 8 T (entry for the particular device.) N
(**) N
(**) S 8 T (Casualties can also occur.) N
(*/) N
() p n
(void) k n
(attack\() p
(int) k
( resting\)) p n
(/* resting:  set if attack while resting */) c n
({) p n
() S 8 T () S
(int) k
() p 16 T () S 24 T (hit, i, l;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (maxhit, tothit, shldabsb;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (chgfac, propor, extradm;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (dustfac, tothe;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (cas;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (hitflag;) N
() N
() S 8 T () S
(if) K
( \(Move.free\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T () S
(if) K
( \(Etc.nkling <= 0 || Quad[Ship.quadx][Ship.quady].stars < 0\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T () S
(if) K
( \(Ship.cloaked && Ship.cloakgood\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T () S
(/* move before attack */) c n
() p 8 T (klmove\(0\);) N
() S 8 T () S
(if) K
( \(Ship.cond == DOCKED\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(!resting\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(Starbase shields protect the %s\\n) str
(", Ship.shipname\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(/* setup shield effectiveness */) c n
() p 8 T (chgfac = 1.0;) N
() S 8 T () S
(if) K
( \(Move.shldchg\)) p n
() S 8 T () S 16 T (chgfac = 0.25 + 0.50 * franf\(\);) N
() S 8 T (maxhit = tothit = 0;) N
() S 8 T (hitflag = 0;) N
() N
() S 8 T () S
(/* let each Klingon do his damndest */) c n
() p 8 T () S
(for) K
( \(i = 0; i < Etc.nkling; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* if he's low on power he won't attack */) c n
() p 8 T () S 16 T () S
(if) K
( \(Etc.klingon[i].power < 20\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S
(if) K
( \(!hitflag\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(\\nStardate %.2f: Klingon attack:\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T (Now.date\);) N
() S 8 T () S 16 T () S 24 T (hitflag++;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(/* complete the hit */) c n
() p 8 T () S 16 T (dustfac = 0.90 + 0.01 * franf\(\);) N
() S 8 T () S 16 T (tothe = Etc.klingon[i].avgdist;) N
() S 8 T () S 16 T (hit = Etc.klingon[i].power * pow\(dustfac, tothe\) * Param.hitfac;) N
() S 8 T () S 16 T () S
(/* deplete his energy */) c n
() p 8 T () S 16 T (dustfac = Etc.klingon[i].power;) N
() S 8 T () S 16 T (Etc.klingon[i].power = dustfac * Param.phasfac * \(1.0 + \(franf\(\)) N
( - 0.5\) * 0.2\);) N
() S 8 T () S 16 T () S
(/* see how much of hit shields will absorb */) c n
() p 8 T () S 16 T (shldabsb = 0;) N
() S 8 T () S 16 T () S
(if) K
( \(Ship.shldup || Move.shldchg\)) p n
(attack.c) (Page 2/4) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(attack.c) (8/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (propor = Ship.shield;) N
() S 8 T () S 16 T () S 24 T (propor /= Param.shield;) N
() S 8 T () S 16 T () S 24 T (shldabsb = propor * chgfac * hit;) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(shldabsb > Ship.shield\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (shldabsb = Ship.shield;) N
() S 8 T () S 16 T () S 24 T (Ship.shield -= shldabsb;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(/* actually do the hit */) c n
() p 8 T () S 16 T (printf\(") S
(^GHIT: %d units) str
(", hit\);) p n
() S 8 T () S 16 T () S
(if) K
( \(!damaged\(SRSCAN\)\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
( from %d,%d) str
(", Etc.klingon[i].x, Etc.klingon[i].y\);) p n
() S 8 T () S 16 T (cas = \(shldabsb * 100\) / hit;) N
() S 8 T () S 16 T (hit -= shldabsb;) N
() S 8 T () S 16 T () S
(if) K
( \(shldabsb > 0\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(, shields absorb %d%%, effective hit %d\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T (cas, hit\);) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T (printf\(") S
(\\n) str
("\);) p n
() S 8 T () S 16 T (tothit += hit;) N
() S 8 T () S 16 T () S
(if) K
( \(hit > maxhit\)) p n
() S 8 T () S 16 T () S 24 T (maxhit = hit;) N
() S 8 T () S 16 T (Ship.energy -= hit;) N
() S 8 T () S 16 T () S
(/* see if damages occurred */) c n
() p 8 T () S 16 T () S
(if) K
( \(hit >= \(15 - Game.skill\) * \(25 - ranf\(12\)\)\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(^GCRITICAL HIT!!!^G\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(/* select a device from probability vector */) c n
() p 8 T () S 16 T () S 24 T (cas = ranf\(1000\);) N
() S 8 T () S 16 T () S 24 T () S
(for) K
( \(l = 0; cas >= 0; l++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (cas -= Param.damprob[l];) N
() S 8 T () S 16 T () S 24 T (l -= 1;) N
() S 8 T () S 16 T () S 24 T () S
(/* compute amount of damage */) c n
() p 8 T () S 16 T () S 24 T (extradm = \(hit * Param.damfac[l]\) / \(75 + ranf\(25\)\) + 0.) N
(5;) N
() S 8 T () S 16 T () S 24 T () S
(/* damage the device */) c n
() p 8 T () S 16 T () S 24 T (damage\(l, extradm\);) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(damaged\(SHIELD\)\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(Ship.shldup\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(Sulu: Shields knocked down, captain.\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (Ship.shldup = 0;) N
() S 8 T () S 16 T () S 24 T () S 32 T (Move.shldchg = 0;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(if) K
( \(Ship.energy <= 0\)) p n
() S 8 T () S 16 T () S 24 T (lose\(L_DSTRYD\);) N
() S 8 T (}) N
() N
() S 8 T () S
(/* see what our casualities are like */) c n
() p 8 T () S
(if) K
( \(maxhit >= 200 || tothit >= 500\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (cas = tothit * 0.015 * franf\(\);) N
() S 8 T () S 16 T () S
(if) K
( \(cas >= 2\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(McCoy: we suffered %d casualties in that attack.\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T (cas\);) N
() S 8 T () S 16 T () S 24 T (Game.deaths += cas;) N
() S 8 T () S 16 T () S 24 T (Ship.crew -= cas;) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() N
(attack.c) (Page 3/4) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(/* allow Klingons to move after attacking */) c n
() p 8 T (klmove\(1\);) N
() N
() S 8 T () S
(return) K
(;) p n
(}) N
(attack.c) (Page 4/4) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(attack.c) (9/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)autover.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/autover.c,v 1.4 1999/11/30 03:49:43 billf Exp $) N
( * $DragonFly: src/games/trek/autover.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  Automatic Override) N
(**) N
(**) S 8 T (If we should be so unlucky as to be caught in a quadrant) N
(**) S 8 T (with a supernova in it, this routine is called.  It is) N
(**) S 8 T (called from checkcond\(\).) N
(**) N
(**) S 8 T (It sets you to a random warp \(guaranteed to be over 6.0\)) N
(**) S 8 T (and starts sending you off "somewhere" \(whereever that is\).) N
(**) N
(**) S 8 T (Please note that it is VERY important that you reset your) N
(**) S 8 T (warp speed after the automatic override is called.  The new) N
(**) S 8 T (warp factor does not stay in effect for just this routine.) N
(**) N
(**) S 8 T (This routine will never try to send you more than sqrt\(2\)) N
(**) S 8 T (quadrants, since that is all that is needed.) N
(*/) N
() p n
(void) k n
(autover\() p
(void) k
(\)) p n
({) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (dist;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (course;) N
(autover.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 8 T (printf\(") S
(\\07RED ALERT:  The %s is in a supernova quadrant\\n) str
(", Ship.shipname\);) p n
() S 8 T (printf\(") S
(***  Emergency override attempts to hurl %s to safety\\n) str
(", Ship.shipname\);) p n
() S 8 T () S
(/* let's get our ass out of here */) c n
() p 8 T (Ship.warp = 6.0 + 2.0 * franf\(\);) N
() S 8 T (Ship.warp2 = Ship.warp * Ship.warp;) N
() S 8 T (Ship.warp3 = Ship.warp2 * Ship.warp;) N
() S 8 T (dist = 0.75 * Ship.energy / \(Ship.warp3 * \(Ship.shldup + 1\)\);) N
() S 8 T () S
(if) K
( \(dist > 1.4142\)) p n
() S 8 T () S 16 T (dist = 1.4142;) N
() S 8 T (course = ranf\(360\);) N
() S 8 T (Etc.nkling = -1;) N
() S 8 T (Ship.cond = RED;) N
() S 8 T (warp\(-1, course, dist\);) N
() S 8 T (attack\(0\);) N
(}) N
(autover.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(autover.c) (10/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)capture.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/capture.c,v 1.4 1999/11/30 03:49:43 billf Exp $) N
( * $DragonFly: src/games/trek/capture.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(static) K
( ) p
(struct) k
( kling) p 24 T (*selectklingon\() S
(void) k
(\);) p n
() N
(/*) c n
(**  Ask a Klingon To Surrender) N
(**) N
(**) S 8 T (\(Fat chance\)) N
(**) N
(**) S 8 T (The Subspace Radio is needed to ask a Klingon if he will kindly) N
(**) S 8 T (surrender.  A random Klingon from the ones in the quadrant is) N
(**) S 8 T (chosen.) N
(**) N
(**) S 8 T (The Klingon is requested to surrender.  The probability of this) N
(**) S 8 T (is a function of that Klingon's remaining power, our power,) N
(**) S 8 T (etc.) N
(*/) N
() p n
(void) k n
(capture\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(struct) k
( kling) p 24 T (*k;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (x;) N
() N
(capture.c) (Page 1/3) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(/* check for not cloaked */) c n
() p 8 T () S
(if) K
( \(Ship.cloaked\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Ship-ship communications out when cloaked\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(damaged\(SSRADIO\)\)) p n
() S 8 T () S 16 T () S
(return) K
( \(out\(SSRADIO\)\);) p n
() S 8 T () S
(/* find out if there are any at all */) c n
() p 8 T () S
(if) K
( \(Etc.nkling <= 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Uhura: Getting no response, sir\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() N
() S 8 T () S
(/* if there is more than one Klingon, find out which one */) c n
() p 8 T (k = selectklingon\(\);) N
() S 8 T (Move.free = 0;) N
() S 8 T (Move.time = 0.05;) N
() N
() S 8 T () S
(/* check out that Klingon */) c n
() p 8 T (k->srndreq++;) N
() S 8 T (x = Param.klingpwr;) N
() S 8 T (x *= Ship.energy;) N
() S 8 T (x /= k->power * Etc.nkling;) N
() S 8 T (x *= Param.srndrprob;) N
() S 8 T (i = x;) N
(#) S 8 T (ifdef xTRACE) N
() S 8 T () S
(if) K
( \(Trace\)) p n
() S 8 T () S 16 T (printf\(") S
(Prob = %d \(%.4f\)\\n) str
(", i, x\);) p n
(#) S 8 T (endif) N
() S 8 T () S
(if) K
( \(i > ranf\(100\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* guess what, he surrendered!!! */) c n
() p 8 T () S 16 T (printf\(") S
(Klingon at %d,%d surrenders\\n) str
(", k->x, k->y\);) p n
() S 8 T () S 16 T (i = ranf\(Param.klingcrew\);) N
() S 8 T () S 16 T () S
(if) K
( \( i > 0 \)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(%d klingons commit suicide rather than be taken captive\\n) str
(", Param) p n
(.klingcrew - i\);) N
() S 8 T () S 16 T () S
(if) K
( \(i > Ship.brigfree\)) p n
() S 8 T () S 16 T () S 24 T (i = Ship.brigfree;) N
() S 8 T () S 16 T (Ship.brigfree -= i;) N
() S 8 T () S 16 T (printf\(") S
(%d captives taken\\n) str
(", i\);) p n
() S 8 T () S 16 T (killk\(k->x, k->y\);) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() N
() S 8 T () S
(/* big surprise, he refuses to surrender */) c n
() p 8 T (printf\(") S
(Fat chance, captain\\n) str
("\);) p n
() S 8 T () S
(return) K
(;) p n
(}) N
() N
() N
(/*) c n
(**  SELECT A KLINGON) N
(**) N
(**) S 8 T (Cruddy, just takes one at random.  Should ask the captain.) N
(*/) N
() p n
(static) K
( ) p
(struct) k
( kling *) p n
(selectklingon\() S
(void) k
(\)) p n
({) N
(capture.c) (Page 2/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(capture.c) (11/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 12
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() N
() S 8 T () S
(if) K
( \(Etc.nkling < 2\)) p n
() S 8 T () S 16 T (i = 0;) N
() S 8 T () S
(else) K n
() p 8 T () S 16 T (i = ranf\(Etc.nkling\);) N
() S 8 T () S
(return) K
( \(&Etc.klingon[i]\);) p n
(}) N
(capture.c) (Page 3/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(capture.c) (12/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 13
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)cgetc.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/cgetc.c,v 1.2 1999/11/30 03:49:44 billf Exp $) N
( * $DragonFly: src/games/trek/cgetc.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(int) k n
(cgetc\(__unused ) p
(int) k
( i\)) p n
({) N
() S 8 T () S
(return) K
( \( getchar\(\) \);) p n
(}) N
(cgetc.c) (Page 1/1) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(cgetc.c) (13/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 14
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)check_out.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/check_out.c,v 1.4 1999/11/30 03:49:44 billf Exp $) N
( * $DragonFly: src/games/trek/check_out.c,v 1.3 2006/09/07 21:19:44 pavalos Exp ) N
($) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  CHECK IF A DEVICE IS OUT) N
(**) N
(**) S 8 T (The indicated device is checked to see if it is disabled.  If) N
(**) S 8 T (it is, an attempt is made to use the starbase device.  If both) N
(**) S 8 T (of these fails, it returns non-zero \(device is REALLY out\),) N
(**) S 8 T (otherwise it returns zero \(I can get to it somehow\).) N
(**) N
(**) S 8 T (It prints appropriate messages too.) N
(*/) N
() p n
(bool) N
(check_out\() S
(int) k
( device\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T (dev;) N
() N
() S 8 T (dev = device;) N
() N
() S 8 T () S
(/* check for device ok */) c n
() p 8 T () S
(if) K
( \(!damaged\(dev\)\)) p n
() S 8 T () S 16 T () S
(return) K
( \(0\);) p n
() N
(check_out.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(/* report it as being dead */) c n
() p 8 T (out\(dev\);) N
() N
() S 8 T () S
(/* but if we are docked, we can go ahead anyhow */) c n
() p 8 T () S
(if) K
( \(Ship.cond != DOCKED\)) p n
() S 8 T () S 16 T () S
(return) K
( \(1\);) p n
() S 8 T (printf\(") S
(  Using starbase %s\\n) str
(", Device[dev].name\);) p n
() S 8 T () S
(return) K
( \(0\);) p n
(}) N
(check_out.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(check_out.c) (14/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 15
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)checkcond.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/checkcond.c,v 1.4 1999/11/30 03:49:44 billf Exp $) N
( * $DragonFly: src/games/trek/checkcond.c,v 1.3 2006/09/07 21:19:44 pavalos Exp ) N
($) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  Check for Condition After a Move) N
(**) N
(**) S 8 T (Various ship conditions are checked.  First we check) N
(**) S 8 T (to see if we have already lost the game, due to running) N
(**) S 8 T (out of life support reserves, running out of energy,) N
(**) S 8 T (or running out of crew members.  The check for running) N
(**) S 8 T (out of time is in events\(\).) N
(**) N
(**) S 8 T (If we are in automatic override mode \(Etc.nkling < 0\), we) N
(**) S 8 T (don't want to do anything else, lest we call autover) N
(**) S 8 T (recursively.) N
(**) N
(**) S 8 T (In the normal case, if there is a supernova, we call) N
(**) S 8 T (autover\(\) to help us escape.  If after calling autover\(\)) N
(**) S 8 T (we are still in the grips of a supernova, we get burnt) N
(**) S 8 T (up.) N
(**) N
(**) S 8 T (If there are no Klingons in this quadrant, we nullify any) N
(**) S 8 T (distress calls which might exist.) N
(**) N
(**) S 8 T (We then set the condition code, based on the energy level) N
(checkcond.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(**) c 8 T (and battle conditions.) N
(*/) N
() p n
(void) k n
(checkcond\() p
(void) k
(\)) p n
({) N
() S 8 T () S
(/* see if we are still alive and well */) c n
() p 8 T () S
(if) K
( \(Ship.reserves < 0.0\)) p n
() S 8 T () S 16 T (lose\(L_NOLIFE\);) N
() S 8 T () S
(if) K
( \(Ship.energy <= 0\)) p n
() S 8 T () S 16 T (lose\(L_NOENGY\);) N
() S 8 T () S
(if) K
( \(Ship.crew <= 0\)) p n
() S 8 T () S 16 T (lose\(L_NOCREW\);) N
() S 8 T () S
(/* if in auto override mode, ignore the rest */) c n
() p 8 T () S
(if) K
( \(Etc.nkling < 0\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T () S
(/* call in automatic override if appropriate */) c n
() p 8 T () S
(if) K
( \(Quad[Ship.quadx][Ship.quady].stars < 0\)) p n
() S 8 T () S 16 T (autover\(\);) N
() S 8 T () S
(if) K
( \(Quad[Ship.quadx][Ship.quady].stars < 0\)) p n
() S 8 T () S 16 T (lose\(L_SNOVA\);) N
() S 8 T () S
(/* nullify distress call if appropriate */) c n
() p 8 T () S
(if) K
( \(Etc.nkling <= 0\)) p n
() S 8 T () S 16 T (killd\(Ship.quadx, Ship.quady, 1\);) N
() N
() S 8 T () S
(/* set condition code */) c n
() p 8 T () S
(if) K
( \(Ship.cond == DOCKED\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() N
() S 8 T () S
(if) K
( \(Etc.nkling > 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (Ship.cond = RED;) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(Ship.energy < Param.energylow\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (Ship.cond = YELLOW;) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T (Ship.cond = GREEN;) N
() S 8 T () S
(return) K
(;) p n
(}) N
(checkcond.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(checkcond.c) (15/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 16
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)compkl.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/compkl.c,v 1.4 1999/11/30 03:49:44 billf Exp $) N
( * $DragonFly: src/games/trek/compkl.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(static) K
( ) p
(void) k
() p 16 T (sortkl\() S
(void) k
(\);) p n
() N
(/*) c n
(**  compute klingon distances) N
(**) N
(**) S 8 T (The klingon list has the distances for all klingons recomputed) N
(**) S 8 T (and sorted.  The parameter is a Boolean flag which is set if) N
(**) S 8 T (we have just entered a new quadrant.) N
(**) N
(**) S 8 T (This routine is used every time the Enterprise or the Klingons) N
(**) S 8 T (move.) N
(*/) N
() p n
(void) k n
(compkldist\(bool f\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i, dx, dy;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (d;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (temp;) N
() N
() S 8 T () S
(if) K
( \(Etc.nkling == 0\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T () S
(for) K
( \(i = 0; i < Etc.nkling; i++\)) p n
(compkl.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T ({) N
() S 8 T () S 16 T () S
(/* compute distance to the Klingon */) c n
() p 8 T () S 16 T (dx = Ship.sectx - Etc.klingon[i].x;) N
() S 8 T () S 16 T (dy = Ship.secty - Etc.klingon[i].y;) N
() S 8 T () S 16 T (d = dx * dx + dy * dy;) N
() S 8 T () S 16 T (d = sqrt\(d\);) N
() N
() S 8 T () S 16 T () S
(/* compute average of new and old distances to Klingon */) c n
() p 8 T () S 16 T () S
(if) K
( \(!f\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (temp = Etc.klingon[i].dist;) N
() S 8 T () S 16 T () S 24 T (Etc.klingon[i].avgdist = 0.5 * \(temp + d\);) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(/* new quadrant: average is current */) c n
() p 8 T () S 16 T () S 24 T (Etc.klingon[i].avgdist = d;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (Etc.klingon[i].dist = d;) N
() S 8 T (}) N
() N
() S 8 T () S
(/* leave them sorted */) c n
() p 8 T (sortkl\(\);) N
(}) N
() N
() N
(/*) c n
(**  sort klingons) N
(**) N
(**) S 8 T (bubble sort on ascending distance) N
(*/) N
() p n
(static) K
( ) p
(void) k n
(sortkl\() p
(void) k
(\)) p n
({) N
() S 8 T () S
(struct) k
( kling) p 24 T () S 32 T (t;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (f, i, m;) N
() N
() S 8 T (m = Etc.nkling - 1;) N
() S 8 T (f = 1;) N
() S 8 T () S
(while) K
( \(f\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (f = 0;) N
() S 8 T () S 16 T () S
(for) K
( \(i = 0; i < m; i++\)) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(Etc.klingon[i].dist > Etc.klingon[i+1].dist\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (bmove\(&Etc.klingon[i], &t, ) S
(sizeof) K
( t\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (bmove\(&Etc.klingon[i+1], &Etc.klingon[i], ) S
(sizeof) K
() p n
( t\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (bmove\(&t, &Etc.klingon[i+1], ) S
(sizeof) K
( t\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (f = 1;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T (}) N
(}) N
(compkl.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(compkl.c) (16/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 17
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)computer.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/computer.c,v 1.5 1999/11/30 03:49:45 billf Exp $) N
( * $DragonFly: src/games/trek/computer.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
() N
(static) K
( ) p
(int) k
() p 16 T (kalc\() S
(int) k
(, ) p
(int) k
(, ) p
(int) k
(, ) p
(int) k
(, ) p
(double) k
( *\);) p n
(static) K
( ) p
(void) k
() p 16 T (prkalc\() S
(int) k
(, ) p
(double) k
(\);) p n
() N
(/*) c n
(**  On-Board Computer) N
(**) N
(**) S 8 T (A computer request is fetched from the captain.  The requests) N
(**) S 8 T (are:) N
(**) N
(**) S 8 T (chart -- print a star chart of the known galaxy.  This includes) N
(**) S 8 T () S 16 T (every quadrant that has ever had a long range or) N
(**) S 8 T () S 16 T (a short range scan done of it, plus the location of) N
(**) S 8 T () S 16 T (all starbases.  This is of course updated by any sub-) N
(**) S 8 T () S 16 T (space radio broadcasts \(unless the radio is out\).) N
(**) S 8 T () S 16 T (The format is the same as that of a long range scan) N
(**) S 8 T () S 16 T (except that ".1." indicates that a starbase exists) N
(**) S 8 T () S 16 T (but we know nothing else.) N
(**) N
(**) S 8 T (trajectory -- gives the course and distance to every know) N
(**) S 8 T () S 16 T (Klingon in the quadrant.  Obviously this fails if the) N
(**) S 8 T () S 16 T (short range scanners are out.) N
(**) N
(computer.c) (Page 1/6) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(**) c 8 T (course -- gives a course computation from whereever you are) N
(**) S 8 T () S 16 T (to any specified location.  If the course begins) N
(**) S 8 T () S 16 T (with a slash, the current quadrant is taken.) N
(**) S 8 T () S 16 T (Otherwise the input is quadrant and sector coordi-) N
(**) S 8 T () S 16 T (nates of the target sector.) N
(**) N
(**) S 8 T (move -- identical to course, except that the move is performed.) N
(**) N
(**) S 8 T (score -- prints out the current score.) N
(**) N
(**) S 8 T (pheff -- "PHaser EFFectiveness" at a given distance.  Tells) N
(**) S 8 T () S 16 T (you how much stuff you need to make it work.) N
(**) N
(**) S 8 T (warpcost -- Gives you the cost in time and units to move for) N
(**) S 8 T () S 16 T (a given distance under a given warp speed.) N
(**) N
(**) S 8 T (impcost -- Same for the impulse engines.) N
(**) N
(**) S 8 T (distresslist -- Gives a list of the currently known starsystems) N
(**) S 8 T () S 16 T (or starbases which are distressed, together with their) N
(**) S 8 T () S 16 T (quadrant coordinates.) N
(**) N
(**) S 8 T (If a command is terminated with a semicolon, you remain in) N
(**) S 8 T (the computer; otherwise, you escape immediately to the main) N
(**) S 8 T (command processor.) N
(*/) N
() p n
(struct) k
( cvntab) p 16 T (Cputab[] =) N
({) N
() S 8 T ({ ") S
(ch) str
(",) p 16 T (") S
(art) str
(",) p 24 T () S 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)1,) p 64 T (0 },) N
() S 8 T ({ ") S
(t) str
(",) p 16 T (") S
(rajectory) str
(",) p 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)2,) p 64 T (0 },) N
() S 8 T ({ ") S
(c) str
(",) p 16 T (") S
(ourse) str
(",) p 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)3,) p 64 T (0 },) N
() S 8 T ({ ") S
(m) str
(",) p 16 T (") S
(ove) str
(",) p 24 T () S 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)3,) p 64 T (1 },) N
() S 8 T ({ ") S
(s) str
(",) p 16 T (") S
(core) str
(",) p 24 T () S 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)4,) p 64 T (0 },) N
() S 8 T ({ ") S
(p) str
(",) p 16 T (") S
(heff) str
(",) p 24 T () S 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)5,) p 64 T (0 },) N
() S 8 T ({ ") S
(w) str
(",) p 16 T (") S
(arpcost) str
(",) p 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)6,) p 64 T (0 },) N
() S 8 T ({ ") S
(i) str
(",) p 16 T (") S
(mpcost) str
(",) p 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)7,) p 64 T (0 },) N
() S 8 T ({ ") S
(d) str
(",) p 16 T (") S
(istresslist) str
(",) p 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)8,) p 64 T (0 },) N
() S 8 T ({ ) S
(NULL) K
(,) p 16 T () S
(NULL) K
(,) p 24 T () S 32 T () S 40 T () S
(NULL) K
(,) p 48 T () S 56 T () S 64 T (0 }) N
(};) N
() N
(void) k n
(computer\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (ix, iy;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i, j;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (tqx, tqy;) N
() S 8 T () S
(struct) k
( cvntab) p 24 T () S 32 T (*r;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (cost;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (course;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (dist, p_time;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (warpfact;) N
() S 8 T () S
(struct) k
( quad) p 24 T () S 32 T (*q;) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() N
() S 8 T () S
(if) K
( \(check_out\(COMPUTER\)\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T () S
(while) K
( \(1\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (r = getcodpar\(") S
(\\nRequest) str
(", Cputab\);) p n
() S 8 T () S 16 T () S
(switch) K
( \(\() p
(long) k
(\)r->value\)) p n
() S 8 T () S 16 T ({) N
(computer.c) (Page 2/6) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(computer.c) (17/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 18
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 8 T () S 16 T (  ) S
(case) K
( 1:) p 32 T () S 40 T () S 48 T () S
(/* star chart */) c n
() p 8 T () S 16 T () S 24 T (printf\(") S
(Computer record of galaxy for all long range sensor scans\\n\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(  ) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(/* print top header */) c n
() p 8 T () S 16 T () S 24 T () S
(for) K
( \(i = 0; i < NQUADS; i++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(-%d- ) str
(", i\);) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(for) K
( \(i = 0; i < NQUADS; i++\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(%d ) str
(", i\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(for) K
( \(j = 0; j < NQUADS; j++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(i == Ship.quadx && j == Ship.quady\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (printf\(") S
($$$ ) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (q = &Quad[i][j];) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(/* 1000 or 1001 is special case */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(q->scanned >= 1000\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(if) K
( \(q->scanned > 1000\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T (printf\(") S
(.1. ) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T (printf\(") S
(/// ) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(if) K
( \(q->scanned < 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T (printf\(") S
(... ) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T (printf\(") S
(%3d ) str
(", q->scanne) p n
(d\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(%d\\n) str
(", i\);) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(  ) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(/* print bottom footer */) c n
() p 8 T () S 16 T () S 24 T () S
(for) K
( \(i = 0; i < NQUADS; i++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(-%d- ) str
(", i\);) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( 2:) p 32 T () S 40 T () S 48 T () S
(/* trajectory */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(check_out\(SRSCAN\)\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(Etc.nkling <= 0\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(No Klingons in this quadrant\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(/* for each Klingon, give the course & distance */) c n
() p 8 T () S 16 T () S 24 T () S
(for) K
( \(i = 0; i < Etc.nkling; i++\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(Klingon at %d,%d) str
(", Etc.klingon[i].x, Etc.kl) p n
(ingon[i].y\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (course = kalc\(Ship.quadx, Ship.quady, Etc.klingo) N
(n[i].x, Etc.klingon[i].y, &dist\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (prkalc\(course, dist\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
(computer.c) (Page 3/6) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (  ) S
(case) K
( 3:) p 32 T () S 40 T () S 48 T () S
(/* course calculation */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(readdelim\(') p
(/) str
('\)\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (tqx = Ship.quadx;) N
() S 8 T () S 16 T () S 24 T () S 32 T (tqy = Ship.quady;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(else) K n
() p 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (ix = getintpar\(") S
(Quadrant) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(ix < 0 || ix >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (iy = getintpar\(") S
(q-y) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(iy < 0 || iy >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (tqx = ix;) N
() S 8 T () S 16 T () S 24 T () S 32 T (tqy = iy;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (ix = getintpar\(") S
(Sector) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(ix < 0 || ix >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (iy = getintpar\(") S
(s-y) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(iy < 0 || iy >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (course = kalc\(tqx, tqy, ix, iy, &dist\);) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(r->value2\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (warp\(-1, course, dist\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(%d,%d/%d,%d to %d,%d/%d,%d) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T (Ship.quadx, Ship.quady, Ship.sectx, Ship.secty, ) N
(tqx, tqy, ix, iy\);) N
() S 8 T () S 16 T () S 24 T (prkalc\(course, dist\);) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( 4:) p 32 T () S 40 T () S 48 T () S
(/* score */) c n
() p 8 T () S 16 T () S 24 T (score\(\);) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( 5:) p 32 T () S 40 T () S 48 T () S
(/* phaser effectiveness */) c n
() p 8 T () S 16 T () S 24 T (dist = getfltpar\(") S
(range) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(dist < 0.0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (dist *= 10.0;) N
() S 8 T () S 16 T () S 24 T (cost = pow\(0.90, dist\) * 98.0 + 0.5;) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(Phasers are %d%% effective at that range\\n) str
(", cost\);) p n
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( 6:) p 32 T () S 40 T () S 48 T () S
(/* warp cost \(time/energy\) */) c n
() p 8 T () S 16 T () S 24 T (dist = getfltpar\(") S
(distance) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(dist < 0.0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (warpfact = getfltpar\(") S
(warp factor) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(warpfact <= 0.0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (warpfact = Ship.warp;) N
() S 8 T () S 16 T () S 24 T (cost = \(dist + 0.05\) * warpfact * warpfact * warpfact;) N
() S 8 T () S 16 T () S 24 T (p_time = Param.warptime * dist / \(warpfact * warpfact\);) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(Warp %.2f distance %.2f cost %.2f stardates %d \(%d w/ shlds up\) units) str n
(\\n) S
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T (warpfact, dist, p_time, cost, cost + cost\);) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
(computer.c) (Page 4/6) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(computer.c) (18/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 19
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (  ) S
(case) K
( 7:) p 32 T () S 40 T () S 48 T () S
(/* impulse cost */) c n
() p 8 T () S 16 T () S 24 T (dist = getfltpar\(") S
(distance) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(dist < 0.0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (cost = 20 + 100 * dist;) N
() S 8 T () S 16 T () S 24 T (p_time = dist / 0.095;) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(Distance %.2f cost %.2f stardates %d units\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T (dist, p_time, cost\);) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( 8:) p 32 T () S 40 T () S 48 T () S
(/* distresslist */) c n
() p 8 T () S 16 T () S 24 T (j = 1;) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(/* scan the event list */) c n
() p 8 T () S 16 T () S 24 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (e = &Event[i];) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* ignore hidden entries */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(e->evcode & E_HIDDEN\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(switch) K
( \(e->evcode & E_EVENT\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T (  ) S
(case) K
( E_KDESB:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(Klingon is attacking starbase in quadrant %d,%) str n
(d\\n) S
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (e->x, e->y\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (j = 0;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T () S 32 T (  ) S
(case) K
( E_ENSLV:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (  ) S
(case) K
( E_REPRO:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(Starsystem %s in quadrant %d,%d is distressed\\) str n
(n) S
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (Systemname[e->systemname], e->x,) N
( e->y\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (j = 0;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(j\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(No known distress calls are active\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(/* skip to next semicolon or newline.  Semicolon) c n
() S 8 T () S 16 T ( * means get new computer request; newline means) N
() S 8 T () S 16 T ( * exit computer mode. */) N
() p 8 T () S 16 T () S
(while) K
( \(\(i = cgetc\(0\)\) != ') p
(;) str
('\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(i == ') p
(\\0) str
('\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (exit\(1\);) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(i == ') p
(\\n) str
('\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (ungetc\(i, stdin\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(return) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
(}) N
() N
(computer.c) (Page 5/6) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(/*) c n
(**  Course Calculation) N
(**) N
(**) S 8 T (Computes and outputs the course and distance from position) N
(**) S 8 T (sqx,sqy/ssx,ssy to tqx,tqy/tsx,tsy.) N
(*/) N
() p n
(static) K
( ) p
(int) k n
(kalc\() p
(int) k
( tqx, ) p
(int) k
( tqy, ) p
(int) k
( tsx, ) p
(int) k
( tsy, ) p
(double) k
( *dist\)) p n
({) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (dx, dy;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (quadsize;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (angle;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (course;) N
() N
() S 8 T () S
(/* normalize to quadrant distances */) c n
() p 8 T (quadsize = NSECTS;) N
() S 8 T (dx = \(Ship.quadx + Ship.sectx / quadsize\) - \(tqx + tsx / quadsize\);) N
() S 8 T (dy = \(tqy + tsy / quadsize\) - \(Ship.quady + Ship.secty / quadsize\);) N
() N
() S 8 T () S
(/* get the angle */) c n
() p 8 T (angle = atan2\(dy, dx\);) N
() S 8 T () S
(/* make it 0 -> 2 pi */) c n
() p 8 T () S
(if) K
( \(angle < 0.0\)) p n
() S 8 T () S 16 T (angle += 6.283185307;) N
() S 8 T () S
(/* convert from radians to degrees */) c n
() p 8 T (course = angle * 57.29577951 + 0.5;) N
() S 8 T (dx = dx * dx + dy * dy;) N
() S 8 T (*dist = sqrt\(dx\);) N
() S 8 T () S
(return) K
( \(course\);) p n
(}) N
() N
(static) K
( ) p
(void) k n
(prkalc\() p
(int) k
( course, ) p
(double) k
( dist\)) p n
({) N
() S 8 T (printf\(") S
(: course %d  dist %.3f\\n) str
(", course, dist\);) p n
(}) N
(computer.c) (Page 6/6) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(computer.c) (19/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 20
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)damage.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/damage.c,v 1.4 1999/11/30 03:49:45 billf Exp $) N
( * $DragonFly: src/games/trek/damage.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  Schedule Ship.damages to a Device) N
(**) N
(**) S 8 T (Device `dev1' is damaged in an amount `dam'.  Dam is measured) N
(**) S 8 T (in stardates, and is an additional amount of damage.  It should) N
(**) S 8 T (be the amount to occur in non-docked mode.  The adjustment) N
(**) S 8 T (to docked mode occurs automatically if we are docked.) N
(**) N
(**) S 8 T (Note that the repair of the device occurs on a DATE, meaning) N
(**) S 8 T (that the dock\(\) and undock\(\) have to reschedule the event.) N
(*/) N
() p n
(void) k n
(damage\() p
(int) k
( dev1, ) p
(double) k
( dam\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (f;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (dev;) N
() N
() S 8 T () S
(/* ignore zero damages */) c n
() p 8 T () S
(if) K
( \(dam <= 0.0\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
(damage.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (dev = dev1;) N
() N
() S 8 T (printf\(") S
(\\t%s damaged\\n) str
(", Device[dev].name\);) p n
() N
() S 8 T () S
(/* find actual length till it will be fixed */) c n
() p 8 T () S
(if) K
( \(Ship.cond == DOCKED\)) p n
() S 8 T () S 16 T (dam *= Param.dockfac;) N
() S 8 T () S
(/* set the damage flag */) c n
() p 8 T (f = damaged\(dev\);) N
() S 8 T () S
(if) K
( \(!f\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* new damages -- schedule a fix */) c n
() p 8 T () S 16 T (schedule\(E_FIXDV, dam, 0, 0, dev\);) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(/* device already damaged -- add to existing damages */) c n
() p 8 T () S
(/* scan for old damages */) c n
() p 8 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (e = &Event[i];) N
() S 8 T () S 16 T () S
(if) K
( \(e->evcode != E_FIXDV || e->systemname != dev\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S
(/* got the right one; add on the new damages */) c n
() p 8 T () S 16 T (reschedule\(e, e->date - Now.date + dam\);) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T (syserr\(") S
(Cannot find old damages %d\\n) str
(", dev\);) p n
(}) N
(damage.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(damage.c) (20/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 21
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)damaged.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/damaged.c,v 1.4 1999/11/30 03:49:45 billf Exp $) N
( * $DragonFly: src/games/trek/damaged.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*  DAMAGED -- check for device damaged) c n
(**) N
(**) S 8 T (This is a boolean function which returns non-zero if the) N
(**) S 8 T (specified device is broken.  It does this by checking the) N
(**) S 8 T (event list for a "device fix" action on that device.) N
(*/) N
() p n
(bool) N
(damaged\() S
(int) k
( dev\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (d;) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() N
() S 8 T (d = dev;) N
() N
() S 8 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (e = &Event[i];) N
() S 8 T () S 16 T () S
(if) K
( \(e->evcode != E_FIXDV\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S
(if) K
( \(e->systemname == d\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
( \(1\);) p n
(damaged.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (}) N
() N
() S 8 T () S
(/* device fix not in event list -- device must not be broken */) c n
() p 8 T () S
(return) K
( \(0\);) p n
(}) N
(damaged.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(damaged.c) (21/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 22
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)dcrept.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/dcrept.c,v 1.4 1999/11/30 03:49:46 billf Exp $) N
( * $DragonFly: src/games/trek/dcrept.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  damage control report) N
(**) N
(**) S 8 T (Print damages and time to fix.  This is taken from the event) N
(**) S 8 T (list.  A couple of factors are set up, based on whether or not) N
(**) S 8 T (we are docked.  \(One of these factors will always be 1.0.\)) N
(**) S 8 T (The event list is then scanned for damage fix events, the) N
(**) S 8 T (time until they occur is determined, and printed out.  The) N
(**) S 8 T (magic number DAMFAC is used to tell how much faster you can) N
(**) S 8 T (fix things if you are docked.) N
(*/) N
() p n
(void) k n
(dcrept\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i, f;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (x;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (m1, m2;) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() N
() S 8 T () S
(/* set up the magic factors to output the time till fixed */) c n
() p 8 T () S
(if) K
( \(Ship.cond == DOCKED\)) p n
() S 8 T ({) N
(dcrept.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (m1 = 1.0 / Param.dockfac;) N
() S 8 T () S 16 T (m2 = 1.0;) N
() S 8 T (}) N
() S 8 T () S
(else) K n
() p 8 T ({) N
() S 8 T () S 16 T (m1 = 1.0;) N
() S 8 T () S 16 T (m2 = Param.dockfac;) N
() S 8 T (}) N
() S 8 T (printf\(") S
(Damage control report:\\n) str
("\);) p n
() S 8 T (f = 1;) N
() N
() S 8 T () S
(/* scan for damages */) c n
() p 8 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (e = &Event[i];) N
() S 8 T () S 16 T () S
(if) K
( \(e->evcode != E_FIXDV\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() N
() S 8 T () S 16 T () S
(/* output the title first time */) c n
() p 8 T () S 16 T () S
(if) K
( \(f\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(\\t\\t\\t  repair times\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(device\\t\\t\\tin flight  docked\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T (f = 0;) N
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(/* compute time till fixed, then adjust by the magic factors */) c n
() p 8 T () S 16 T (x = e->date - Now.date;) N
() S 8 T () S 16 T (printf\(") S
(%-24s%7.2f  %7.2f\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T (Device[e->systemname].name, x * m1 + 0.005, x * m2 + 0.0) N
(05\);) N
() N
() S 8 T () S 16 T () S
(/* do a little consistancy checking */) c n
() p 8 T (}) N
() N
() S 8 T () S
(/* if everything was ok, reassure the nervous captain */) c n
() p 8 T () S
(if) K
( \(f\)) p n
() S 8 T () S 16 T (printf\(") S
(All devices functional\\n) str
("\);) p n
(}) N
(dcrept.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(dcrept.c) (22/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 23
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)destruct.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/destruct.c,v 1.4 1999/11/30 03:49:46 billf Exp $) N
( * $DragonFly: src/games/trek/destruct.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  Self Destruct Sequence) N
(**) N
(**) S 8 T (The computer starts up the self destruct sequence.  Obviously,) N
(**) S 8 T (if the computer is out nothing can happen.  You get a countdown) N
(**) S 8 T (and a request for password.  This must match the password that) N
(**) S 8 T (you entered at the start of the game.) N
(**) N
(**) S 8 T (You get to destroy things when you blow up; hence, it is) N
(**) S 8 T (possible to win the game by destructing if you take the last) N
(**) S 8 T (Klingon with you.) N
(**) N
(**) S 8 T (By the way, the \\032 in the message is a ^Z, which is because) N
(**) S 8 T (the terminal in my office is an ADM-3, which uses that char-) N
(**) S 8 T (acter to clear the screen.  I also stick in a \\014 \(form feed\)) N
(**) S 8 T (because that clears some other screens.) N
(**) N
(**) S 8 T (Uses trace flag 41) N
(*/) N
() p n
(void) k n
(destruct\(__unused ) p
(int) k
( unused\)) p n
(destruct.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
({) p n
() S 8 T () S
(char) k
() p 16 T () S 24 T (checkpass[15];) N
() S 8 T () S
(int) k
() p 16 T (i, j;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T (zap;) N
() N
() S 8 T () S
(if) K
( \(damaged\(COMPUTER\)\) {) p n
() S 8 T () S 16 T (out\(COMPUTER\);) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T (printf\(") S
(\\n\\07 --- WORKING ---\\07\\n) str
("\);) p n
() S 8 T (sleep\(3\);) N
() S 8 T () S
(/* output the count 10 9 8 7 6 */) c n
() p 8 T () S
(for) K
( \(i = 10; i > 5; i--\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(for) K
( \(j = 10;  j > i; j--\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(   ) str
("\);) p n
() S 8 T () S 16 T (printf\(") S
(%d\\n) str
(", i\);) p n
() S 8 T () S 16 T (sleep\(1\);) N
() S 8 T (}) N
() S 8 T () S
(/* check for password on new line only */) c n
() p 8 T (skiptonl\(0\);) N
() S 8 T (getstrpar\(") S
(Enter password verification) str
(", checkpass, 14, 0\);) p n
() S 8 T (sleep\(2\);) N
() S 8 T () S
(if) K
( \(!sequal\(checkpass, Game.passwd\)\) {) p n
() S 8 T () S 16 T (printf\(") S
(Self destruct sequence aborted\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T (printf\(") S
(Password verified; self destruct sequence continues:\\n) str
("\);) p n
() S 8 T (sleep\(2\);) N
() S 8 T () S
(/* output count 5 4 3 2 1 0 */) c n
() p 8 T () S
(for) K
( \(i = 5; i >= 0; i--\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (sleep\(1\);) N
() S 8 T () S 16 T () S
(for) K
( \(j = 5; j > i; j--\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(   ) str
("\);) p n
() S 8 T () S 16 T (printf\(") S
(%d\\n) str
(", i\);) p n
() S 8 T (}) N
() S 8 T (sleep\(2\);) N
() S 8 T (printf\(") S
(\\032\\014***** %s destroyed *****\\n) str
(", Ship.shipname\);) p n
() S 8 T (Game.killed = 1;) N
() S 8 T () S
(/* let's see what we can blow up!!!! */) c n
() p 8 T (zap = 20.0 * Ship.energy;) N
() S 8 T (Game.deaths += Ship.crew;) N
() S 8 T () S
(for) K
( \(i = 0; i < Etc.nkling; \)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(Etc.klingon[i].power * Etc.klingon[i].dist <= zap\)) p n
() S 8 T () S 16 T () S 24 T (killk\(Etc.klingon[i].x, Etc.klingon[i].y\);) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T (i++;) N
() S 8 T (}) N
() S 8 T () S
(/* if we didn't kill the last Klingon \(detected by killk\), */) c n
() p 8 T () S
(/* then we lose.... */) c n
() p 8 T (lose\(L_DSTRCT\);) N
(}) N
(destruct.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(destruct.c) (23/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 24
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)dock.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/dock.c,v 1.4 1999/11/30 03:49:46 billf Exp $) N
( * $DragonFly: src/games/trek/dock.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  DOCK TO STARBASE) N
(**) N
(**) S 8 T (The starship is docked to a starbase.  For this to work you) N
(**) S 8 T (must be adjacent to a starbase.) N
(**) N
(**) S 8 T (You get your supplies replenished and your captives are) N
(**) S 8 T (disembarked.  Note that your score is updated now, not when) N
(**) S 8 T (you actually take the captives.) N
(**) N
(**) S 8 T (Any repairs that need to be done are rescheduled to take) N
(**) S 8 T (place sooner.  This provides for the faster repairs when you) N
(**) S 8 T (are docked.) N
(*/) N
() p n
(void) k n
(dock\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i, j;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (ok;) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() N
() S 8 T () S
(if) K
( \(Ship.cond == DOCKED\)) p n
(dock.c) (Page 1/3) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Chekov: But captain, we are already docked\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(/* check for ok to dock, i.e., adjacent to a starbase */) c n
() p 8 T (ok = 0;) N
() S 8 T () S
(for) K
( \(i = Ship.sectx - 1; i <= Ship.sectx + 1 && !ok; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(i < 0 || i >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S
(for) K
( \(j = Ship.secty - 1; j <= Ship.secty + 1; j++\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(j  < 0 || j >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(Sect[i][j] == BASE\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (ok++;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(!ok\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Chekov: But captain, we are not adjacent to a starbase.\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() N
() S 8 T () S
(/* restore resources */) c n
() p 8 T (Ship.energy = Param.energy;) N
() S 8 T (Ship.torped = Param.torped;) N
() S 8 T (Ship.shield = Param.shield;) N
() S 8 T (Ship.crew = Param.crew;) N
() S 8 T (Game.captives += Param.brigfree - Ship.brigfree;) N
() S 8 T (Ship.brigfree = Param.brigfree;) N
() N
() S 8 T () S
(/* reset ship's defenses */) c n
() p 8 T (Ship.shldup = 0;) N
() S 8 T (Ship.cloaked = 0;) N
() S 8 T (Ship.cond = DOCKED;) N
() S 8 T (Ship.reserves = Param.reserves;) N
() N
() S 8 T () S
(/* recalibrate space inertial navigation system */) c n
() p 8 T (Ship.sinsbad = 0;) N
() N
() S 8 T () S
(/* output any saved radio messages */) c n
() p 8 T (dumpssradio\(\);) N
() N
() S 8 T () S
(/* reschedule any device repairs */) c n
() p 8 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (e = &Event[i];) N
() S 8 T () S 16 T () S
(if) K
( \(e->evcode != E_FIXDV\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T (reschedule\(e, \(e->date - Now.date\) * Param.dockfac\);) N
() S 8 T (}) N
() S 8 T () S
(return) K
(;) p n
(}) N
() N
() N
(/*) c n
(**  LEAVE A STARBASE) N
(**) N
(dock.c) (Page 2/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(dock.c) (24/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 25
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(**) c 8 T (This is the inverse of dock\(\).  The main function it performs) N
(**) S 8 T (is to reschedule any damages so that they will take longer.) N
(*/) N
() p n
(void) k n
(undock\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() N
() S 8 T () S
(if) K
( \(Ship.cond != DOCKED\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Sulu: Pardon me captain, but we are not docked.\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T (Ship.cond = GREEN;) N
() S 8 T (Move.free = 0;) N
() N
() S 8 T () S
(/* reschedule device repair times \(again\) */) c n
() p 8 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (e = &Event[i];) N
() S 8 T () S 16 T () S
(if) K
( \(e->evcode != E_FIXDV\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T (reschedule\(e, \(e->date - Now.date\) / Param.dockfac\);) N
() S 8 T (}) N
() S 8 T () S
(return) K
(;) p n
(}) N
(dock.c) (Page 3/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(dock.c) (25/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 26
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)dumpgame.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/dumpgame.c,v 1.6 1999/11/30 03:49:46 billf Exp $) N
( * $DragonFly: src/games/trek/dumpgame.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(#include) K
( <fcntl.h>) p n
() N
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/***  THIS CONSTANT MUST CHANGE AS THE DATA SPACES CHANGE ***/) c n
(# define) K
() p 16 T (VERSION) S 24 T () S 32 T (2) N
() N
(struct) k
( dump) p n
({) N
() S 8 T () S
(char) k
() p 16 T (*area;) N
() S 8 T () S
(int) k
() p 16 T (count;) N
(};) N
() N
() N
(struct) k
( dump) p 16 T (Dump_template[] =) N
({) N
() S 8 T ({ \() S
(char) k
( *\)&Ship,) p 32 T () S
(sizeof) K
( \(Ship\)) p 48 T (},) N
() S 8 T ({ \() S
(char) k
( *\)&Now,) p 24 T () S 32 T () S
(sizeof) K
( \(Now\)) p 48 T (},) N
() S 8 T ({ \() S
(char) k
( *\)&Param,) p 32 T () S
(sizeof) K
( \(Param\)) p 48 T (},) N
() S 8 T ({ \() S
(char) k
( *\)&Etc,) p 24 T () S 32 T () S
(sizeof) K
( \(Etc\)) p 48 T (},) N
() S 8 T ({ \() S
(char) k
( *\)&Game,) p 32 T () S
(sizeof) K
( \(Game\)) p 48 T (},) N
() S 8 T ({ \() S
(char) k
( *\)Sect,) p 24 T () S 32 T () S
(sizeof) K
( \(Sect\)) p 48 T (},) N
() S 8 T ({ \() S
(char) k
( *\)Quad,) p 24 T () S 32 T () S
(sizeof) K
( \(Quad\)) p 48 T (},) N
() S 8 T ({ \() S
(char) k
( *\)&Move,) p 32 T () S
(sizeof) K
( \(Move\)) p 48 T (},) N
() S 8 T ({ \() S
(char) k
( *\)Event,) p 32 T () S
(sizeof) K
( \(Event\)) p 48 T (},) N
(dumpgame.c) (Page 1/3) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T ({ ) S
(NULL) K
(,) p 16 T () S 24 T () S 32 T (0) S 40 T () S 48 T (}) N
(};) N
() N
(static) K
( bool) p 16 T (readdump\() S
(int) k
(\);) p n
() N
(/*) c n
(**  DUMP GAME) N
(**) N
(**) S 8 T (This routine dumps the game onto the file "trek.dump".  The) N
(**) S 8 T (first two bytes of the file are a version number, which) N
(**) S 8 T (reflects whether this image may be used.  Obviously, it must) N
(**) S 8 T (change as the size, content, or order of the data structures) N
(**) S 8 T (output change.) N
(*/) N
() p n
(void) k n
(dumpgame\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (version;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (fd;) N
() S 8 T () S
(struct) k
( dump) p 24 T (*d;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() N
() S 8 T () S
(if) K
( \(\(fd = creat\(") p
(trek.dump) str
(", 0644\)\) < 0\) {) p n
() S 8 T () S 16 T (printf\(") S
(cannot dump\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T (version = VERSION;) N
() S 8 T (write\(fd, &version, ) S
(sizeof) K
( version\);) p n
() N
() S 8 T () S
(/* output the main data areas */) c n
() p 8 T () S
(for) K
( \(d = Dump_template; d->area; d++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (write\(fd, &d->area, ) S
(sizeof) K
( d->area\);) p n
() S 8 T () S 16 T (i = d->count;) N
() S 8 T () S 16 T (write\(fd, d->area, i\);) N
() S 8 T (}) N
() N
() S 8 T (close\(fd\);) N
(}) N
() N
() N
(/*) c n
(**  RESTORE GAME) N
(**) N
(**) S 8 T (The game is restored from the file "trek.dump".  In order for) N
(**) S 8 T (this to succeed, the file must exist and be readable, must) N
(**) S 8 T (have the correct version number, and must have all the appro-) N
(**) S 8 T (priate data areas.) N
(**) N
(**) S 8 T (Return value is zero for success, one for failure.) N
(*/) N
() p n
(bool) N
(restartgame\() S
(void) k
(\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T (fd;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (version;) N
() N
() S 8 T () S
(if) K
( \(\(fd = open\(") p
(trek.dump) str
(", O_RDONLY\)\) < 0 ||) p n
() S 8 T (    read\(fd, &version, ) S
(sizeof) K
( version\) != ) p
(sizeof) K
( version ||) p n
() S 8 T (    version != VERSION ||) N
(dumpgame.c) (Page 2/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(dumpgame.c) (26/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 27
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (    readdump\(fd\)\)) N
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(cannot restart\\n) str
("\);) p n
() S 8 T () S 16 T (close\(fd\);) N
() S 8 T () S 16 T () S
(return) K
( \(1\);) p n
() S 8 T (}) N
() N
() S 8 T (close\(fd\);) N
() S 8 T () S
(return) K
( \(0\);) p n
(}) N
() N
() N
(/*) c n
(**  READ DUMP) N
(**) N
(**) S 8 T (This is the business end of restartgame\(\).  It reads in the) N
(**) S 8 T (areas.) N
(**) N
(**) S 8 T (Returns zero for success, one for failure.) N
(*/) N
() p n
(static) K
( bool) p n
(readdump\() S
(int) k
( fd1\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (fd;) N
() S 8 T () S
(struct) k
( dump) p 24 T (*d;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(long) k
() p 16 T () S 24 T () S 32 T (junk;) N
() N
() S 8 T (fd = fd1;) N
() N
() S 8 T () S
(for) K
( \(d = Dump_template; d->area; d++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(read\(fd, &junk, ) p
(sizeof) K
( junk\) != \() p
(sizeof) K
( junk\)\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
( \(1\);) p n
() S 8 T () S 16 T () S
(if) K
( \(\() p
(char) k
( *\)junk != d->area\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
( \(1\);) p n
() S 8 T () S 16 T (i = d->count;) N
() S 8 T () S 16 T () S
(if) K
( \(read\(fd, d->area, i\) != i\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
( \(1\);) p n
() S 8 T (}) N
() N
() S 8 T () S
(/* make quite certain we are at EOF */) c n
() p 8 T () S
(return) K
( \(read\(fd, &junk, 1\)\);) p n
(}) N
(dumpgame.c) (Page 3/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(dumpgame.c) (27/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 28
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)dumpme.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/dumpme.c,v 1.4 1999/11/30 03:49:47 billf Exp $) N
( * $DragonFly: src/games/trek/dumpme.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  Dump the starship somewhere in the galaxy) N
(**) N
(**) S 8 T (Parameter is zero if bounce off of negative energy barrier,) N
(**) S 8 T (one if through a black hole) N
(**) N
(**) S 8 T (Note that the quadrant is NOT initialized here.  This must) N
(**) S 8 T (be done from the calling routine.) N
(**) N
(**) S 8 T (Repair of devices must be deferred.) N
(*/) N
() p n
(void) k n
(dumpme\() p
(int) k
( flag\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (f;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (x = 0;) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() N
() S 8 T (f = flag;) N
() S 8 T (Ship.quadx = ranf\(NQUADS\);) N
() S 8 T (Ship.quady = ranf\(NQUADS\);) N
(dumpme.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (Ship.sectx = ranf\(NSECTS\);) N
() S 8 T (Ship.secty = ranf\(NSECTS\);) N
() S 8 T (x += 1.5 * franf\(\);) N
() S 8 T (Move.time += x;) N
() S 8 T () S
(if) K
( \(f\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(%s falls into a black hole.\\n) str
(", Ship.shipname\);) p n
() S 8 T (}) N
() S 8 T () S
(else) K n
() p 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Computer applies full reverse power to avoid hitting the\\n) str
("\);) p n
() S 8 T () S 16 T (printf\(") S
(   negative energy barrier.  A space warp was entered.\\n) str
("\);) p n
() S 8 T (}) N
() S 8 T () S
(/* bump repair dates forward */) c n
() p 8 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (e = &Event[i];) N
() S 8 T () S 16 T () S
(if) K
( \(e->evcode != E_FIXDV\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T (reschedule\(e, \(e->date - Now.date\) + x\);) N
() S 8 T (}) N
() S 8 T (events\(1\);) N
() S 8 T (printf\(") S
(You are now in quadrant %d,%d.  It is stardate %.2f\\n) str
(",) p n
() S 8 T () S 16 T (Ship.quadx, Ship.quady, Now.date\);) N
() S 8 T (Move.time = 0;) N
(}) N
(dumpme.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(dumpme.c) (28/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 29
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)dumpssradio.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/dumpssradio.c,v 1.4 1999/11/30 03:49:47 billf Exp $) N
( * $DragonFly: src/games/trek/dumpssradio.c,v 1.3 2006/09/07 21:19:44 pavalos Ex) N
(p $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/**) c n
( **) S 8 T (output hidden distress calls) N
( **/) N
() p n
(int) k n
(dumpssradio\() p
(void) k
(\)) p n
({) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (j;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (chkrest;) N
() N
() S 8 T (chkrest = 0;) N
() S 8 T () S
(for) K
( \(j = 0; j < MAXEVENTS; j++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (e = &Event[j];) N
() S 8 T () S 16 T () S
(/* if it is not hidden, then just ignore it */) c n
() p 8 T () S 16 T () S
(if) K
( \(\(e->evcode & E_HIDDEN\) == 0\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S
(if) K
( \(e->evcode & E_GHOST\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (unschedule\(e\);) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(Starsystem %s in quadrant %d,%d is no longer distressed\\n) str
(",) p n
(dumpssradio.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T (systemname\(&Quad[e->x][e->y]\), e->x, e->y\);) N
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(switch) K
( \(e->evcode\)) p n
() S 8 T () S 16 T ({) N
() N
() S 8 T () S 16 T (  ) S
(case) K
( E_KDESB:) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(Starbase in quadrant %d,%d is under attack\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T (e->x, e->y\);) N
() S 8 T () S 16 T () S 24 T (chkrest++;) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( E_ENSLV:) p n
() S 8 T () S 16 T (  ) S
(case) K
( E_REPRO:) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(Starsystem %s in quadrant %d,%d is distressed\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T (systemname\(&Quad[e->x][e->y]\), e->x, e->y\);) N
() S 8 T () S 16 T () S 24 T (chkrest++;) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() N
() S 8 T () S
(return) K
( \(chkrest\);) p n
(}) N
(dumpssradio.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(dumpssradio.c) (29/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 30
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)events.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/events.c,v 1.4 1999/11/30 03:49:47 billf Exp $) N
( * $DragonFly: src/games/trek/events.c,v 1.4 2008/04/20 13:44:24 swildner Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  CAUSE TIME TO ELAPSE) N
(**) N
(**) S 8 T (This routine does a hell of a lot.  It elapses time, eats up) N
(**) S 8 T (energy, regenerates energy, processes any events that occur,) N
(**) S 8 T (and so on.) N
(*/) N
() p n
(void) k n
(events\() p
(int) k
( t_warp\)) p n
(/* t_warp:  set if called in a time warp */) c n
({) p n
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (j = 0;) N
() S 8 T () S
(struct) k
( kling) p 24 T () S 32 T (*k;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (rtime;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (xdate;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (idate;) N
() S 8 T () S
(struct) k
( event) p 24 T () S 32 T (*ev = ) S
(NULL) K
(;) p n
() S 8 T () S
(char) k
() p 16 T () S 24 T () S 32 T (*s;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (ix, iy;) N
() S 8 T () S
(struct) k
( quad) p 24 T (*q;) N
(events.c) (Page 1/8) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(struct) k
( event) p 24 T (*e;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (evnum;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (restcancel;) N
() N
() S 8 T () S
(/* if nothing happened, just allow for any Klingons killed */) c n
() p 8 T () S
(if) K
( \(Move.time <= 0.0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (Now.time = Now.resource / Now.klings;) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() N
() S 8 T () S
(/* indicate that the cloaking device is now working */) c n
() p 8 T (Ship.cloakgood = 1;) N
() N
() S 8 T () S
(/* idate is the initial date */) c n
() p 8 T (idate = Now.date;) N
() N
() S 8 T () S
(/* schedule attacks if resting too long */) c n
() p 8 T () S
(if) K
( \(Move.time > 0.5 && Move.resting\)) p n
() S 8 T () S 16 T (schedule\(E_ATTACK, 0.5, 0, 0, 0\);) N
() N
() S 8 T () S
(/* scan the event list */) c n
() p 8 T () S
(while) K
( \(1\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (restcancel = 0;) N
() S 8 T () S 16 T (evnum = -1;) N
() S 8 T () S 16 T () S
(/* xdate is the date of the current event */) c n
() p 8 T () S 16 T (xdate = idate + Move.time;) N
() N
() S 8 T () S 16 T () S
(/* find the first event that has happened */) c n
() p 8 T () S 16 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (e = &Event[i];) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(e->evcode == 0 || \(e->evcode & E_GHOST\)\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(e->date < xdate\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (xdate = e->date;) N
() S 8 T () S 16 T () S 24 T () S 32 T (ev = e;) N
() S 8 T () S 16 T () S 24 T () S 32 T (evnum = i;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (e = ev;) N
() N
() S 8 T () S 16 T () S
(/* find the time between events */) c n
() p 8 T () S 16 T (rtime = xdate - Now.date;) N
() N
() S 8 T () S 16 T () S
(/* decrement the magic "Federation Resources" pseudo-variable */) c n
() p 8 T () S 16 T (Now.resource -= Now.klings * rtime;) N
() S 8 T () S 16 T () S
(/* and recompute the time left */) c n
() p 8 T () S 16 T (Now.time = Now.resource / Now.klings;) N
() N
() S 8 T () S 16 T () S
(/* move us up to the next date */) c n
() p 8 T () S 16 T (Now.date = xdate;) N
() N
() S 8 T () S 16 T () S
(/* check for out of time */) c n
() p 8 T () S 16 T () S
(if) K
( \(Now.time <= 0.0\)) p n
() S 8 T () S 16 T () S 24 T (lose\(L_NOTIME\);) N
(#) S 8 T () S 16 T (ifdef xTRACE) N
() S 8 T () S 16 T () S
(if) K
( \(evnum >= 0 && Trace\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(xdate = %.2f, evcode %d params %d %d %d\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T (xdate, e->evcode, e->x, e->y, e->systemname\);) N
(events.c) (Page 2/8) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(events.c) (30/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 31
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#) p 8 T () S 16 T (endif) N
() N
() S 8 T () S 16 T () S
(/* if evnum < 0, no events occurred  */) c n
() p 8 T () S 16 T () S
(if) K
( \(evnum < 0\)) p n
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S
(/* otherwise one did.  Find out what it is */) c n
() p 8 T () S 16 T () S
(switch) K
( \(e->evcode & E_EVENT\)) p n
() S 8 T () S 16 T ({) N
() N
() S 8 T () S 16 T (  ) S
(case) K
( E_SNOVA:) p 32 T () S 40 T () S 48 T () S
(/* supernova */) c n
() p 8 T () S 16 T () S 24 T () S
(/* cause the supernova to happen */) c n
() p 8 T () S 16 T () S 24 T (snova\(-1, 0\);) N
() S 8 T () S 16 T () S 24 T () S
(/* and schedule the next one */) c n
() p 8 T () S 16 T () S 24 T (xresched\(e, E_SNOVA, 1\);) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( E_LRTB:) p 32 T () S 40 T () S 48 T () S
(/* long range tractor beam */) c n
() p 8 T () S 16 T () S 24 T () S
(/* schedule the next one */) c n
() p 8 T () S 16 T () S 24 T (xresched\(e, E_LRTB, Now.klings\);) N
() S 8 T () S 16 T () S 24 T () S
(/* LRTB cannot occur if we are docked */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(Ship.cond != DOCKED\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* pick a new quadrant */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (i = ranf\(Now.klings\) + 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(for) K
( \(ix = 0; ix < NQUADS; ix++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(for) K
( \(iy = 0; iy < NQUADS; iy++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (q = &Quad[ix][iy];) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(if) K
( \(q->stars >= 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S
(if) K
( \(\(i -= q->klings\) <= ) p n
(0\)) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(i <= 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* test for LRTB to same quadrant */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(Ship.quadx == ix && Ship.quady == iy\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* nope, dump him in the new quadrant */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (Ship.quadx = ix;) N
() S 8 T () S 16 T () S 24 T () S 32 T (Ship.quady = iy;) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(\\n%s caught in long range tractor beam\\n) str
(", Ship.ship) p n
(name\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(*** Pulled to quadrant %d,%d\\n) str
(", Ship.quadx, Shi) p n
(p.quady\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (Ship.sectx = ranf\(NSECTS\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (Ship.secty = ranf\(NSECTS\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (initquad\(0\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* truncate the move time */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (Move.time = xdate - idate;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( E_KATSB:) p 32 T () S 40 T () S 48 T () S
(/* Klingon attacks starbase */) c n
() p 8 T () S 16 T () S 24 T () S
(/* if out of bases, forget it */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(Now.bases <= 0\)) p n
() S 8 T () S 16 T () S 24 T ({) N
(events.c) (Page 3/8) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T (unschedule\(e\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() N
() S 8 T () S 16 T () S 24 T () S
(/* check for starbase and Klingons in same quadrant */) c n
() p 8 T () S 16 T () S 24 T () S
(for) K
( \(i = 0; i < Now.bases; i++\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (ix = Now.base[i].x;) N
() S 8 T () S 16 T () S 24 T () S 32 T (iy = Now.base[i].y;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* see if a Klingon exists in this quadrant */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (q = &Quad[ix][iy];) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(q->klings <= 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(continue) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* see if already distressed */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(for) K
( \(j = 0; j < MAXEVENTS; j++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (e = &Event[j];) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(\(e->evcode & E_EVENT\) != E_KDESB\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(e->x == ix && e->y == iy\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(j < MAXEVENTS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(continue) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* got a potential attack */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (e = ev;) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(i >= Now.bases\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* not now; wait a while and see if some Klingon) c n
(s move in */) N
() p 8 T () S 16 T () S 24 T () S 32 T (reschedule\(e, 0.5 + 3.0 * franf\(\)\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(/* schedule a new attack, and a destruction of the base ) c n
(*/) N
() p 8 T () S 16 T () S 24 T (xresched\(e, E_KATSB, 1\);) N
() S 8 T () S 16 T () S 24 T (e = xsched\(E_KDESB, 1, ix, iy, 0\);) N
() N
() S 8 T () S 16 T () S 24 T () S
(/* report it if we can */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(!damaged\(SSRADIO\)\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(\\nUhura:  Captain, we have received a distress signal\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(  from the starbase in quadrant %d,%d.\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (ix, iy\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (restcancel++;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(/* SSRADIO out, make it so we can't see the dist) c n
(ress call */) N
() p 8 T () S 16 T () S 24 T () S 32 T () S
(/* but it's still there!!! */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (e->evcode |= E_HIDDEN;) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( E_KDESB:) p 32 T () S 40 T () S 48 T () S
(/* Klingon destroys starbase */) c n
() p 8 T () S 16 T () S 24 T (unschedule\(e\);) N
() S 8 T () S 16 T () S 24 T (q = &Quad[e->x][e->y];) N
() S 8 T () S 16 T () S 24 T () S
(/* if the base has mysteriously gone away, or if the Kli) c n
(ngon) N
(events.c) (Page 4/8) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(events.c) (31/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 32
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() c 8 T () S 16 T () S 24 T (   got tired and went home, ignore this event */) N
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(q->bases <=0 || q->klings <= 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(/* are we in the same quadrant? */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(e->x == Ship.quadx && e->y == Ship.quady\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* yep, kill one in this quadrant */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(\\nSpock: ) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (killb\(Ship.quadx, Ship.quady\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(/* kill one in some other quadrant */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (killb\(e->x, e->y\);) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( E_ISSUE:) p 32 T () S 40 T () S
(/* issue a distress call */) c n
() p 8 T () S 16 T () S 24 T (xresched\(e, E_ISSUE, 1\);) N
() S 8 T () S 16 T () S 24 T () S
(/* if we already have too many, throw this one away */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(Ship.distressed >= MAXDISTR\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(/* try a whole bunch of times to find something suitable) c n
( */) N
() p 8 T () S 16 T () S 24 T () S
(for) K
( \(i = 0; i < 100; i++\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (ix = ranf\(NQUADS\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (iy = ranf\(NQUADS\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (q = &Quad[ix][iy];) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* need a quadrant which is not the current one,) c n
() S 8 T () S 16 T () S 24 T () S 32 T (   which has some stars which are inhabited and) N
() S 8 T () S 16 T () S 24 T () S 32 T (   not already under attack, which is not) N
() S 8 T () S 16 T () S 24 T () S 32 T (   supernova'ed, and which has some Klingons in ) N
(it */) N
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(!\(\(ix == Ship.quadx && iy == Ship.quady\) || ) p n
(q->stars < 0 ||) N
() S 8 T () S 16 T () S 24 T () S 32 T (    \(q->qsystemname & Q_DISTRESSED\) ||) N
() S 8 T () S 16 T () S 24 T () S 32 T (    \(q->qsystemname & Q_SYSTEM\) == 0 || q->kling) N
(s <= 0\)\)) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(i >= 100\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* can't seem to find one; ignore this call */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T () S
(/* got one!!  Schedule its enslavement */) c n
() p 8 T () S 16 T () S 24 T (Ship.distressed++;) N
() S 8 T () S 16 T () S 24 T (e = xsched\(E_ENSLV, 1, ix, iy, q->qsystemname\);) N
() S 8 T () S 16 T () S 24 T (q->qsystemname = \(e - Event\) | Q_DISTRESSED;) N
() N
() S 8 T () S 16 T () S 24 T () S
(/* tell the captain about it if we can */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(!damaged\(SSRADIO\)\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(\\nUhura: Captain, starsystem %s in quadrant %d,%d is und) str n
(er attack\\n) S
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (Systemname[e->systemname], ix, iy\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (restcancel++;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(/* if we can't tell him, make it invisible */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (e->evcode |= E_HIDDEN;) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( E_ENSLV:) p 32 T () S 40 T () S
(/* starsystem is enslaved */) c n
(events.c) (Page 5/8) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T (unschedule\(e\);) N
() S 8 T () S 16 T () S 24 T () S
(/* see if current distress call still active */) c n
() p 8 T () S 16 T () S 24 T (q = &Quad[e->x][e->y];) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(q->klings <= 0\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* no Klingons, clean up */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(/* restore the system name */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (q->qsystemname = e->systemname;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() N
() S 8 T () S 16 T () S 24 T () S
(/* play stork and schedule the first baby */) c n
() p 8 T () S 16 T () S 24 T (e = schedule\(E_REPRO, Param.eventdly[E_REPRO] * franf\(\),) N
( e->x, e->y, e->systemname\);) N
() N
() S 8 T () S 16 T () S 24 T () S
(/* report the disaster if we can */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(!damaged\(SSRADIO\)\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(\\nUhura:  We've lost contact with starsystem %s\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (Systemname[e->systemname]\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(  in quadrant %d,%d.\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (e->x, e->y\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T (e->evcode |= E_HIDDEN;) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( E_REPRO:) p 32 T () S 40 T () S
(/* Klingon reproduces */) c n
() p 8 T () S 16 T () S 24 T () S
(/* see if distress call is still active */) c n
() p 8 T () S 16 T () S 24 T (q = &Quad[e->x][e->y];) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(q->klings <= 0\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (unschedule\(e\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (q->qsystemname = e->systemname;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (xresched\(e, E_REPRO, 1\);) N
() S 8 T () S 16 T () S 24 T () S
(/* reproduce one Klingon */) c n
() p 8 T () S 16 T () S 24 T (ix = e->x;) N
() S 8 T () S 16 T () S 24 T (iy = e->y;) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(Now.klings == 127\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p 40 T () S 48 T () S
(/* full right now */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(q->klings >= MAXKLQUAD\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* this quadrant not ok, pick an adjacent one */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S
(for) K
( \(i = ix - 1; i <= ix + 1; i++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(i < 0 || i >= NQUADS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(for) K
( \(j = iy - 1; j <= iy + 1; j++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(if) K
( \(j < 0 || j >= NQUADS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (q = &Quad[i][j];) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(/* check for this quad ok \(not f) c n
(ull & no snova\) */) N
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(if) K
( \(q->klings >= MAXKLQUAD || q-) p n
(>stars < 0\)) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(j <= iy + 1\)) p n
(events.c) (Page 6/8) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(events.c) (32/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 33
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(j > iy + 1\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(/* cannot create another yet */) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (ix = i;) N
() S 8 T () S 16 T () S 24 T () S 32 T (iy = j;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(/* deliver the child */) c n
() p 8 T () S 16 T () S 24 T (q->klings++;) N
() S 8 T () S 16 T () S 24 T (Now.klings++;) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(ix == Ship.quadx && iy == Ship.quady\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* we must position Klingon */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (sector\(&ix, &iy\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (Sect[ix][iy] = KLINGON;) N
() S 8 T () S 16 T () S 24 T () S 32 T (k = &Etc.klingon[Etc.nkling++];) N
() S 8 T () S 16 T () S 24 T () S 32 T (k->x = ix;) N
() S 8 T () S 16 T () S 24 T () S 32 T (k->y = iy;) N
() S 8 T () S 16 T () S 24 T () S 32 T (k->power = Param.klingpwr;) N
() S 8 T () S 16 T () S 24 T () S 32 T (k->srndreq = 0;) N
() S 8 T () S 16 T () S 24 T () S 32 T (compkldist\(Etc.klingon[0].dist == Etc.klingon[0]) N
(.avgdist ? 0 : 1\);) N
() S 8 T () S 16 T () S 24 T (}) N
() N
() S 8 T () S 16 T () S 24 T () S
(/* recompute time left */) c n
() p 8 T () S 16 T () S 24 T (Now.time = Now.resource / Now.klings;) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( E_SNAP:) p 32 T () S 40 T () S
(/* take a snapshot of the galaxy */) c n
() p 8 T () S 16 T () S 24 T (xresched\(e, E_SNAP, 1\);) N
() S 8 T () S 16 T () S 24 T (s = Etc.snapshot;) N
() S 8 T () S 16 T () S 24 T (s = bmove\(Quad, s, ) S
(sizeof) K
( \(Quad\)\);) p n
() S 8 T () S 16 T () S 24 T (s = bmove\(Event, s, ) S
(sizeof) K
( \(Event\)\);) p n
() S 8 T () S 16 T () S 24 T (s = bmove\(&Now, s, ) S
(sizeof) K
( \(Now\)\);) p n
() S 8 T () S 16 T () S 24 T (Game.snap = 1;) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( E_ATTACK:) p 40 T () S
(/* Klingons attack during rest period */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(!Move.resting\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (unschedule\(e\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (attack\(1\);) N
() S 8 T () S 16 T () S 24 T (reschedule\(e, 0.5\);) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( E_FIXDV:) p n
() S 8 T () S 16 T () S 24 T (i = e->systemname;) N
() S 8 T () S 16 T () S 24 T (unschedule\(e\);) N
() N
() S 8 T () S 16 T () S 24 T () S
(/* de-damage the device */) c n
() p 8 T () S 16 T () S 24 T (printf\(") S
(%s reports repair work on the %s finished.\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T (Device[i].person, Device[i].name\);) N
() N
() S 8 T () S 16 T () S 24 T () S
(/* handle special processing upon fix */) c n
() p 8 T () S 16 T () S 24 T () S
(switch) K
( \(i\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( LIFESUP:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (Ship.reserves = Param.reserves;) N
(events.c) (Page 7/8) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( SINS:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(Ship.cond == DOCKED\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(Spock has tried to recalibrate your Space Internal Navigatio) str n
(n System,\\n) S
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(  but he has no standard base to calibrate to.  Suggest you g) str n
(et\\n) S
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(  to a starbase immediately so that you can properly recalibr) str n
(ate.\\n) S
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (Ship.sinsbad = 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( SSRADIO:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (restcancel = dumpssradio\(\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(default) K
(:) p n
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(if) K
( \(restcancel && Move.resting && getynpar\(") p
(Spock: Shall we cancel our re) str n
(st period) S
("\)\)) p n
() S 8 T () S 16 T () S 24 T (Move.time = xdate - idate;) N
() N
() S 8 T (}) N
() N
() S 8 T () S
(/* unschedule an attack during a rest period */) c n
() p 8 T () S
(if) K
( \(\(e = Now.eventptr[E_ATTACK]\)\)) p n
() S 8 T () S 16 T (unschedule\(e\);) N
() N
() S 8 T () S
(if) K
( \(!t_warp\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* eat up energy if cloaked */) c n
() p 8 T () S 16 T () S
(if) K
( \(Ship.cloaked\)) p n
() S 8 T () S 16 T () S 24 T (Ship.energy -= Param.cloakenergy * Move.time;) N
() N
() S 8 T () S 16 T () S
(/* regenerate resources */) c n
() p 8 T () S 16 T (rtime = 1.0 - exp\(-Param.regenfac * Move.time\);) N
() S 8 T () S 16 T (Ship.shield += \(Param.shield - Ship.shield\) * rtime;) N
() S 8 T () S 16 T (Ship.energy += \(Param.energy - Ship.energy\) * rtime;) N
() N
() S 8 T () S 16 T () S
(/* decrement life support reserves */) c n
() p 8 T () S 16 T () S
(if) K
( \(damaged\(LIFESUP\) && Ship.cond != DOCKED\)) p n
() S 8 T () S 16 T () S 24 T (Ship.reserves -= Move.time;) N
() S 8 T (}) N
() S 8 T () S
(return) K
(;) p n
(}) N
(events.c) (Page 8/8) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(events.c) (33/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 34
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)externs.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/externs.c,v 1.2 1999/11/30 03:49:47 billf Exp $) N
( * $DragonFly: src/games/trek/externs.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**) S 8 T (global variable definitions) N
(*/) N
() p n
(struct) k
( device) p 16 T (Device[NDEV] =) N
({) N
() S 8 T ({ ") S
(warp drive) str
(",) p 24 T () S 32 T (") S
(Scotty) str
(" },) p n
() S 8 T ({ ") S
(S.R. scanners) str
(",) p 32 T (") S
(Scotty) str
(" },) p n
() S 8 T ({ ") S
(L.R. scanners) str
(",) p 32 T (") S
(Scotty) str
(" },) p n
() S 8 T ({ ") S
(phasers) str
(",) p 24 T () S 32 T (") S
(Sulu) str
(" },) p n
() S 8 T ({ ") S
(photon tubes) str
(",) p 32 T (") S
(Sulu) str
(" },) p n
() S 8 T ({ ") S
(impulse engines) str
(",) p 32 T (") S
(Scotty) str
(" },) p n
() S 8 T ({ ") S
(shield control) str
(",) p 32 T (") S
(Sulu) str
(" },) p n
() S 8 T ({ ") S
(computer) str
(",) p 24 T () S 32 T (") S
(Spock) str
(" },) p n
() S 8 T ({ ") S
(subspace radio) str
(",) p 32 T (") S
(Uhura) str
(" },) p n
() S 8 T ({ ") S
(life support) str
(",) p 32 T (") S
(Scotty) str
(" },) p n
() S 8 T ({ ") S
(navigation system) str
(",) p 32 T (") S
(Chekov) str
(" },) p n
() S 8 T ({ ") S
(cloaking device) str
(",) p 32 T (") S
(Scotty) str
(" },) p n
() S 8 T ({ ") S
(transporter) str
(",) p 32 T (") S
(Scotty) str
(" },) p n
() S 8 T ({ ") S
(shuttlecraft) str
(",) p 32 T (") S
(Scotty) str
(" },) p n
() S 8 T ({ ") S
(*ERR 14*) str
(",) p 24 T () S 32 T (") S
(Nobody) str
(" },) p n
() S 8 T ({ ") S
(*ERR 15*) str
(",) p 24 T () S 32 T (") S
(Nobody) str
(" }) p n
(};) N
(externs.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(const) K
( ) p
(char) k
() p 16 T (*Systemname[NINHAB] =) N
({) N
() S 8 T (") S
(ERROR) str
(",) p n
() S 8 T (") S
(Talos IV) str
(",) p n
() S 8 T (") S
(Rigel III) str
(",) p n
() S 8 T (") S
(Deneb VII) str
(",) p n
() S 8 T (") S
(Canopus V) str
(",) p n
() S 8 T (") S
(Icarus I) str
(",) p n
() S 8 T (") S
(Prometheus II) str
(",) p n
() S 8 T (") S
(Omega VII) str
(",) p n
() S 8 T (") S
(Elysium I) str
(",) p n
() S 8 T (") S
(Scalos IV) str
(",) p n
() S 8 T (") S
(Procyon IV) str
(",) p n
() S 8 T (") S
(Arachnid I) str
(",) p n
() S 8 T (") S
(Argo VIII) str
(",) p n
() S 8 T (") S
(Triad III) str
(",) p n
() S 8 T (") S
(Echo IV) str
(",) p n
() S 8 T (") S
(Nimrod III) str
(",) p n
() S 8 T (") S
(Nemisis IV) str
(",) p n
() S 8 T (") S
(Centarurus I) str
(",) p n
() S 8 T (") S
(Kronos III) str
(",) p n
() S 8 T (") S
(Spectros V) str
(",) p n
() S 8 T (") S
(Beta III) str
(",) p n
() S 8 T (") S
(Gamma Tranguli VI) str
(",) p n
() S 8 T (") S
(Pyris III) str
(",) p n
() S 8 T (") S
(Triachus) str
(",) p n
() S 8 T (") S
(Marcus XII) str
(",) p n
() S 8 T (") S
(Kaland) str
(",) p n
() S 8 T (") S
(Ardana) str
(",) p n
() S 8 T (") S
(Stratos) str
(",) p n
() S 8 T (") S
(Eden) str
(",) p n
() S 8 T (") S
(Arrikis) str
(",) p n
() S 8 T (") S
(Epsilon Eridani IV) str
(",) p n
() S 8 T (") S
(Exo III) str
(") p n
(};) N
(externs.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(externs.c) (34/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 35
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)getcodi.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/getcodi.c,v 1.2 1999/11/30 03:49:48 billf Exp $) N
( * $DragonFly: src/games/trek/getcodi.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  get course and distance) N
(**) N
(**) S 8 T (The user is asked for a course and distance.  This is used by) N
(**) S 8 T (move, impulse, and some of the computer functions.) N
(**) N
(**) S 8 T (The return value is zero for success, one for an invalid input) N
(**) S 8 T (\(meaning to drop the request\).) N
(*/) N
() p n
(bool) N
(getcodi\() S
(int) k
( *co, ) p
(double) k
( *di\)) p n
({) N
() N
() S 8 T (*co = getintpar\(") S
(Course) str
("\);) p n
() N
() S 8 T () S
(/* course must be in the interval [0, 360] */) c n
() p 8 T () S
(if) K
( \(*co < 0 || *co > 360\)) p n
() S 8 T () S 16 T () S
(return) K
( \(1\);) p n
() S 8 T (*di = getfltpar\(") S
(Distance) str
("\);) p n
() N
() S 8 T () S
(/* distance must be in the interval [0, 15] */) c n
(getcodi.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(if) K
( \(*di <= 0.0 || *di > 15.0\)) p n
() S 8 T () S 16 T () S
(return) K
( \(1\);) p n
() N
() S 8 T () S
(/* good return */) c n
() p 8 T () S
(return) K
( \(0\);) p n
(}) N
(getcodi.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(getcodi.c) (35/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 36
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)getpar.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/getpar.c,v 1.5 1999/11/30 03:49:48 billf Exp $) N
( * $DragonFly: src/games/trek/getpar.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(static) K
( bool) p 16 T (testterm\() S
(void) k
(\);) p n
() N
(/**) c n
( **) S 8 T (get integer parameter) N
( **/) N
() p n
(int) k n
(getintpar\() p
(const) K
( ) p
(char) k
( *s\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T (i;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (n;) N
() N
() S 8 T () S
(while) K
( \(1\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(testnl\(\) && s\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(%s: ) str
(", s\);) p n
() S 8 T () S 16 T (i = scanf\(") S
(%d) str
(", &n\);) p n
() S 8 T () S 16 T () S
(if) K
( \(i < 0\)) p n
() S 8 T () S 16 T () S 24 T (exit\(1\);) N
() S 8 T () S 16 T () S
(if) K
( \(i > 0 && testterm\(\)\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
( \(n\);) p n
() S 8 T () S 16 T (printf\(") S
(invalid input; please enter an integer\\n) str
("\);) p n
(getpar.c) (Page 1/5) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (skiptonl\(0\);) N
() S 8 T (}) N
(}) N
() N
(/**) c n
( **) S 8 T (get floating parameter) N
( **/) N
() p n
(double) k n
(getfltpar\() p
(const) K
( ) p
(char) k
( *s\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (d;) N
() N
() S 8 T () S
(while) K
( \(1\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(testnl\(\) && s\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(%s: ) str
(", s\);) p n
() S 8 T () S 16 T (i = scanf\(") S
(%lf) str
(", &d\);) p n
() S 8 T () S 16 T () S
(if) K
( \(i < 0\)) p n
() S 8 T () S 16 T () S 24 T (exit\(1\);) N
() S 8 T () S 16 T () S
(if) K
( \(i > 0 && testterm\(\)\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
( \(d\);) p n
() S 8 T () S 16 T (printf\(") S
(invalid input; please enter a double\\n) str
("\);) p n
() S 8 T () S 16 T (skiptonl\(0\);) N
() S 8 T (}) N
(}) N
() N
(/**) c n
( **) S 8 T (get yes/no parameter) N
( **/) N
() p n
(struct) k
( cvntab) p 16 T (Yntab[] =) N
({) N
() S 8 T ({ ") S
(y) str
(",) p 16 T (") S
(es) str
(",) p 24 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)1,) p 48 T (0 },) N
() S 8 T ({ ") S
(n) str
(",) p 16 T (") S
(o) str
(",) p 24 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)0,) p 48 T (0 },) N
() S 8 T ({ ) S
(NULL) K
(,) p 16 T () S
(NULL) K
(,) p 24 T () S
(NULL) K
(,) p 32 T () S 40 T () S 48 T (0 }) N
(};) N
() N
(long) k n
(getynpar\() p
(const) K
( ) p
(char) k
( *s\)) p n
({) N
() S 8 T () S
(struct) k
( cvntab) p 24 T () S 32 T (*r;) N
() N
() S 8 T (r = getcodpar\(s, Yntab\);) N
() S 8 T () S
(return) K
( \(\() p
(long) k
(\) r->value\);) p n
(}) N
() N
() N
(/**) c n
( **) S 8 T (get coded parameter) N
( **/) N
() p n
(struct) k
( cvntab *) p n
(getcodpar\() S
(const) K
( ) p
(char) k
( *s, ) p
(struct) k
( cvntab tab[]\)) p n
({) N
() S 8 T () S
(char) k
() p 16 T () S 24 T () S 32 T () S 40 T (input[100];) N
() S 8 T () S
(struct) k
( cvntab) p 24 T () S 32 T (*r;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T () S 40 T (flag;) N
() S 8 T () S
(char) k
() p 16 T () S 24 T () S 32 T (*p;) N
() S 8 T () S
(const) K
( ) p
(char) k
() p 24 T () S 32 T (*q;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T () S 40 T (c;) N
(getpar.c) (Page 2/5) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(getpar.c) (36/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 37
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T () S 40 T (f;) N
() N
() S 8 T (flag = 0;) N
() S 8 T () S
(while) K
( \(1\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (flag |= \(f = testnl\(\)\);) N
() S 8 T () S 16 T () S
(if) K
( \(flag\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(%s: ) str
(", s\);) p n
() S 8 T () S 16 T () S
(if) K
( \(f\)) p n
() S 8 T () S 16 T () S 24 T (cgetc\(0\);) S 40 T () S 48 T () S
(/* throw out the newline */) c n
() p 8 T () S 16 T (scanf\(") S
(%*[ \\t;]) str
("\);) p n
() S 8 T () S 16 T () S
(if) K
( \(\(c = scanf\(") p
(%[^ \\t;\\n]) str
(", input\)\) < 0\)) p n
() S 8 T () S 16 T () S 24 T (exit\(1\);) N
() S 8 T () S 16 T () S
(if) K
( \(c == 0\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T (flag = 1;) N
() N
() S 8 T () S 16 T () S
(/* if command list, print four per line */) c n
() p 8 T () S 16 T () S
(if) K
( \(input[0] == ') p
(?) str
(' && input[1] == 0\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (c = 4;) N
() S 8 T () S 16 T () S 24 T () S
(for) K
( \(r = tab; r->abrev; r++\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (strcpy\(input, r->abrev\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (strcat\(input, r->full\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(%14.14s) str
(", input\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(--c > 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (c = 4;) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(c != 4\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(/* search for in table */) c n
() p 8 T () S 16 T () S
(for) K
( \(r = tab; r->abrev; r++\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (p = input;) N
() S 8 T () S 16 T () S 24 T () S
(for) K
( \(q = r->abrev; *q; q++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(*p++ != *q\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(!*q\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(for) K
( \(q = r->full; *p && *q; q++, p++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(*p != *q\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(!*p || !*q\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(/* check for not found */) c n
() p 8 T () S 16 T () S
(if) K
( \(!r->abrev\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(invalid input; ? for valid inputs\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T (skiptonl\(0\);) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S
(return) K
( \(r\);) p n
() S 8 T (}) N
(getpar.c) (Page 3/5) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(}) p n
() N
() N
(/**) c n
( **) S 8 T (get string parameter) N
( **/) N
() p n
(void) k n
(getstrpar\() p
(const) K
( ) p
(char) k
( *s, ) p
(char) k
( *r, ) p
(int) k
( l, ) p
(const) K
( ) p
(char) k
( *t\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T (i;) N
() S 8 T () S
(char) k
() p 16 T () S 24 T (format[20];) N
() S 8 T () S
(int) k
() p 16 T (f;) N
() N
() S 8 T () S
(if) K
( \(t == 0\)) p n
() S 8 T () S 16 T (t = ") S
( \\t\\n;) str
(";) p n
() S 8 T (sprintf\(format, ") S
(%%%d[^%s]) str
(", l, t\);) p n
() S 8 T () S
(while) K
( \(1\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(\(f = testnl\(\)\) && s\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(%s: ) str
(", s\);) p n
() S 8 T () S 16 T () S
(if) K
( \(f\)) p n
() S 8 T () S 16 T () S 24 T (cgetc\(0\);) N
() S 8 T () S 16 T (scanf\(") S
(%*[\\t ;]) str
("\);) p n
() S 8 T () S 16 T (i = scanf\(format, r\);) N
() S 8 T () S 16 T () S
(if) K
( \(i < 0\)) p n
() S 8 T () S 16 T () S 24 T (exit\(1\);) N
() S 8 T () S 16 T () S
(if) K
( \(i != 0\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T (}) N
(}) N
() N
() N
(/**) c n
( **) S 8 T (test if newline is next valid character) N
( **/) N
() p n
(bool) N
(testnl\() S
(void) k
(\)) p n
({) N
() S 8 T () S
(char) k
() p 16 T () S 24 T (c;) N
() N
() S 8 T () S
(while) K
( \(\(c = cgetc\(0\)\) != ') p
(\\n) str
('\)) p n
() S 8 T () S 16 T () S
(if) K
( \(\(c >= ') p
(0) str
(' && c <= ') p
(9) str
('\) || c == ') p
(.) str
(' || c == ') p
(!) str
(' ||) p n
() S 8 T () S 16 T () S 24 T () S 32 T (\(c >= ') S
(A) str
(' && c <= ') p
(Z) str
('\) ||) p n
() S 8 T () S 16 T () S 24 T () S 32 T (\(c >= ') S
(a) str
(' && c <= ') p
(z) str
('\) || c == ') p
(-) str
('\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (ungetc\(c, stdin\);) N
() S 8 T () S 16 T () S 24 T () S
(return) K
(\(0\);) p n
() S 8 T () S 16 T (}) N
() S 8 T (ungetc\(c, stdin\);) N
() S 8 T () S
(return) K
( \(1\);) p n
(}) N
() N
() N
(/**) c n
( **) S 8 T (scan for newline) N
( **/) N
() p n
(void) k n
(skiptonl\() p
(char) k
( c\)) p n
({) N
(getpar.c) (Page 4/5) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(getpar.c) (37/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 38
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(while) K
( \(c != ') p
(\\n) str
('\)) p n
() S 8 T () S 16 T () S
(if) K
( \(!\(c = cgetc\(0\)\)\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T (ungetc\(') S
(\\n) str
(', stdin\);) p n
() S 8 T () S
(return) K
(;) p n
(}) N
() N
() N
(/**) c n
( **) S 8 T (test for valid terminator) N
( **/) N
() p n
(static) K
( bool) p n
(testterm\() S
(void) k
(\)) p n
({) N
() S 8 T () S
(char) k
() p 16 T () S 24 T (c;) N
() N
() S 8 T () S
(if) K
( \(!\(c = cgetc\(0\)\)\)) p n
() S 8 T () S 16 T () S
(return) K
( \(1\);) p n
() S 8 T () S
(if) K
( \(c == ') p
(.) str
('\)) p n
() S 8 T () S 16 T () S
(return) K
( \(0\);) p n
() S 8 T () S
(if) K
( \(c == ') p
(\\n) str
(' || c == ') p
(;) str
('\)) p n
() S 8 T () S 16 T (ungetc\(c, stdin\);) N
() S 8 T () S
(return) K
( \(1\);) p n
(}) N
() N
() N
(/*) c n
(**  TEST FOR SPECIFIED DELIMETER) N
(**) N
(**) S 8 T (The standard input is scanned for the parameter.  If found,) N
(**) S 8 T (it is thrown away and non-zero is returned.  If not found,) N
(**) S 8 T (zero is returned.) N
(*/) N
() p n
(bool) N
(readdelim\() S
(char) k
( d\)) p n
({) N
() S 8 T () S
(char) k
() p 16 T (c;) N
() N
() S 8 T () S
(while) K
( \(\(c = cgetc\(0\)\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(c == d\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
( \(1\);) p n
() S 8 T () S 16 T () S
(if) K
( \(c == ') p
( ) str
('\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T (ungetc\(c, stdin\);) N
() S 8 T () S 16 T () S
(break) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(return) K
( \(0\);) p n
(}) N
(getpar.c) (Page 5/5) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(getpar.c) (38/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 39
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)help.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/help.c,v 1.4 1999/11/30 03:49:48 billf Exp $) N
( * $DragonFly: src/games/trek/help.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  call starbase for help) N
(**) N
(**) S 8 T (First, the closest starbase is selected.  If there is a) N
(**) S 8 T (a starbase in your own quadrant, you are in good shape.) N
(**) S 8 T (This distance takes quadrant distances into account only.) N
(**) N
(**) S 8 T (A magic number is computed based on the distance which acts) N
(**) S 8 T (as the probability that you will be rematerialized.  You) N
(**) S 8 T (get three tries.) N
(**) N
(**) S 8 T (When it is determined that you should be able to be remater-) N
(**) S 8 T (ialized \(i.e., when the probability thing mentioned above) N
(**) S 8 T (comes up positive\), you are put into that quadrant \(anywhere\).) N
(**) S 8 T (Then, we try to see if there is a spot adjacent to the star-) N
(**) S 8 T (base.  If not, you can't be rematerialized!!!  Otherwise,) N
(**) S 8 T (it drops you there.  It only tries five times to find a spot) N
(**) S 8 T (to drop you.  After that, it's your problem.) N
(*/) N
() p n
(const) K
( ) p
(char) k
() p 16 T (*Cntvect[3] =) N
({") S
(first) str
(", ") p
(second) str
(", ") p
(third) str
("};) p n
() N
(help.c) (Page 1/3) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(void) k n
(help\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (dist, x;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (dx, dy;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (j, l = 0;) N
() N
() S 8 T () S
(/* check to see if calling for help is reasonable ... */) c n
() p 8 T () S
(if) K
( \(Ship.cond == DOCKED\) {) p n
() S 8 T () S 16 T (printf\(") S
(Uhura: But Captain, we're already docked\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(/* or possible */) c n
() p 8 T () S
(if) K
( \(damaged\(SSRADIO\)\) {) p n
() S 8 T () S 16 T (out\(SSRADIO\);) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(Now.bases <= 0\) {) p n
() S 8 T () S 16 T (printf\(") S
(Uhura: I'm not getting any response from starbase\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(/* tut tut, there goes the score */) c n
() p 8 T (Game.helps += 1;) N
() N
() S 8 T () S
(/* find the closest base */) c n
() p 8 T (dist = 1e50;) N
() S 8 T () S
(if) K
( \(Quad[Ship.quadx][Ship.quady].bases <= 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* there isn't one in this quadrant */) c n
() p 8 T () S 16 T () S
(for) K
( \(i = 0; i < Now.bases; i++\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(/* compute distance */) c n
() p 8 T () S 16 T () S 24 T (dx = Now.base[i].x - Ship.quadx;) N
() S 8 T () S 16 T () S 24 T (dy = Now.base[i].y - Ship.quady;) N
() S 8 T () S 16 T () S 24 T (x = dx * dx + dy * dy;) N
() S 8 T () S 16 T () S 24 T (x = sqrt\(x\);) N
() N
() S 8 T () S 16 T () S 24 T () S
(/* see if better than what we already have */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(x < dist\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (dist = x;) N
() S 8 T () S 16 T () S 24 T () S 32 T (l = i;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(/* go to that quadrant */) c n
() p 8 T () S 16 T (Ship.quadx = Now.base[l].x;) N
() S 8 T () S 16 T (Ship.quady = Now.base[l].y;) N
() S 8 T () S 16 T (initquad\(1\);) N
() S 8 T (}) N
() S 8 T () S
(else) K n
() p 8 T ({) N
() S 8 T () S 16 T (dist = 0.0;) N
() S 8 T (}) N
() N
() S 8 T () S
(/* dematerialize the Enterprise */) c n
() p 8 T (Sect[Ship.sectx][Ship.secty] = EMPTY;) N
() S 8 T (printf\(") S
(Starbase in %d,%d responds\\n) str
(", Ship.quadx, Ship.quady\);) p n
() N
() S 8 T () S
(/* this next thing acts as a probability that it will work */) c n
() p 8 T (x = pow\(1.0 - pow\(0.94, dist\), 0.3333333\);) N
(help.c) (Page 2/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(help.c) (39/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 40
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 8 T () S
(/* attempt to rematerialize */) c n
() p 8 T () S
(for) K
( \(i = 0; i < 3; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (sleep\(2\);) N
() S 8 T () S 16 T (printf\(") S
(%s attempt to rematerialize ) str
(", Cntvect[i]\);) p n
() S 8 T () S 16 T () S
(if) K
( \(franf\(\) > x\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(/* ok, that's good.  let's see if we can set her down */) c n
() p 8 T () S 16 T () S 24 T () S
(for) K
( \(j = 0; j < 5; j++\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (dx = Etc.starbase.x + ranf\(3\) - 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(dx < 0 || dx >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (dy = Etc.starbase.y + ranf\(3\) - 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(dy < 0 || dy >= NSECTS || Sect[dx][dy] != EM) p n
(PTY\)) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(j < 5\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* found an empty spot */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(succeeds\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (Ship.sectx = dx;) N
() S 8 T () S 16 T () S 24 T () S 32 T (Ship.secty = dy;) N
() S 8 T () S 16 T () S 24 T () S 32 T (Sect[dx][dy] = Ship.ship;) N
() S 8 T () S 16 T () S 24 T () S 32 T (dock\(0\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (compkldist\(0\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(return) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(/* the starbase must have been surrounded */) c n
() p 8 T () S 16 T (}) N
() S 8 T () S 16 T (printf\(") S
(fails\\n) str
("\);) p n
() S 8 T (}) N
() N
() S 8 T () S
(/* one, two, three strikes, you're out */) c n
() p 8 T (lose\(L_NOHELP\);) N
(}) N
(help.c) (Page 3/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(help.c) (40/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 41
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)impulse.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/impulse.c,v 1.4 1999/11/30 03:49:48 billf Exp $) N
( * $DragonFly: src/games/trek/impulse.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/**) c n
( **) S 8 T (move under impulse power) N
( **/) N
() p n
(void) k n
(impulse\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (course;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (power;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (dist, p_time;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (percent;) N
() N
() S 8 T () S
(if) K
( \(Ship.cond == DOCKED\) {) p n
() S 8 T () S 16 T (printf\(") S
(Scotty: Sorry captain, but we are still docked.\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(damaged\(IMPULSE\)\) {) p n
() S 8 T () S 16 T (out\(IMPULSE\);) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(getcodi\(&course, &dist\)\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
(impulse.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (power = 20 + 100 * dist;) N
() S 8 T (percent = 100 * power / Ship.energy + 0.5;) N
() S 8 T () S
(if) K
( \(percent >= 85\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Scotty: That would consume %d%% of our remaining energy.\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T (percent\);) N
() S 8 T () S 16 T () S
(if) K
( \(!getynpar\(") p
(Are you sure that is wise) str
("\)\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T () S 16 T (printf\(") S
(Aye aye, sir\\n) str
("\);) p n
() S 8 T (}) N
() S 8 T (p_time = dist / 0.095;) N
() S 8 T (percent = 100 * p_time / Now.time + 0.5;) N
() S 8 T () S
(if) K
( \(percent >= 85\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Spock: That would take %d%% of our remaining time.\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T (percent\);) N
() S 8 T () S 16 T () S
(if) K
( \(!getynpar\(") p
(Are you sure that is wise) str
("\)\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T () S 16 T (printf\(") S
(\(He's finally gone mad\)\\n) str
("\);) p n
() S 8 T (}) N
() S 8 T (Move.time = move\(0, course, p_time, 0.095\);) N
() S 8 T (Ship.energy -= 20 + 100 * Move.time * 0.095;) N
(}) N
(impulse.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(impulse.c) (41/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 42
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)initquad.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/initquad.c,v 1.4 1999/11/30 03:49:49 billf Exp $) N
( * $DragonFly: src/games/trek/initquad.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  Paramize Quadrant Upon Entering) N
(**) N
(**) S 8 T (A quadrant is initialized from the information held in the) N
(**) S 8 T (Quad matrix.  Basically, everything is just initialized) N
(**) S 8 T (randomly, except for the starship, which goes into a fixed) N
(**) S 8 T (sector.) N
(**) N
(**) S 8 T (If there are Klingons in the quadrant, the captain is informed) N
(**) S 8 T (that the condition is RED, and he is given a chance to put) N
(**) S 8 T (his shields up if the computer is working.) N
(**) N
(**) S 8 T (The flag `f' is set to disable the check for condition red.) N
(**) S 8 T (This mode is used in situations where you know you are going) N
(**) S 8 T (to be docked, i.e., abandon\(\) and help\(\).) N
(*/) N
() p n
(void) k n
(initquad\() p
(int) k
( f\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i, j;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (rx, ry;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (nbases, nstars;) N
(initquad.c) (Page 1/3) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(struct) k
( quad) p 24 T (*q;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (nholes;) N
() N
() S 8 T (q = &Quad[Ship.quadx][Ship.quady];) N
() N
() S 8 T () S
(/* ignored supernova'ed quadrants \(this is checked again later anyway */) c n
() p 8 T () S
(if) K
( \(q->stars < 0\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (Etc.nkling = q->klings;) N
() S 8 T (nbases = q->bases;) N
() S 8 T (nstars = q->stars;) N
() S 8 T (nholes = q->holes;) N
() N
() S 8 T () S
(/* have we blundered into a battle zone w/ shields down? */) c n
() p 8 T () S
(if) K
( \(Etc.nkling > 0 && !f\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Condition RED\\n) str
("\);) p n
() S 8 T () S 16 T (Ship.cond = RED;) N
() S 8 T () S 16 T () S
(if) K
( \(!damaged\(COMPUTER\)\)) p n
() S 8 T () S 16 T () S 24 T (shield\(1\);) N
() S 8 T (}) N
() N
() S 8 T () S
(/* clear out the quadrant */) c n
() p 8 T () S
(for) K
( \(i = 0; i < NSECTS; i++\)) p n
() S 8 T () S 16 T () S
(for) K
( \(j = 0; j < NSECTS; j++\)) p n
() S 8 T () S 16 T () S 24 T (Sect[i][j] = EMPTY;) N
() N
() S 8 T () S
(/* initialize Enterprise */) c n
() p 8 T (Sect[Ship.sectx][Ship.secty] = Ship.ship;) N
() N
() S 8 T () S
(/* initialize Klingons */) c n
() p 8 T () S
(for) K
( \(i = 0; i < Etc.nkling; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (sector\(&rx, &ry\);) N
() S 8 T () S 16 T (Sect[rx][ry] = KLINGON;) N
() S 8 T () S 16 T (Etc.klingon[i].x = rx;) N
() S 8 T () S 16 T (Etc.klingon[i].y = ry;) N
() S 8 T () S 16 T (Etc.klingon[i].power = Param.klingpwr;) N
() S 8 T () S 16 T (Etc.klingon[i].srndreq = 0;) N
() S 8 T (}) N
() S 8 T (compkldist\(1\);) N
() N
() S 8 T () S
(/* initialize star base */) c n
() p 8 T () S
(if) K
( \(nbases > 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (sector\(&rx, &ry\);) N
() S 8 T () S 16 T (Sect[rx][ry] = BASE;) N
() S 8 T () S 16 T (Etc.starbase.x = rx;) N
() S 8 T () S 16 T (Etc.starbase.y = ry;) N
() S 8 T (}) N
() N
() S 8 T () S
(/* initialize inhabited starsystem */) c n
() p 8 T () S
(if) K
( \(q->qsystemname != 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (sector\(&rx, &ry\);) N
() S 8 T () S 16 T (Sect[rx][ry] = INHABIT;) N
() S 8 T () S 16 T (nstars -= 1;) N
() S 8 T (}) N
() N
() S 8 T () S
(/* initialize black holes */) c n
() p 8 T () S
(for) K
( \(i = 0; i < nholes; i++\)) p n
() S 8 T ({) N
(initquad.c) (Page 2/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(initquad.c) (42/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 43
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (sector\(&rx, &ry\);) N
() S 8 T () S 16 T (Sect[rx][ry] = HOLE;) N
() S 8 T (}) N
() N
() S 8 T () S
(/* initialize stars */) c n
() p 8 T () S
(for) K
( \(i = 0; i < nstars; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (sector\(&rx, &ry\);) N
() S 8 T () S 16 T (Sect[rx][ry] = STAR;) N
() S 8 T (}) N
() S 8 T (Move.newquad = 1;) N
(}) N
() N
(void) k n
(sector\() p
(int) k
( *x, ) p
(int) k
( *y\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i, j;) N
() N
() S 8 T () S
(do) K n
() p 8 T ({) N
() S 8 T () S 16 T (i = ranf\(NSECTS\);) N
() S 8 T () S 16 T (j = ranf\(NSECTS\);) N
() S 8 T (} ) S
(while) K
( \(Sect[i][j] != EMPTY\);) p n
() S 8 T (*x = i;) N
() S 8 T (*y = j;) N
() S 8 T () S
(return) K
(;) p n
(}) N
(initquad.c) (Page 3/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(initquad.c) (43/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 44
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)kill.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/kill.c,v 1.4 1999/11/30 03:49:49 billf Exp $) N
( * $DragonFly: src/games/trek/kill.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  KILL KILL KILL !!!) N
(**) N
(**) S 8 T (This file handles the killing off of almost anything.) N
(*/) N
() p n
(/*) c n
(**  Handle a Klingon's death) N
(**) N
(**) S 8 T (The Klingon at the sector given by the parameters is killed) N
(**) S 8 T (and removed from the Klingon list.  Notice that it is not) N
(**) S 8 T (removed from the event list; this is done later, when the) N
(**) S 8 T (the event is to be caught.  Also, the time left is recomputed,) N
(**) S 8 T (and the game is won if that was the last klingon.) N
(*/) N
() p n
(void) k n
(killk\() p
(int) k
( ix, ) p
(int) k
( iy\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() N
() S 8 T (printf\(") S
(   *** Klingon at %d,%d destroyed ***\\n) str
(", ix, iy\);) p n
() N
(kill.c) (Page 1/4) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(/* remove the scoundrel */) c n
() p 8 T (Now.klings -= 1;) N
() S 8 T (Sect[ix][iy] = EMPTY;) N
() S 8 T (Quad[Ship.quadx][Ship.quady].klings -= 1;) N
() S 8 T () S
(/* %%% IS THIS SAFE???? %%% */) c n
() p 8 T (Quad[Ship.quadx][Ship.quady].scanned -= 100;) N
() S 8 T (Game.killk += 1;) N
() N
() S 8 T () S
(/* find the Klingon in the Klingon list */) c n
() p 8 T () S
(for) K
( \(i = 0; i < Etc.nkling; i++\)) p n
() S 8 T () S 16 T () S
(if) K
( \(ix == Etc.klingon[i].x && iy == Etc.klingon[i].y\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(/* purge him from the list */) c n
() p 8 T () S 16 T () S 24 T (Etc.nkling -= 1;) N
() S 8 T () S 16 T () S 24 T () S
(for) K
( \(; i < Etc.nkling; i++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (bmove\(&Etc.klingon[i+1], &Etc.klingon[i], ) S
(sizeof) K
() p n
( Etc.klingon[i]\);) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() N
() S 8 T () S
(/* find out if that was the last one */) c n
() p 8 T () S
(if) K
( \(Now.klings <= 0\)) p n
() S 8 T () S 16 T (win\(\);) N
() N
() S 8 T () S
(/* recompute time left */) c n
() p 8 T (Now.time = Now.resource / Now.klings;) N
() S 8 T () S
(return) K
(;) p n
(}) N
() N
() N
(/*) c n
(**  handle a starbase's death) N
(*/) N
() p n
(void) k n
(killb\() p
(int) k
( qx, ) p
(int) k
( qy\)) p n
({) N
() S 8 T () S
(struct) k
( quad) p 24 T (*q;) N
() S 8 T () S
(struct) k
( xy) p 24 T (*b;) N
() N
() S 8 T (q = &Quad[qx][qy];) N
() N
() S 8 T () S
(if) K
( \(q->bases <= 0\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T () S
(if) K
( \(!damaged\(SSRADIO\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* then update starchart */) c n
() p 8 T () S 16 T () S
(if) K
( \(q->scanned < 1000\)) p n
() S 8 T () S 16 T () S 24 T (q->scanned -= 10;) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(q->scanned > 1000\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (q->scanned = -1;) N
() S 8 T (}) N
() S 8 T (q->bases = 0;) N
() S 8 T (Now.bases -= 1;) N
() S 8 T () S
(for) K
( \(b = Now.base; ; b++\)) p n
() S 8 T () S 16 T () S
(if) K
( \(qx == b->x && qy == b->y\)) p n
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() S 8 T (bmove\(&Now.base[Now.bases], b, ) S
(sizeof) K
( *b\);) p n
() S 8 T () S
(if) K
( \(qx == Ship.quadx && qy == Ship.quady\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (Sect[Etc.starbase.x][Etc.starbase.y] = EMPTY;) N
(kill.c) (Page 2/4) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(kill.c) (44/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 45
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S
(if) K
( \(Ship.cond == DOCKED\)) p n
() S 8 T () S 16 T () S 24 T (undock\(0\);) N
() S 8 T () S 16 T (printf\(") S
(Starbase at %d,%d destroyed\\n) str
(", Etc.starbase.x, Etc.starbase.y\);) p n
() S 8 T (}) N
() S 8 T () S
(else) K n
() p 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(!damaged\(SSRADIO\)\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(Uhura: Starfleet command reports that the starbase in\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(   quadrant %d,%d has been destroyed\\n) str
(", qx, qy\);) p n
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T (schedule\(E_KATSB | E_GHOST, 1e50, qx, qy, 0\);) N
() S 8 T (}) N
(}) N
() N
() N
(/**) c n
( **) S 8 T (kill an inhabited starsystem) N
( **/) N
() p n
(void) k n
(kills\() p
(int) k
( x, ) p
(int) k
( y, ) p
(int) k
( f\)) p n
(/* x,y:  quad coords if f == 0, else sector coords */) c n
(/* f != 0 -- this quad;  f < 0 -- Enterprise's fault */) N
({) p n
() S 8 T () S
(struct) k
( quad) p 24 T (*q;) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() S 8 T () S
(const) K
( ) p
(char) k
() p 24 T (*name;) N
() N
() S 8 T () S
(if) K
( \(f\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* current quadrant */) c n
() p 8 T () S 16 T (q = &Quad[Ship.quadx][Ship.quady];) N
() S 8 T () S 16 T (Sect[x][y] = EMPTY;) N
() S 8 T () S 16 T (name = systemname\(q\);) N
() S 8 T () S 16 T () S
(if) K
( \(name == 0\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T () S 16 T (printf\(") S
(Inhabited starsystem %s at %d,%d destroyed\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T (name, x, y\);) N
() S 8 T () S 16 T () S
(if) K
( \(f < 0\)) p n
() S 8 T () S 16 T () S 24 T (Game.killinhab += 1;) N
() S 8 T (}) N
() S 8 T () S
(else) K n
() p 8 T ({) N
() S 8 T () S 16 T () S
(/* different quadrant */) c n
() p 8 T () S 16 T (q = &Quad[x][y];) N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(q->qsystemname & Q_DISTRESSED\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* distressed starsystem */) c n
() p 8 T () S 16 T (e = &Event[q->qsystemname & Q_SYSTEM];) N
() S 8 T () S 16 T (printf\(") S
(Distress call for %s invalidated\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T (Systemname[e->systemname]\);) N
() S 8 T () S 16 T (unschedule\(e\);) N
() S 8 T (}) N
() S 8 T (q->qsystemname = 0;) N
() S 8 T (q->stars -= 1;) N
(}) N
() N
() N
(/**) c n
(kill.c) (Page 3/4) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( **) c 8 T ("kill" a distress call) N
( **/) N
() p n
(void) k n
(killd\() p
(int) k
( x, ) p
(int) k
( y, ) p
(int) k
( f\)) p n
(/* x,y:  quadrant coordinates */) c n
(/* f:  set if user is to be informed */) N
({) p n
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(struct) k
( quad) p 24 T (*q;) N
() N
() S 8 T (q = &Quad[x][y];) N
() S 8 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (e = &Event[i];) N
() S 8 T () S 16 T () S
(if) K
( \(e->x != x || e->y != y\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S
(switch) K
( \(e->evcode\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T (  ) S
(case) K
( E_KDESB:) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(f\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(Distress call for starbase in %d,%d nullified\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (x, y\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (unschedule\(e\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T (  ) S
(case) K
( E_ENSLV:) p n
() S 8 T () S 16 T (  ) S
(case) K
( E_REPRO:) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(f\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(Distress call for %s in quadrant %d,%d nullified\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (Systemname[e->systemname], x, y\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (q->qsystemname = e->systemname;) N
() S 8 T () S 16 T () S 24 T () S 32 T (unschedule\(e\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(else) K n
() p 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (e->evcode |= E_GHOST;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
(}) N
(kill.c) (Page 4/4) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(kill.c) (45/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 46
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)klmove.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/klmove.c,v 1.4 1999/11/30 03:49:49 billf Exp $) N
( * $DragonFly: src/games/trek/klmove.c,v 1.4 2006/10/08 17:11:30 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  Move Klingons Around) N
(**) N
(**) S 8 T (This is a largely incomprehensible block of code that moves) N
(**) S 8 T (Klingons around in a quadrant.  It was written in a very) N
(**) S 8 T ("program as you go" fashion, and is a prime candidate for) N
(**) S 8 T (rewriting.) N
(**) N
(**) S 8 T (The flag `fl' is zero before an attack, one after an attack,) N
(**) S 8 T (and two if you are leaving a quadrant.  This serves to) N
(**) S 8 T (change the probability and distance that it moves.) N
(**) N
(**) S 8 T (Basically, what it will try to do is to move a certain number) N
(**) S 8 T (of steps either toward you or away from you.  It will avoid) N
(**) S 8 T (stars whenever possible.  Nextx and nexty are the next) N
(**) S 8 T (sector to move to on a per-Klingon basis; they are roughly) N
(**) S 8 T (equivalent to Ship.sectx and Ship.secty for the starship.  Lookx and) N
(**) S 8 T (looky are the sector that you are going to look at to see) N
(**) S 8 T (if you can move their.  Dx and dy are the increment.  Fudgex) N
(**) S 8 T (and fudgey are the things you change around to change your) N
(**) S 8 T (course around stars.) N
(*/) N
() p n
(klmove.c) (Page 1/4) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(void) k n
(klmove\() p
(int) k
( fl\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (n;) N
() S 8 T () S
(struct) k
( kling) p 24 T (*k;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (dx, dy;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (nextx, nexty;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (lookx, looky;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (motion;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (fudgex, fudgey;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (qx, qy;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (bigger;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (i;) N
() N
(#) S 8 T (ifdef xTRACE) N
() S 8 T () S
(if) K
( \(Trace\)) p n
() S 8 T () S 16 T (printf\(") S
(klmove: fl = %d, Etc.nkling = %d\\n) str
(", fl, Etc.nkling\);) p n
(#) S 8 T (endif) N
() S 8 T () S
(for) K
( \(n = 0; n < Etc.nkling; n++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (k = &Etc.klingon[n];) N
() S 8 T () S 16 T (i = 100;) N
() S 8 T () S 16 T () S
(if) K
( \(fl\)) p n
() S 8 T () S 16 T () S 24 T (i = 100.0 * k->power / Param.klingpwr;) N
() S 8 T () S 16 T () S
(if) K
( \(ranf\(i\) >= Param.moveprob[2 * Move.newquad + fl]\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S
(/* compute distance to move */) c n
() p 8 T () S 16 T (motion = ranf\(75\) - 25;) N
() S 8 T () S 16 T (motion *= k->avgdist * Param.movefac[2 * Move.newquad + fl];) N
() S 8 T () S 16 T () S
(/* compute direction */) c n
() p 8 T () S 16 T (dx = Ship.sectx - k->x + ranf\(3\) - 1;) N
() S 8 T () S 16 T (dy = Ship.secty - k->y + ranf\(3\) - 1;) N
() S 8 T () S 16 T (bigger = dx;) N
() S 8 T () S 16 T () S
(if) K
( \(dy > bigger\)) p n
() S 8 T () S 16 T () S 24 T (bigger = dy;) N
() S 8 T () S 16 T () S
(if) K
( \(bigger == 0.0\)) p n
() S 8 T () S 16 T () S 24 T (bigger = 1.0;) N
() S 8 T () S 16 T (dx = dx / bigger + 0.5;) N
() S 8 T () S 16 T (dy = dy / bigger + 0.5;) N
() S 8 T () S 16 T () S
(if) K
( \(motion < 0\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (motion = -motion;) N
() S 8 T () S 16 T () S 24 T (dx = -dx;) N
() S 8 T () S 16 T () S 24 T (dy = -dy;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (fudgex = fudgey = 1;) N
() S 8 T () S 16 T () S
(/* try to move the klingon */) c n
() p 8 T () S 16 T (nextx = k->x;) N
() S 8 T () S 16 T (nexty = k->y;) N
() S 8 T () S 16 T () S
(for) K
( \(; motion > 0; motion--\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (lookx = nextx + dx;) N
() S 8 T () S 16 T () S 24 T (looky = nexty + dy;) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(lookx < 0 || lookx >= NSECTS || looky < 0 || looky >) p n
(= NSECTS\)) N
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* new quadrant */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (qx = Ship.quadx;) N
() S 8 T () S 16 T () S 24 T () S 32 T (qy = Ship.quady;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(lookx < 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (qx -= 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(else) K n
(klmove.c) (Page 2/4) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(klmove.c) (46/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 47
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(lookx >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (qx += 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(looky < 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (qy -= 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(looky >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (qy += 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(qx < 0 || qx >= NQUADS || qy < 0 || qy >= NQ) p n
(UADS ||) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (Quad[qx][qy].stars < 0 || Quad[q) N
(x][qy].klings > MAXKLQUAD - 1\)) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(!damaged\(SRSCAN\)\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(Klingon at %d,%d escapes to quadrant %d,%d\\) str n
(n) S
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (k->x, k->y, qx, qy\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (motion = Quad[qx][qy].scanned;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(motion >= 0 && motion < 1000\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (Quad[qx][qy].scanned += 100;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (motion = Quad[Ship.quadx][Ship.quady].sc) N
(anned;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(motion >= 0 && motion < 1000\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (Quad[Ship.quadx][Ship.quady].sca) N
(nned -= 100;) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (Sect[k->x][k->y] = EMPTY;) N
() S 8 T () S 16 T () S 24 T () S 32 T (Quad[qx][qy].klings += 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T (Etc.nkling -= 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T (bmove\(&Etc.klingon[Etc.nkling], k, ) S
(sizeof) K
( *k\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (Quad[Ship.quadx][Ship.quady].klings -= 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T (k = 0;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(Sect[lookx][looky] != EMPTY\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (lookx = nextx + fudgex;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(lookx < 0 || lookx >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (lookx = nextx + dx;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(Sect[lookx][looky] != EMPTY\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (fudgex = -fudgex;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (looky = nexty + fudgey;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(looky < 0 || looky >= NSECTS || Sect) p n
([lookx][looky] != EMPTY\)) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (fudgey = -fudgey;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (nextx = lookx;) N
() S 8 T () S 16 T () S 24 T (nexty = looky;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(if) K
( \(k && \(k->x != nextx || k->y != nexty\)\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(!damaged\(SRSCAN\)\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(Klingon at %d,%d moves to %d,%d\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (k->x, k->y, nextx, nexty\);) N
() S 8 T () S 16 T () S 24 T (Sect[k->x][k->y] = EMPTY;) N
() S 8 T () S 16 T () S 24 T (Sect[k->x = nextx][k->y = nexty] = KLINGON;) N
() S 8 T () S 16 T (}) N
(klmove.c) (Page 3/4) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (}) N
() S 8 T (compkldist\(0\);) N
(}) N
(klmove.c) (Page 4/4) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(klmove.c) (47/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 48
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)lose.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/lose.c,v 1.2 1999/11/30 03:49:49 billf Exp $) N
( * $DragonFly: src/games/trek/lose.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  PRINT OUT LOSER MESSAGES) N
(**) N
(**) S 8 T (The messages are printed out, the score is computed and) N
(**) S 8 T (printed, and the game is restarted.  Oh yeh, any special) N
(**) S 8 T (actions which need be taken are taken.) N
(*/) N
() p n
(const) K
( ) p
(char) k
() p 16 T (*Losemsg[] =) N
({) N
() S 8 T (") S
(You ran out of time) str
(",) p n
() S 8 T (") S
(You ran out of energy) str
(",) p n
() S 8 T (") S
(You have been destroyed) str
(",) p n
() S 8 T (") S
(You ran into the negative energy barrier) str
(",) p n
() S 8 T (") S
(You destroyed yourself by nova'ing that star) str
(",) p n
() S 8 T (") S
(You have been caught in a supernova) str
(",) p n
() S 8 T (") S
(You just suffocated in outer space) str
(",) p n
() S 8 T (") S
(You could not be rematerialized) str
(",) p n
() S 8 T (") S
(\\n\\032\\014 ***\\07 Ship's hull has imploded\\07 ***) str
(",) p n
() S 8 T (") S
(You have burned up in a star) str
(",) p n
() S 8 T (") S
(Well, you destroyed yourself, but it didn't do any good) str
(",) p n
() S 8 T (") S
(You have been captured by Klingons and mercilessly tortured) str
(",) p n
(lose.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (") S
(Your last crew member died) str
(",) p n
(};) N
() N
(void) k n
(lose\() p
(int) k
( why\)) p n
({) N
() S 8 T (Game.killed = 1;) N
() S 8 T (sleep\(1\);) N
() S 8 T (printf\(") S
(\\n%s\\n) str
(", Losemsg[why - 1]\);) p n
() S 8 T () S
(switch) K
( \(why\)) p n
() S 8 T ({) N
() N
() S 8 T (  ) S
(case) K
( L_NOTIME:) p n
() S 8 T () S 16 T (Game.killed = 0;) N
() S 8 T () S 16 T () S
(break) K
(;) p n
() S 8 T (}) N
() S 8 T (Move.endgame = -1;) N
() S 8 T (score\(\);) N
() S 8 T (skiptonl\(0\);) N
() S 8 T (longjmp\(env, 1\);) N
(}) N
(lose.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(lose.c) (48/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 49
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)lrscan.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/lrscan.c,v 1.4 1999/11/30 03:49:50 billf Exp $) N
( * $DragonFly: src/games/trek/lrscan.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  LONG RANGE OF SCANNERS) N
(**) N
(**) S 8 T (A summary of the quadrants that surround you is printed.  The) N
(**) S 8 T (hundreds digit is the number of Klingons in the quadrant,) N
(**) S 8 T (the tens digit is the number of starbases, and the units digit) N
(**) S 8 T (is the number of stars.  If the printout is "///" it means) N
(**) S 8 T (that that quadrant is rendered uninhabitable by a supernova.) N
(**) S 8 T (It also updates the "scanned" field of the quadrants it scans,) N
(**) S 8 T (for future use by the "chart" option of the computer.) N
(*/) N
() p n
(void) k n
(lrscan\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (i, j;) N
() S 8 T () S
(struct) k
( quad) p 24 T () S 32 T (*q;) N
() N
() S 8 T () S
(if) K
( \(check_out\(LRSCAN\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T (printf\(") S
(Long range scan for quadrant %d,%d\\n\\n) str
(", Ship.quadx, Ship.quady\);) p n
(lrscan.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 8 T () S
(/* print the header on top */) c n
() p 8 T () S
(for) K
( \(j = Ship.quady - 1; j <= Ship.quady + 1; j++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(j < 0 || j >= NQUADS\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(      ) str
("\);) p n
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T (printf\(") S
(     %1d) str
(", j\);) p n
() S 8 T (}) N
() N
() S 8 T () S
(/* scan the quadrants */) c n
() p 8 T () S
(for) K
( \(i = Ship.quadx - 1; i <= Ship.quadx + 1; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(\\n  -------------------\\n) str
("\);) p n
() S 8 T () S 16 T () S
(if) K
( \(i < 0 || i >= NQUADS\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(/* negative energy barrier */) c n
() p 8 T () S 16 T () S 24 T (printf\(") S
(  !  *  !  *  !  *  !) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(/* print the left hand margin */) c n
() p 8 T () S 16 T (printf\(") S
(%1d !) str
(", i\);) p n
() S 8 T () S 16 T () S
(for) K
( \(j = Ship.quady - 1; j <= Ship.quady + 1; j++\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(j < 0 || j >= NQUADS\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* negative energy barrier again */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(  *  !) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (q = &Quad[i][j];) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(q->stars < 0\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* supernova */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
( /// !) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (q->scanned = 1000;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (q->scanned = q->klings * 100 + q->bases * 10 + q->stars;) N
() S 8 T () S 16 T () S 24 T (printf\(") S
( %3d !) str
(", q->scanned\);) p n
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() S 8 T (printf\(") S
(\\n  -------------------\\n) str
("\);) p n
() S 8 T () S
(return) K
(;) p n
(}) N
(lrscan.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(lrscan.c) (49/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 50
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\) Copyright \(c\) 1980, 1993 The Regents of the University of California.  A) N
(ll rights reserved.) N
( * @\(#\)main.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/main.c,v 1.7.2.1 2001/03/05 12:11:14 kris Exp $) N
( * $DragonFly: src/games/trek/main.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(# define) K
() p 16 T (PRIO) S 24 T () S 32 T (00) S 40 T () S
(/* default priority */) c n
() p n
(unsigned) k
( ) p
(int) k
() p 16 T (Mother) S 24 T (= 51 + \(51 << 8\);) N
() N
(/*) c n
(**) S 8 T ( ####  #####    #    ####          #####  ####   #####  #   #) N
(**) S 8 T (#        #     # #   #   #           #    #   #  #      #  #) N
(**) S 8 T ( ###     #    #####  ####            #    ####   ###    ###) N
(**) S 8 T (    #    #    #   #  #  #            #    #  #   #      #  #) N
(**) S 8 T (####     #    #   #  #   #           #    #   #  #####  #   #) N
(**) N
(**) S 8 T (C version by Eric P. Allman 5/76 \(U.C. Berkeley\) with help) N
(**) S 8 T () S 16 T (from Jeff Poskanzer and Pete Rubinstein.) N
(**) N
(**) S 8 T (I also want to thank everyone here at Berkeley who) N
(**) S 8 T (where crazy enough to play the undebugged game.  I want to) N
(**) S 8 T (particularly thank Nick Whyte, who made considerable) N
(**) S 8 T (suggestions regarding the content of the game.  Why, I'll) N
(**) S 8 T (never forget the time he suggested the name for the) N
(**) S 8 T ("capture" command.) N
(main.c) (Page 1/4) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(**) c n
(**) S 8 T (Please send comments, questions, and suggestions about this) N
(**) S 8 T () S 16 T (game to:) N
(**) S 8 T () S 16 T () S 24 T (Eric P. Allman) N
(**) S 8 T () S 16 T () S 24 T (Project INGRES) N
(**) S 8 T () S 16 T () S 24 T (Electronics Research Laboratory) N
(**) S 8 T () S 16 T () S 24 T (Cory Hall) N
(**) S 8 T () S 16 T () S 24 T (University of California) N
(**) S 8 T () S 16 T () S 24 T (Berkeley, California  94720) N
(**) N
(**) S 8 T (If you make ANY changes in the game, I sure would like to) N
(**) S 8 T (know about them.  It is sort of an ongoing project for me,) N
(**) S 8 T (and I very much want to put in any bug fixes and improvements) N
(**) S 8 T (that you might come up with.) N
(**) N
(**) S 8 T (FORTRASH version by Kay R. Fisher \(DEC\) "and countless others".) N
(**) S 8 T (That was adapted from the "original BASIC program" \(ha!\) by) N
(**) S 8 T () S 16 T (Mike Mayfield \(Centerline Engineering\).) N
(**) N
(**) S 8 T (Additional inspiration taken from FORTRAN version by) N
(**) S 8 T () S 16 T (David Matuszek and Paul Reynolds which runs on the CDC) N
(**) S 8 T () S 16 T (7600 at Lawrence Berkeley Lab, maintained there by) N
(**) S 8 T () S 16 T (Andy Davidson.  This version is also available at LLL) N
(**) S 8 T () S 16 T (and at LMSC.  In all fairness, this version was the) N
(**) S 8 T () S 16 T (major inspiration for this version of the game \(trans-) N
(**) S 8 T () S 16 T (lation:  I ripped off a whole lot of code\).) N
(**) N
(**) S 8 T (Minor other input from the "Battelle Version 7A" by Joe Miller) N
(**) S 8 T () S 16 T (\(Graphics Systems Group, Battelle-Columbus Labs\) and) N
(**) S 8 T () S 16 T (Ross Pavlac \(Systems Programmer, Battelle Memorial) N
(**) S 8 T () S 16 T (Institute\).  That version was written in December '74) N
(**) S 8 T () S 16 T (and extensively modified June '75.  It was adapted) N
(**) S 8 T () S 16 T (from the FTN version by Ron Williams of CDC Sunnyvale,) N
(**) S 8 T () S 16 T (which was adapted from the Basic version distributed) N
(**) S 8 T () S 16 T (by DEC.  It also had "neat stuff swiped" from T. T.) N
(**) S 8 T () S 16 T (Terry and Jim Korp \(University of Texas\), Hicks \(Penn) N
(**) S 8 T () S 16 T (U.\), and Rick Maus \(Georgia Tech\).  Unfortunately, it) N
(**) S 8 T () S 16 T (was not as readable as it could have been and so the) N
(**) S 8 T () S 16 T (translation effort was severely hampered.  None the) N
(**) S 8 T () S 16 T (less, I got the idea of inhabited starsystems from this) N
(**) S 8 T () S 16 T (version.) N
(**) N
(**) S 8 T (Permission is given for use, copying, and modification of) N
(**) S 8 T () S 16 T (all or part of this program and related documentation,) N
(**) S 8 T () S 16 T (provided that all reference to the authors are maintained.) N
(**) N
(**) N
(**********************************************************************) N
(**) N
(**  NOTES TO THE MAINTAINER:) N
(**) N
(**) S 8 T (There is a compilation option xTRACE which must be set for any) N
(**) S 8 T (trace information to be generated.  It is probably defined in) N
(**) S 8 T (the version that you get.  It can be removed, however, if you) N
(**) S 8 T (have trouble finding room in core.) N
(**) N
(**) S 8 T (Many things in trek are not as clear as they might be, but are) N
(**) S 8 T (done to reduce space.  I compile with the -f and -O flags.  I) N
(**) S 8 T (am constrained to running with non-separated I/D space, since) N
(**) S 8 T (we don't have doubleing point hardware here; even if we did, I) N
(**) S 8 T (would like trek to be available to the large number of people) N
(**) S 8 T (who either have an 11/40 or do not have FP hardware.  I also) N
(main.c) (Page 2/4) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(main.c) (50/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 51
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(**) c 8 T (found it desirable to make the code run reentrant, so this) N
(**) S 8 T (added even more space constraints.) N
(**) N
(**) S 8 T (I use the portable C library to do my I/O.  This is done be-) N
(**) S 8 T (cause I wanted the game easily transportable to other C) N
(**) S 8 T (implementations, and because I was too lazy to do the doubleing) N
(**) S 8 T (point input myself.  Little did I know.  The portable C library) N
(**) S 8 T (released by Bell Labs has more bugs than you would believe, so) N
(**) S 8 T (I ended up rewriting the whole blessed thing.  Trek excercises) N
(**) S 8 T (many of the bugs in it, as well as bugs in some of the section) N
(**) S 8 T (III UNIX routines.  We have fixed them here.  One main problem) N
(**) S 8 T (was a bug in alloc\(\) that caused it to always ask for a large) N
(**) S 8 T (hunk of memory, which worked fine unless you were almost out,) N
(**) S 8 T (which I inevitably was.  If you want the code for all of this) N
(**) S 8 T (stuff, it is also available through me.) N
(**) N
(***********************************************************************) N
(*/) N
() p n
(jmp_buf env;) N
() N
(int) k n
(main\() p
(int) k
( argc, ) p
(char) k
( **argv\)) p n
({) N
() S 8 T () S
(/* extern FILE) c 24 T () S 32 T (*f_log; */) N
() p 8 T () S
(char) k
() p 16 T () S 24 T (opencode;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (prio;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (ac;) N
() S 8 T () S
(char) k
() p 16 T () S 24 T (**av;) N
() N
() S 8 T () S
(/* revoke */) c n
() p 8 T (setgid\(getgid\(\)\);) N
() N
() S 8 T (av = argv;) N
() S 8 T (ac = argc;) N
() S 8 T (av++;) N
() S 8 T (srandomdev\(\);) N
() S 8 T (opencode = ') S
(w) str
(';) p n
() S 8 T (prio = PRIO;) N
() N
() S 8 T () S
(while) K
( \(ac > 1 && av[0][0] == ') p
(-) str
('\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(switch) K
( \(av[0][1]\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T (  ) S
(case) K
( ') p
(a) str
(':) p 32 T () S
(/* append to log file */) c n
() p 8 T () S 16 T () S 24 T (opencode = ') S
(a) str
(';) p n
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
(#) S 8 T () S 16 T (ifdef xTRACE) N
() S 8 T () S 16 T (  ) S
(case) K
( ') p
(t) str
(':) p 32 T () S
(/* trace */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(getuid\(\) != Mother\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(goto) K
( badflag;) p n
() S 8 T () S 16 T () S 24 T (Trace++;) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
(#) S 8 T () S 16 T (endif) N
() N
() S 8 T () S 16 T (  ) S
(case) K
( ') p
(p) str
(':) p 32 T () S
(/* set priority */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(getuid\(\) != Mother\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(goto) K
( badflag;) p n
() S 8 T () S 16 T () S 24 T (prio = atoi\(av[0] + 2\);) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() N
(main.c) (Page 3/4) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (  ) S
(default) K
(:) p n
() S 8 T () S 16 T (  badflag:) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(Invalid option: %s\\n) str
(", av[0]\);) p n
() N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (ac--;) N
() S 8 T () S 16 T (av++;) N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(ac > 2\)) p n
() S 8 T () S 16 T (syserr\(0, ") S
(arg count) str
("\);) p n
() S 8 T () S 16 T () S
(/*) c n
() S 8 T (if \(ac > 1\)) N
() S 8 T () S 16 T (f_log = fopen\(av[0], opencode\);) N
() S 8 T () S 16 T (*/) N
() p n
() S 8 T (printf\(") S
(\\n   * * *   S T A R   T R E K   * * *\\n\\nPress return to continue.\\n) str
("\);) p n
() N
() S 8 T () S
(if) K
( \(setjmp\(env\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \( !getynpar\(") p
(Another game) str
("\) \)) p n
() S 8 T () S 16 T () S 24 T (exit\(0\);) N
() S 8 T (}) N
() S 8 T () S
(do) K n
() p 8 T ({) N
() S 8 T () S 16 T (setup\(\);) N
() S 8 T () S 16 T (play\(\);) N
() S 8 T (} ) S
(while) K
( \(getynpar\(") p
(Another game) str
("\)\);) p n
() N
() S 8 T (fflush\(stdout\);) N
() S 8 T () S
(return) K
(\(0\);) p n
(}) N
(main.c) (Page 4/4) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(main.c) (51/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 52
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)move.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/move.c,v 1.6 1999/11/30 03:49:50 billf Exp $) N
( * $DragonFly: src/games/trek/move.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  Move Under Warp or Impulse Power) N
(**) N
(**) S 8 T (`Ramflag' is set if we are to be allowed to ram stars,) N
(**) S 8 T (Klingons, etc.  This is passed from warp\(\), which gets it from) N
(**) S 8 T (either play\(\) or ram\(\).  Course is the course \(0 -> 360\) at) N
(**) S 8 T (which we want to move.  `Speed' is the speed we) N
(**) S 8 T (want to go, and `p_time' is the expected time.  It) N
(**) S 8 T (can get cut short if a long range tractor beam is to occur.  We) N
(**) S 8 T (cut short the move so that the user doesn't get docked time and) N
(**) S 8 T (energy for distance which he didn't travel.) N
(**) N
(**) S 8 T (We check the course through the current quadrant to see that he) N
(**) S 8 T (doesn't run into anything.  After that, though, space sort of) N
(**) S 8 T (bends around him.  Note that this puts us in the awkward posi-) N
(**) S 8 T (tion of being able to be dropped into a sector which is com-) N
(**) S 8 T (pletely surrounded by stars.  Oh Well.) N
(**) N
(**) S 8 T (If the SINS \(Space Inertial Navigation System\) is out, we ran-) N
(**) S 8 T (domize the course accordingly before ever starting to move.) N
(**) S 8 T (We will still move in a straight line.) N
(**) N
(**) S 8 T (Note that if your computer is out, you ram things anyway.  In) N
(move.c) (Page 1/4) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(**) c 8 T (other words, if your computer and sins are both out, you're in) N
(**) S 8 T (potentially very bad shape.) N
(**) N
(**) S 8 T (Klingons get a chance to zap you as you leave the quadrant.) N
(**) S 8 T (By the way, they also try to follow you \(heh heh\).) N
(**) N
(**) S 8 T (Return value is the actual amount of time used.) N
(**) N
(**) N
(**) S 8 T (Uses trace flag 4.) N
(*/) N
() p n
(double) k n
(move\() p
(int) k
( ramflag, ) p
(int) k
( course, ) p
(double) k
( p_time, ) p
(double) k
( speed\)) p n
({) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (angle;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (x, y, dx, dy;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (ix, iy;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (bigger;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (n;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (dist;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (sectsize;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (xn;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (evtime;) N
() N
() S 8 T (ix = iy = 0;) N
(#) S 8 T (ifdef xTRACE) N
() S 8 T () S
(if) K
( \(Trace\)) p n
() S 8 T () S 16 T (printf\(") S
(move: ramflag %d course %d time %.2f speed %.2f\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T (ramflag, course, p_time, speed\);) N
(#) S 8 T (endif) N
() S 8 T (sectsize = NSECTS;) N
() S 8 T () S
(/* initialize delta factors for move */) c n
() p 8 T (angle = course * 0.0174532925;) N
() S 8 T () S
(if) K
( \(damaged\(SINS\)\)) p n
() S 8 T () S 16 T (angle += Param.navigcrud[1] * \(franf\(\) - 0.5\);) N
() S 8 T () S
(else) K n
() p 8 T () S 16 T () S
(if) K
( \(Ship.sinsbad\)) p n
() S 8 T () S 16 T () S 24 T (angle += Param.navigcrud[0] * \(franf\(\) - 0.5\);) N
() S 8 T (dx = -cos\(angle\);) N
() S 8 T (dy = sin\(angle\);) N
() S 8 T (bigger = fabs\(dx\);) N
() S 8 T (dist = fabs\(dy\);) N
() S 8 T () S
(if) K
( \(dist > bigger\)) p n
() S 8 T () S 16 T (bigger = dist;) N
() S 8 T (dx /= bigger;) N
() S 8 T (dy /= bigger;) N
() N
() S 8 T () S
(/* check for long range tractor beams */) c n
() p 8 T () S
(/****  TEMPORARY CODE == DEBUGGING  ****/) c n
() p 8 T (evtime = Now.eventptr[E_LRTB]->date - Now.date;) N
(#) S 8 T (ifdef xTRACE) N
() S 8 T () S
(if) K
( \(Trace\)) p n
() S 8 T () S 16 T (printf\(") S
(E.ep = %p, ->evcode = %d, ->date = %.2f, evtime = %.2f\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T (\() S
(void) k
( *\)Now.eventptr[E_LRTB],) p n
() S 8 T () S 16 T () S 24 T (Now.eventptr[E_LRTB]->evcode,) N
() S 8 T () S 16 T () S 24 T (Now.eventptr[E_LRTB]->date, evtime\);) N
(#) S 8 T (endif) N
() S 8 T () S
(if) K
( \(p_time > evtime && Etc.nkling < 3\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* then we got a LRTB */) c n
(move.c) (Page 2/4) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(move.c) (52/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 53
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (evtime += 0.005;) N
() S 8 T () S 16 T (p_time = evtime;) N
() S 8 T (}) N
() S 8 T () S
(else) K n
() p 8 T () S 16 T (evtime = -1.0e50;) N
() S 8 T (dist = p_time * speed;) N
() N
() S 8 T () S
(/* move within quadrant */) c n
() p 8 T (Sect[Ship.sectx][Ship.secty] = EMPTY;) N
() S 8 T (x = Ship.sectx + 0.5;) N
() S 8 T (y = Ship.secty + 0.5;) N
() S 8 T (xn = NSECTS * dist * bigger;) N
() S 8 T (n = xn + 0.5;) N
(#) S 8 T (ifdef xTRACE) N
() S 8 T () S
(if) K
( \(Trace\)) p n
() S 8 T () S 16 T (printf\(") S
(dx = %.2f, dy = %.2f, xn = %.2f, n = %d\\n) str
(", dx, dy, xn, n\);) p n
(#) S 8 T (endif) N
() S 8 T (Move.free = 0;) N
() N
() S 8 T () S
(for) K
( \(i = 0; i < n; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (ix = \(x += dx\);) N
() S 8 T () S 16 T (iy = \(y += dy\);) N
(#) S 8 T () S 16 T (ifdef xTRACE) N
() S 8 T () S 16 T () S
(if) K
( \(Trace\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(ix = %d, x = %.2f, iy = %d, y = %.2f\\n) str
(", ix, x, iy, y\);) p n
(#) S 8 T () S 16 T (endif) N
() S 8 T () S 16 T () S
(if) K
( \(x < 0.0 || y < 0.0 || x >= sectsize || y >= sectsize\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(/* enter new quadrant */) c n
() p 8 T () S 16 T () S 24 T (dx = Ship.quadx * NSECTS + Ship.sectx + dx * xn;) N
() S 8 T () S 16 T () S 24 T (dy = Ship.quady * NSECTS + Ship.secty + dy * xn;) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(dx < 0.0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (ix = -1;) N
() S 8 T () S 16 T () S 24 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T (ix = dx + 0.5;) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(dy < 0.0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (iy = -1;) N
() S 8 T () S 16 T () S 24 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T (iy = dy + 0.5;) N
(#) S 8 T () S 16 T () S 24 T (ifdef xTRACE) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(Trace\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(New quad: ix = %d, iy = %d\\n) str
(", ix, iy\);) p n
(#) S 8 T () S 16 T () S 24 T (endif) N
() S 8 T () S 16 T () S 24 T (Ship.sectx = x;) N
() S 8 T () S 16 T () S 24 T (Ship.secty = y;) N
() S 8 T () S 16 T () S 24 T (compkldist\(0\);) N
() S 8 T () S 16 T () S 24 T (Move.newquad = 2;) N
() S 8 T () S 16 T () S 24 T (attack\(0\);) N
() S 8 T () S 16 T () S 24 T (checkcond\(\);) N
() S 8 T () S 16 T () S 24 T (Ship.quadx = ix / NSECTS;) N
() S 8 T () S 16 T () S 24 T (Ship.quady = iy / NSECTS;) N
() S 8 T () S 16 T () S 24 T (Ship.sectx = ix % NSECTS;) N
() S 8 T () S 16 T () S 24 T (Ship.secty = iy % NSECTS;) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(ix < 0 || Ship.quadx >= NQUADS || iy < 0 || Ship.qua) p n
(dy >= NQUADS\)) N
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(!damaged\(COMPUTER\)\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (dumpme\(0\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(else) K n
(move.c) (Page 3/4) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T (lose\(L_NEGENB\);) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (initquad\(0\);) N
() S 8 T () S 16 T () S 24 T (n = 0;) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(if) K
( \(Sect[ix][iy] != EMPTY\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(/* we just hit something */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(!damaged\(COMPUTER\) && ramflag <= 0\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (ix = x - dx;) N
() S 8 T () S 16 T () S 24 T () S 32 T (iy = y - dy;) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(Computer reports navigation error; %s stopped at %d,%d\\n) str
() p n
(",) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (Ship.shipname, ix, iy\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (Ship.energy -= Param.stopengy * speed;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(/* test for a black hole */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(Sect[ix][iy] == HOLE\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(/* get dumped elsewhere in the galaxy */) c n
() p 8 T () S 16 T () S 24 T () S 32 T (dumpme\(1\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (initquad\(0\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (n = 0;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (ram\(ix, iy\);) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(n > 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (dx = Ship.sectx - ix;) N
() S 8 T () S 16 T (dy = Ship.secty - iy;) N
() S 8 T () S 16 T (dist = sqrt\(dx * dx + dy * dy\) / NSECTS;) N
() S 8 T () S 16 T (p_time = dist / speed;) N
() S 8 T () S 16 T () S
(if) K
( \(evtime > p_time\)) p n
() S 8 T () S 16 T () S 24 T (p_time = evtime;) S 48 T () S 56 T () S
(/* spring the LRTB trap ) c n
(*/) N
() p 8 T () S 16 T (Ship.sectx = ix;) N
() S 8 T () S 16 T (Ship.secty = iy;) N
() S 8 T (}) N
() S 8 T (Sect[Ship.sectx][Ship.secty] = Ship.ship;) N
() S 8 T (compkldist\(0\);) N
() S 8 T () S
(return) K
( \(p_time\);) p n
(}) N
(move.c) (Page 4/4) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(move.c) (53/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 54
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)nova.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/nova.c,v 1.4 1999/11/30 03:49:52 billf Exp $) N
( * $DragonFly: src/games/trek/nova.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  CAUSE A NOVA TO OCCUR) N
(**) N
(**) S 8 T (A nova occurs.  It is the result of having a star hit with) N
(**) S 8 T (a photon torpedo.  There are several things which may happen.) N
(**) S 8 T (The star may not be affected.  It may go nova.  It may turn) N
(**) S 8 T (into a black hole.  Any \(yummy\) it may go supernova.) N
(**) N
(**) S 8 T (Stars that go nova cause stars which surround them to undergo) N
(**) S 8 T (the same probabilistic process.  Klingons next to them are) N
(**) S 8 T (destroyed.  And if the starship is next to it, it gets zapped.) N
(**) S 8 T (If the zap is too much, it gets destroyed.) N
(*/) N
() p n
(void) k n
(nova\() p
(int) k
( x, ) p
(int) k
( y\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i, j;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (se;) N
() N
() S 8 T () S
(if) K
( \(Sect[x][y] != STAR || Quad[Ship.quadx][Ship.quady].stars < 0\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T () S
(if) K
( \(ranf\(100\) < 15\)) p n
(nova.c) (Page 1/3) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Spock: Star at %d,%d failed to nova.\\n) str
(", x, y\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(ranf\(100\) < 5\)) p n
() S 8 T () S 16 T () S
(return) K
( \(snova\(x, y\)\);) p n
() S 8 T (printf\(") S
(Spock: Star at %d,%d gone nova\\n) str
(", x, y\);) p n
() N
() S 8 T () S
(if) K
( \(ranf\(4\) != 0\)) p n
() S 8 T () S 16 T (Sect[x][y] = EMPTY;) N
() S 8 T () S
(else) K n
() p 8 T ({) N
() S 8 T () S 16 T (Sect[x][y] = HOLE;) N
() S 8 T () S 16 T (Quad[Ship.quadx][Ship.quady].holes += 1;) N
() S 8 T (}) N
() S 8 T (Quad[Ship.quadx][Ship.quady].stars -= 1;) N
() S 8 T (Game.kills += 1;) N
() S 8 T () S
(for) K
( \(i = x - 1; i <= x + 1; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(i < 0 || i >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S
(for) K
( \(j = y - 1; j <= y + 1; j++\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(j < 0 || j >= NSECTS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T (se = Sect[i][j];) N
() S 8 T () S 16 T () S 24 T () S
(switch) K
( \(se\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( EMPTY:) p n
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( HOLE:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( KLINGON:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (killk\(i, j\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( STAR:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (nova\(i, j\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( INHABIT:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (kills\(i, j, -1\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( BASE:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (killb\(i, j\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (Game.killb += 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( ENTERPRISE:) p n
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( QUEENE:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (se = 2000;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(Ship.shldup\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(Ship.shield >= se\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (Ship.shield -= se;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (se = 0;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
(nova.c) (Page 2/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(nova.c) (54/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 55
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (se -= Ship.shield;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (Ship.shield = 0;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (Ship.energy -= se;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(Ship.energy <= 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (lose\(L_SUICID\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T (  ) S
(default) K
(:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(Unknown object %c at %d,%d destroyed\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (se, i, j\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (Sect[i][j] = EMPTY;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() S 8 T () S
(return) K
(;) p n
(}) N
(nova.c) (Page 3/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(nova.c) (55/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 56
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)out.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/out.c,v 1.4 1999/11/30 03:49:52 billf Exp $) N
( * $DragonFly: src/games/trek/out.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  Announce Device Out) N
(*/) N
() p n
(void) k n
(out\() p
(int) k
( dev\)) p n
({) N
() S 8 T () S
(struct) k
( device) p 24 T (*d;) N
() N
() S 8 T (d = &Device[dev];) N
() S 8 T (printf\(") S
(%s reports %s ) str
(", d->person, d->name\);) p n
() S 8 T () S
(if) K
( \(d->name[strlen\(d->name\) - 1] == ') p
(s) str
('\)) p n
() S 8 T () S 16 T (printf\(") S
(are) str
("\);) p n
() S 8 T () S
(else) K n
() p 8 T () S 16 T (printf\(") S
(is) str
("\);) p n
() S 8 T (printf\(") S
( damaged\\n) str
("\);) p n
(}) N
(out.c) (Page 1/1) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(out.c) (56/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 57
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)phaser.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/phaser.c,v 1.5.2.1 2000/07/20 10:35:07 kris Exp $) N
( * $DragonFly: src/games/trek/phaser.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
() N
(/* factors for phaser hits; see description below */) c n
() p n
(# define) K
() p 16 T (ALPHA) S 24 T () S 32 T (3.0) S 40 T () S 48 T () S
(/* spread */) c n
(# define) K
() p 16 T (BETA) S 24 T () S 32 T (3.0) S 40 T () S 48 T () S
(/* franf\(\) */) c n
(# define) K
() p 16 T (GAMMA) S 24 T () S 32 T (0.30) S 40 T () S 48 T () S
(/* cos\(angle\) */) c n
(# define) K
() p 16 T (EPSILON) S 24 T () S 32 T (150.0) S 40 T () S 48 T () S
(/* dist ** 2 */) c n
(# define) K
() p 16 T (OMEGA) S 24 T () S 32 T (10.596) S 40 T () S 48 T () S
(/* overall scaling factor */) c n
() p n
(/* OMEGA ~= 100 * \(ALPHA + 1\) * \(BETA + 1\) / \(EPSILON + 1\) */) c n
() p n
(/*) c n
(**  Phaser Control) N
(**) N
(**) S 8 T (There are up to NBANKS phaser banks which may be fired) N
(**) S 8 T (simultaneously.  There are two modes, "manual" and) N
(**) S 8 T ("automatic".  In manual mode, you specify exactly which) N
(**) S 8 T (direction you want each bank to be aimed, the number) N
(**) S 8 T (of units to fire, and the spread angle.  In automatic) N
(**) S 8 T (mode, you give only the total number of units to fire.) N
(**) N
(**) S 8 T (The spread is specified as a number between zero and) N
(**) S 8 T (one, with zero being minimum spread and one being maximum) N
(phaser.c) (Page 1/7) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(**) c 8 T (spread.  You  will normally want zero spread, unless your) N
(**) S 8 T (short range scanners are out, in which case you probably) N
(**) S 8 T (don't know exactly where the Klingons are.  In that case,) N
(**) S 8 T (you really don't have any choice except to specify a) N
(**) S 8 T (fairly large spread.) N
(**) N
(**) S 8 T (Phasers spread slightly, even if you specify zero spread.) N
(**) N
(**) S 8 T (Uses trace flag 30) N
(*/) N
() p n
(struct) k
( cvntab) p 16 T (Matab[] =) N
({) N
() S 8 T ({ ") S
(m) str
(",) p 16 T () S 24 T (") S
(anual) str
(",) p 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)1,) p 64 T (0 },) N
() S 8 T ({ ") S
(a) str
(",) p 16 T () S 24 T (") S
(utomatic) str
(",) p 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)0,) p 64 T (0 },) N
() S 8 T ({ ) S
(NULL) K
(,) p 16 T () S 24 T () S
(NULL) K
(,) p 32 T () S 40 T () S
(NULL) K
(,) p 48 T () S 56 T () S 64 T (0 }) N
(};) N
() N
(struct) k
( banks) p n
({) N
() S 8 T () S
(int) k
() p 16 T (units;) N
() S 8 T () S
(double) k
() p 16 T (angle;) N
() S 8 T () S
(double) k
() p 16 T (spread;) N
(};) N
() N
() N
(void) k n
(phaser\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (j;) N
() S 8 T () S
(struct) k
( kling) p 24 T (*k;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (dx, dy;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (anglefactor, distfactor;) N
() S 8 T () S
(struct) k
( banks) p 24 T (*b;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (manual, flag, extra = 0;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (hit;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (tot;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (n;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (hitreqd[NBANKS];) N
() S 8 T () S
(struct) k
( banks) p 24 T () S 32 T (bank[NBANKS];) N
() S 8 T () S
(struct) k
( cvntab) p 24 T () S 32 T (*ptr;) N
() N
() S 8 T () S
(if) K
( \(Ship.cond == DOCKED\) {) p n
() S 8 T () S 16 T (printf\(") S
(Phasers cannot fire through starbase shields\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(damaged\(PHASER\)\) {) p n
() S 8 T () S 16 T (out\(PHASER\);) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(Ship.shldup\) {) p n
() S 8 T () S 16 T (printf\(") S
(Sulu: Captain, we cannot fire through shields.\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(Ship.cloaked\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Sulu: Captain, surely you must realize that we cannot fire\\n) str
("\);) p n
() S 8 T () S 16 T (printf\(") S
(  phasers with the cloaking device up.\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() N
(phaser.c) (Page 2/7) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(phaser.c) (57/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 58
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(/* decide if we want manual or automatic mode */) c n
() p 8 T (manual = 0;) N
() S 8 T () S
(if) K
( \(testnl\(\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(damaged\(COMPUTER\)\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(%s) str
(", Device[COMPUTER].name\);) p n
() S 8 T () S 16 T () S 24 T (manual++;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(damaged\(SRSCAN\)\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(%s) str
(", Device[SRSCAN].name\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (manual++;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S
(if) K
( \(manual\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
( damaged, manual mode selected\\n) str
("\);) p n
() S 8 T (}) N
() N
() S 8 T () S
(if) K
( \(!manual\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (ptr = getcodpar\(") S
(Manual or automatic) str
(", Matab\);) p n
() S 8 T () S 16 T (manual = \() S
(long) k
(\) ptr->value;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(!manual && damaged\(COMPUTER\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Computer damaged, manual selected\\n) str
("\);) p n
() S 8 T () S 16 T (skiptonl\(0\);) N
() S 8 T () S 16 T (manual++;) N
() S 8 T (}) N
() N
() S 8 T () S
(/* initialize the bank[] array */) c n
() p 8 T (flag = 1;) N
() S 8 T () S
(for) K
( \(i = 0; i < NBANKS; i++\)) p n
() S 8 T () S 16 T (bank[i].units = 0;) N
() S 8 T () S
(if) K
( \(manual\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* collect manual mode statistics */) c n
() p 8 T () S 16 T () S
(while) K
( \(flag\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(%d units available\\n) str
(", Ship.energy\);) p n
() S 8 T () S 16 T () S 24 T (extra = 0;) N
() S 8 T () S 16 T () S 24 T (flag = 0;) N
() S 8 T () S 16 T () S 24 T () S
(for) K
( \(i = 0; i < NBANKS; i++\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (b = &bank[i];) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(\\nBank %d:\\n) str
(", i\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (hit = getintpar\(") S
(units) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(hit < 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(return) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(hit == 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (extra += hit;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(extra > Ship.energy\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(available energy exceeded.  ) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (skiptonl\(0\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (flag++;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (b->units = hit;) N
() S 8 T () S 16 T () S 24 T () S 32 T (hit = getintpar\(") S
(course) str
("\);) p n
(phaser.c) (Page 3/7) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(hit < 0 || hit > 360\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(return) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (b->angle = hit * 0.0174532925;) N
() S 8 T () S 16 T () S 24 T () S 32 T (b->spread = getfltpar\(") S
(spread) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(b->spread < 0 || b->spread > 1\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(return) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (Ship.energy -= extra;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (extra = 0;) N
() S 8 T (}) N
() S 8 T () S
(else) K n
() p 8 T ({) N
() S 8 T () S 16 T () S
(/* automatic distribution of power */) c n
() p 8 T () S 16 T () S
(if) K
( \(Etc.nkling <= 0\) {) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(Sulu: But there are no Klingons in this quadrant\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (printf\(") S
(Phasers locked on target.  ) str
("\);) p n
() S 8 T () S 16 T () S
(while) K
( \(flag\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(%d units available\\n) str
(", Ship.energy\);) p n
() S 8 T () S 16 T () S 24 T (hit = getintpar\(") S
(Units to fire) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(hit <= 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(return) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(hit > Ship.energy\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(available energy exceeded.  ) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T (skiptonl\(0\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (flag = 0;) N
() S 8 T () S 16 T () S 24 T (Ship.energy -= hit;) N
() S 8 T () S 16 T () S 24 T (extra = hit;) N
() S 8 T () S 16 T () S 24 T (n = Etc.nkling;) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(n > NBANKS\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (n = NBANKS;) N
() S 8 T () S 16 T () S 24 T (tot = n * \(n + 1\) / 2;) N
() S 8 T () S 16 T () S 24 T () S
(for) K
( \(i = 0; i < n; i++\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (k = &Etc.klingon[i];) N
() S 8 T () S 16 T () S 24 T () S 32 T (b = &bank[i];) N
() S 8 T () S 16 T () S 24 T () S 32 T (distfactor = k->dist;) N
() S 8 T () S 16 T () S 24 T () S 32 T (anglefactor = ALPHA * BETA * OMEGA / \(distfactor) N
( * distfactor + EPSILON\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (anglefactor *= GAMMA;) N
() S 8 T () S 16 T () S 24 T () S 32 T (distfactor = k->power;) N
() S 8 T () S 16 T () S 24 T () S 32 T (distfactor /= anglefactor;) N
() S 8 T () S 16 T () S 24 T () S 32 T (hitreqd[i] = distfactor + 0.5;) N
() S 8 T () S 16 T () S 24 T () S 32 T (dx = Ship.sectx - k->x;) N
() S 8 T () S 16 T () S 24 T () S 32 T (dy = k->y - Ship.secty;) N
() S 8 T () S 16 T () S 24 T () S 32 T (b->angle = atan2\(dy, dx\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (b->spread = 0.0;) N
() S 8 T () S 16 T () S 24 T () S 32 T (b->units = \(\(n - i\) / tot\) * extra;) N
(#) S 8 T () S 16 T () S 24 T () S 32 T (ifdef xTRACE) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(Trace\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(b%d hr%d u%d df%.2f af%.2f\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (i, hitreqd[i], b->units,) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (distfactor, anglefactor\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
(#) S 8 T () S 16 T () S 24 T () S 32 T (endif) N
(phaser.c) (Page 4/7) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(phaser.c) (58/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 59
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T (extra -= b->units;) N
() S 8 T () S 16 T () S 24 T () S 32 T (hit = b->units - hitreqd[i];) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(hit > 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (extra += hit;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (b->units -= hit;) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T (}) N
() N
() S 8 T () S 16 T () S 24 T () S
(/* give out any extra energy we might have around */) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(extra > 0\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(for) K
( \(i = 0; i < n; i++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (b = &bank[i];) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (hit = hitreqd[i] - b->units;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(hit <= 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(hit >= extra\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (b->units += extra;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (extra = 0;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (b->units = hitreqd[i];) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (extra -= hit;) N
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(extra > 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(%d units overkill\\n) str
(", extra\);) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() N
(#) S 8 T (ifdef xTRACE) N
() S 8 T () S
(if) K
( \(Trace\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(for) K
( \(i = 0; i < NBANKS; i++\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (b = &bank[i];) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(b%d u%d) str
(", i, b->units\);) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(b->units > 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
( a%.2f s%.2f\\n) str
(", b->angle, b->spread\);) p n
() S 8 T () S 16 T () S 24 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(\\n) str
("\);) p n
() S 8 T () S 16 T (}) N
() S 8 T (}) N
(#) S 8 T (endif) N
() N
() S 8 T () S
(/* actually fire the shots */) c n
() p 8 T (Move.free = 0;) N
() S 8 T () S
(for) K
( \(i = 0; i < NBANKS; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (b = &bank[i];) N
() S 8 T () S 16 T () S
(if) K
( \(b->units <= 0\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (printf\(") S
(\\nPhaser bank %d fires:\\n) str
(", i\);) p n
() S 8 T () S 16 T (n = Etc.nkling;) N
() S 8 T () S 16 T (k = Etc.klingon;) N
() S 8 T () S 16 T () S
(for) K
( \(j = 0; j < n; j++\)) p n
() S 8 T () S 16 T ({) N
(phaser.c) (Page 5/7) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(b->units <= 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(/*) c n
() S 8 T () S 16 T () S 24 T (** The formula for hit is as follows:) N
() S 8 T () S 16 T () S 24 T (**) N
() S 8 T () S 16 T () S 24 T (**  zap = OMEGA * [\(sigma + ALPHA\) * \(rho + BETA\)]) N
() S 8 T () S 16 T () S 24 T (**) S 32 T (/ \(dist ** 2 + EPSILON\)]) N
() S 8 T () S 16 T () S 24 T (**) S 32 T (* [cos\(delta * sigma\) + GAMMA]) N
() S 8 T () S 16 T () S 24 T (**) S 32 T (* hit) N
() S 8 T () S 16 T () S 24 T (**) N
() S 8 T () S 16 T () S 24 T (** where sigma is the spread factor,) N
() S 8 T () S 16 T () S 24 T (** rho is a random number \(0 -> 1\),) N
() S 8 T () S 16 T () S 24 T (** GAMMA is a crud factor for angle \(essentially) N
() S 8 T () S 16 T () S 24 T (**) S 32 T (cruds up the spread factor\),) N
() S 8 T () S 16 T () S 24 T (** delta is the difference in radians between the) N
() S 8 T () S 16 T () S 24 T (**) S 32 T (angle you are shooting at and the actual) N
() S 8 T () S 16 T () S 24 T (**) S 32 T (angle of the klingon,) N
() S 8 T () S 16 T () S 24 T (** ALPHA scales down the significance of sigma,) N
() S 8 T () S 16 T () S 24 T (** BETA scales down the significance of rho,) N
() S 8 T () S 16 T () S 24 T (** OMEGA is the magic number which makes everything) N
() S 8 T () S 16 T () S 24 T (**) S 32 T (up to "* hit" between zero and one,) N
() S 8 T () S 16 T () S 24 T (** dist is the distance to the klingon) N
() S 8 T () S 16 T () S 24 T (** hit is the number of units in the bank, and) N
() S 8 T () S 16 T () S 24 T (** zap is the amount of the actual hit.) N
() S 8 T () S 16 T () S 24 T (**) N
() S 8 T () S 16 T () S 24 T (** Everything up through dist squared should maximize) N
() S 8 T () S 16 T () S 24 T (** at 1.0, so that the distance factor is never) N
() S 8 T () S 16 T () S 24 T (** greater than one.  Conveniently, cos\(\) is) N
() S 8 T () S 16 T () S 24 T (** never greater than one, but the same restric-) N
() S 8 T () S 16 T () S 24 T (** tion applies.) N
() S 8 T () S 16 T () S 24 T (*/) N
() p 8 T () S 16 T () S 24 T (distfactor = BETA + franf\(\);) N
() S 8 T () S 16 T () S 24 T (distfactor *= ALPHA + b->spread;) N
() S 8 T () S 16 T () S 24 T (distfactor *= OMEGA;) N
() S 8 T () S 16 T () S 24 T (anglefactor = k->dist;) N
() S 8 T () S 16 T () S 24 T (distfactor /= anglefactor * anglefactor + EPSILON;) N
() S 8 T () S 16 T () S 24 T (distfactor *= b->units;) N
() S 8 T () S 16 T () S 24 T (dx = Ship.sectx - k->x;) N
() S 8 T () S 16 T () S 24 T (dy = k->y - Ship.secty;) N
() S 8 T () S 16 T () S 24 T (anglefactor = atan2\(dy, dx\) - b->angle;) N
() S 8 T () S 16 T () S 24 T (anglefactor = cos\(\(anglefactor * b->spread\) + GAMMA\);) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(anglefactor < 0.0\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (k++;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (hit = anglefactor * distfactor + 0.5;) N
() S 8 T () S 16 T () S 24 T (k->power -= hit;) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(%d unit hit on Klingon) str
(", hit\);) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(!damaged\(SRSCAN\)\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
( at %d,%d) str
(", k->x, k->y\);) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T (b->units -= hit;) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(k->power <= 0\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (killk\(k->x, k->y\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (k++;) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() N
(phaser.c) (Page 6/7) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(phaser.c) (59/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7) 60
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(/* compute overkill */) c n
() p 8 T () S
(for) K
( \(i = 0; i < NBANKS; i++\)) p n
() S 8 T () S 16 T (extra += bank[i].units;) N
() S 8 T () S
(if) K
( \(extra > 0\)) p n
() S 8 T () S 16 T (printf\(") S
(\\n%d units expended on empty space\\n) str
(", extra\);) p n
(}) N
(phaser.c) (Page 7/7) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(phaser.c) (60/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 61
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)play.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/play.c,v 1.2 1999/11/30 03:49:52 billf Exp $) N
( * $DragonFly: src/games/trek/play.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
() N
(static) K
( ) p
(void) k
() p 16 T (myreset\() S
(int) k
(\);) p n
(/*) c n
(**  INSTRUCTION READ AND MAIN PLAY LOOP) N
(**) N
(**) S 8 T (Well folks, this is it.  Here we have the guts of the game.) N
(**) S 8 T (This routine executes moves.  It sets up per-move variables,) N
(**) S 8 T (gets the command, and executes the command.  After the command,) N
(**) S 8 T (it calls events\(\) to use up time, attack\(\) to have Klingons) N
(**) S 8 T (attack if the move was not free, and checkcond\(\) to check up) N
(**) S 8 T (on how we are doing after the move.) N
(*/) N
() p n
(struct) k
( cvntab) p 16 T (Comtab[] =) N
({) N
() S 8 T ({ ") S
(abandon) str
(",) p 24 T () S 32 T ("",) S 40 T () S 48 T () S 56 T (abandon,) S 72 T (0 },) N
() S 8 T ({ ") S
(ca) str
(",) p 16 T () S 24 T () S 32 T (") S
(pture) str
(",) p 48 T () S 56 T (capture,) S 72 T (0 },) N
() S 8 T ({ ") S
(cl) str
(",) p 16 T () S 24 T () S 32 T (") S
(oak) str
(",) p 40 T () S 48 T () S 56 T (shield,) S 64 T () S 72 T (-1 },) N
() S 8 T ({ ") S
(c) str
(",) p 16 T () S 24 T () S 32 T (") S
(omputer) str
(",) p 48 T () S 56 T (computer,) S 72 T (0 },) N
() S 8 T ({ ") S
(da) str
(",) p 16 T () S 24 T () S 32 T (") S
(mages) str
(",) p 48 T () S 56 T (dcrept,) S 64 T () S 72 T (0 },) N
() S 8 T ({ ") S
(destruct) str
(",) p 24 T () S 32 T ("",) S 40 T () S 48 T () S 56 T (destruct,) S 72 T (0 },) N
() S 8 T ({ ") S
(do) str
(",) p 16 T () S 24 T () S 32 T (") S
(ck) str
(",) p 40 T () S 48 T () S 56 T (dock,) S 64 T () S 72 T (0 },) N
() S 8 T ({ ") S
(help) str
(",) p 24 T () S 32 T ("",) S 40 T () S 48 T () S 56 T (help,) S 64 T () S 72 T (0 },) N
(play.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T ({ ") S
(i) str
(",) p 16 T () S 24 T () S 32 T (") S
(mpulse) str
(",) p 48 T () S 56 T (impulse,) S 72 T (0 },) N
() S 8 T ({ ") S
(l) str
(",) p 16 T () S 24 T () S 32 T (") S
(rscan) str
(",) p 48 T () S 56 T (lrscan,) S 64 T () S 72 T (0 },) N
() S 8 T ({ ") S
(m) str
(",) p 16 T () S 24 T () S 32 T (") S
(ove) str
(",) p 40 T () S 48 T () S 56 T (dowarp,) S 64 T () S 72 T (0 },) N
() S 8 T ({ ") S
(p) str
(",) p 16 T () S 24 T () S 32 T (") S
(hasers) str
(",) p 48 T () S 56 T (phaser,) S 64 T () S 72 T (0 },) N
() S 8 T ({ ") S
(ram) str
(",) p 24 T () S 32 T ("",) S 40 T () S 48 T () S 56 T (dowarp,) S 64 T () S 72 T (1 },) N
() S 8 T ({ ") S
(dump) str
(",) p 24 T () S 32 T ("",) S 40 T () S 48 T () S 56 T (dumpgame,) S 72 T (0 },) N
() S 8 T ({ ") S
(r) str
(",) p 16 T () S 24 T () S 32 T (") S
(est) str
(",) p 40 T () S 48 T () S 56 T (rest,) S 64 T () S 72 T (0 },) N
() S 8 T ({ ") S
(sh) str
(",) p 16 T () S 24 T () S 32 T (") S
(ield) str
(",) p 40 T () S 48 T () S 56 T (shield,) S 64 T () S 72 T (0 },) N
() S 8 T ({ ") S
(s) str
(",) p 16 T () S 24 T () S 32 T (") S
(rscan) str
(",) p 48 T () S 56 T (srscan,) S 64 T () S 72 T (0 },) N
() S 8 T ({ ") S
(st) str
(",) p 16 T () S 24 T () S 32 T (") S
(atus) str
(",) p 40 T () S 48 T () S 56 T (srscan,) S 64 T () S 72 T (-1 },) N
() S 8 T ({ ") S
(terminate) str
(",) p 24 T () S 32 T ("",) S 40 T () S 48 T () S 56 T (myreset,) S 72 T (0 },) N
() S 8 T ({ ") S
(t) str
(",) p 16 T () S 24 T () S 32 T (") S
(orpedo) str
(",) p 48 T () S 56 T (torped,) S 64 T () S 72 T (0 },) N
() S 8 T ({ ") S
(u) str
(",) p 16 T () S 24 T () S 32 T (") S
(ndock) str
(",) p 48 T () S 56 T (undock,) S 64 T () S 72 T (0 },) N
() S 8 T ({ ") S
(v) str
(",) p 16 T () S 24 T () S 32 T (") S
(isual) str
(",) p 48 T () S 56 T (visual,) S 64 T () S 72 T (0 },) N
() S 8 T ({ ") S
(w) str
(",) p 16 T () S 24 T () S 32 T (") S
(arp) str
(",) p 40 T () S 48 T () S 56 T (setwarp,) S 72 T (0 },) N
() S 8 T ({ ) S
(NULL) K
(,) p 16 T () S 24 T () S 32 T () S
(NULL) K
(,) p 40 T () S 48 T () S 56 T () S
(NULL) K
(,) p 64 T () S 72 T (0 }) N
(};) N
() N
(static) K
( ) p
(void) k n
(myreset\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T (longjmp\(env, 1\);) N
(}) N
() N
(void) k n
(play\() p
(void) k
(\)) p n
({) N
() S 8 T () S
(struct) k
( cvntab) p 24 T () S 32 T (*r;) N
() N
() S 8 T () S
(while) K
( \(1\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (Move.free = 1;) N
() S 8 T () S 16 T (Move.time = 0.0;) N
() S 8 T () S 16 T (Move.shldchg = 0;) N
() S 8 T () S 16 T (Move.newquad = 0;) N
() S 8 T () S 16 T (Move.resting = 0;) N
() S 8 T () S 16 T (skiptonl\(0\);) N
() S 8 T () S 16 T (r = getcodpar\(") S
(\\nCommand) str
(", Comtab\);) p n
() S 8 T () S 16 T (\(*r->value\)\(r->value2\);) N
() S 8 T () S 16 T (events\(0\);) N
() S 8 T () S 16 T (attack\(0\);) N
() S 8 T () S 16 T (checkcond\(\);) N
() S 8 T (}) N
(}) N
(play.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(play.c) (61/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 62
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)ram.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/ram.c,v 1.4 1999/11/30 03:49:53 billf Exp $) N
( * $DragonFly: src/games/trek/ram.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  RAM SOME OBJECT) N
(**) N
(**) S 8 T (You have run into some sort of object.  It may be a Klingon,) N
(**) S 8 T (a star, or a starbase.  If you run into a star, you are really) N
(**) S 8 T (stupid, because there is no hope for you.) N
(**) N
(**) S 8 T (If you run into something else, you destroy that object.  You) N
(**) S 8 T (also rack up incredible damages.) N
(*/) N
() p n
(void) k n
(ram\() p
(int) k
( ix, ) p
(int) k
( iy\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(char) k
() p 16 T () S 24 T (c;) N
() N
() S 8 T (printf\(") S
(\\07RED ALERT\\07: collision imminent\\n) str
("\);) p n
() S 8 T (c = Sect[ix][iy];) N
() S 8 T () S
(switch) K
( \(c\)) p n
() S 8 T ({) N
() N
() S 8 T (  ) S
(case) K
( KLINGON:) p n
(ram.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (printf\(") S
(%s rams Klingon at %d,%d\\n) str
(", Ship.shipname, ix, iy\);) p n
() S 8 T () S 16 T (killk\(ix, iy\);) N
() S 8 T () S 16 T () S
(break) K
(;) p n
() N
() S 8 T (  ) S
(case) K
( STAR:) p n
() S 8 T (  ) S
(case) K
( INHABIT:) p n
() S 8 T () S 16 T (printf\(") S
(Yeoman Rand: Captain, isn't it getting hot in here?\\n) str
("\);) p n
() S 8 T () S 16 T (sleep\(2\);) N
() S 8 T () S 16 T (printf\(") S
(Spock: Hull temperature approaching 550 Degrees Kelvin.\\n) str
("\);) p n
() S 8 T () S 16 T (lose\(L_STAR\);) N
() N
() S 8 T (  ) S
(case) K
( BASE:) p n
() S 8 T () S 16 T (printf\(") S
(You ran into the starbase at %d,%d\\n) str
(", ix, iy\);) p n
() S 8 T () S 16 T (killb\(Ship.quadx, Ship.quady\);) N
() S 8 T () S 16 T () S
(/* don't penalize the captain if it wasn't his fault */) c n
() p 8 T () S 16 T () S
(if) K
( \(!damaged\(SINS\)\)) p n
() S 8 T () S 16 T () S 24 T (Game.killb += 1;) N
() S 8 T () S 16 T () S
(break) K
(;) p n
() S 8 T (}) N
() S 8 T (sleep\(2\);) N
() S 8 T (printf\(") S
(%s heavily damaged\\n) str
(", Ship.shipname\);) p n
() N
() S 8 T () S
(/* select the number of deaths to occur */) c n
() p 8 T (i = 10 + ranf\(20 * Game.skill\);) N
() S 8 T (Game.deaths += i;) N
() S 8 T (Ship.crew -= i;) N
() S 8 T (printf\(") S
(McCoy: Take it easy Jim; we had %d casualties.\\n) str
(", i\);) p n
() N
() S 8 T () S
(/* damage devices with an 80% probability */) c n
() p 8 T () S
(for) K
( \(i = 0; i < NDEV; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(ranf\(100\) < 20\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
() S 8 T () S 16 T (damage\(i, \(2.5 * \(franf\(\) + franf\(\)\) + 1.0\) * Param.damfac[i]\);) N
() S 8 T (}) N
() N
() S 8 T () S
(/* no chance that your shields remained up in all that */) c n
() p 8 T (Ship.shldup = 0;) N
(}) N
(ram.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(ram.c) (62/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 63
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)ranf.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/ranf.c,v 1.3 1999/11/30 03:49:53 billf Exp $) N
( * $DragonFly: src/games/trek/ranf.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(#include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(int) k n
(ranf\() p
(int) k
( max\)) p n
({) N
() S 8 T () S
(if) K
( \(max <= 0\)) p n
() S 8 T () S 16 T () S
(return) K
( \(0\);) p n
() S 8 T () S
(return) K
( \(random\(\) % max\);) p n
(}) N
() N
(double) k n
(franf\() p
(void) k
(\)) p n
({) N
() S 8 T () S
(double) k
() p 16 T () S 24 T (t;) N
() S 8 T (t = random\(\) & 077777;) N
() S 8 T () S
(return) K
( \(t / 32767.0\);) p n
(}) N
(ranf.c) (Page 1/1) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(ranf.c) (63/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 64
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)rest.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/rest.c,v 1.4 1999/11/30 03:49:53 billf Exp $) N
( * $DragonFly: src/games/trek/rest.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
() N
(/*) c n
(**  REST FOR REPAIRS) N
(**) N
(**) S 8 T (You sit around and wait for repairs to happen.  Actually, you) N
(**) S 8 T (sit around and wait for anything to happen.  I do want to point) N
(**) S 8 T (out however, that Klingons are not as patient as you are, and) N
(**) S 8 T (they tend to attack you while you are resting.) N
(**) N
(**) S 8 T (You can never rest through a long range tractor beam.) N
(**) N
(**) S 8 T (In events\(\) you will be given an opportunity to cancel the) N
(**) S 8 T (rest period if anything momentous happens.) N
(*/) N
() p n
(void) k n
(rest\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (t;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (percent;) N
() N
() S 8 T () S
(/* get the time to rest */) c n
() p 8 T (t = getfltpar\(") S
(How long) str
("\);) p n
(rest.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(if) K
( \(t <= 0.0\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (percent = 100 * t / Now.time + 0.5;) N
() S 8 T () S
(if) K
( \(percent >= 70\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Spock: That would take %d%% of our remaining time.\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T (percent\);) N
() S 8 T () S 16 T () S
(if) K
( \(!getynpar\(") p
(Are you really certain that is wise) str
("\)\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T (Move.time = t;) N
() N
() S 8 T () S
(/* boundary condition is the LRTB */) c n
() p 8 T (t = Now.eventptr[E_LRTB]->date - Now.date;) N
() S 8 T () S
(if) K
( \(Ship.cond != DOCKED && Move.time > t\)) p n
() S 8 T () S 16 T (Move.time = t + 0.0001;) N
() S 8 T (Move.free = 0;) N
() S 8 T (Move.resting = 1;) N
(}) N
(rest.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(rest.c) (64/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 65
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)schedule.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/schedule.c,v 1.4 1999/11/30 03:49:53 billf Exp $) N
( * $DragonFly: src/games/trek/schedule.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  SCHEDULE AN EVENT) N
(**) N
(**) S 8 T (An event of type 'type' is scheduled for time NOW + 'offset') N
(**) S 8 T (into the first available slot.  'x', 'y', and 'z' are) N
(**) S 8 T (considered the attributes for this event.) N
(**) N
(**) S 8 T (The address of the slot is returned.) N
(*/) N
() p n
(struct) k
( event *) p n
(schedule\() S
(int) k
( type, ) p
(double) k
( offset, ) p
(char) k
( x, ) p
(char) k
( y, ) p
(char) k
( z\)) p n
({) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (date;) N
() N
() S 8 T (date = Now.date + offset;) N
() S 8 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (e = &Event[i];) N
() S 8 T () S 16 T () S
(if) K
( \(e->evcode\)) p n
() S 8 T () S 16 T () S 24 T () S
(continue) K
(;) p n
(schedule.c) (Page 1/3) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S
(/* got a slot */) c n
(#) p 8 T () S 16 T (ifdef xTRACE) N
() S 8 T () S 16 T () S
(if) K
( \(Trace\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(schedule: type %d @ %.2f slot %d parm %d %d %d\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T (type, date, i, x, y, z\);) N
(#) S 8 T () S 16 T (endif) N
() S 8 T () S 16 T (e->evcode = type;) N
() S 8 T () S 16 T (e->date = date;) N
() S 8 T () S 16 T (e->x = x;) N
() S 8 T () S 16 T (e->y = y;) N
() S 8 T () S 16 T (e->systemname = z;) N
() S 8 T () S 16 T (Now.eventptr[type] = e;) N
() S 8 T () S 16 T () S
(return) K
( \(e\);) p n
() S 8 T (}) N
() S 8 T (syserr\(") S
(Cannot schedule event %d parm %d %d %d) str
(", type, x, y, z\);) p n
() S 8 T () S
(/* NOTREACHED */) c n
() p 8 T () S
(return) K
(\() p
(NULL) K
(\);) p n
(}) N
() N
() N
(/*) c n
(**  RESCHEDULE AN EVENT) N
(**) N
(**) S 8 T (The event pointed to by 'e' is rescheduled to the current) N
(**) S 8 T (time plus 'offset'.) N
(*/) N
() p n
(void) k n
(reschedule\() p
(struct) k
( event *e1, ) p
(double) k
( offset\)) p n
({) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (date;) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() N
() S 8 T (e = e1;) N
() N
() S 8 T (date = Now.date + offset;) N
() S 8 T (e->date = date;) N
(#) S 8 T (ifdef xTRACE) N
() S 8 T () S
(if) K
( \(Trace\)) p n
() S 8 T () S 16 T (printf\(") S
(reschedule: type %d parm %d %d %d @ %.2f\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T (e->evcode, e->x, e->y, e->systemname, date\);) N
(#) S 8 T (endif) N
() S 8 T () S
(return) K
(;) p n
(}) N
() N
() N
(/*) c n
(**  UNSCHEDULE AN EVENT) N
(**) N
(**) S 8 T (The event at slot 'e' is deleted.) N
(*/) N
() p n
(void) k n
(unschedule\() p
(struct) k
( event *e1\)) p n
({) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() N
() S 8 T (e = e1;) N
() N
(#) S 8 T (ifdef xTRACE) N
() S 8 T () S
(if) K
( \(Trace\)) p n
() S 8 T () S 16 T (printf\(") S
(unschedule: type %d @ %.2f parm %d %d %d\\n) str
(",) p n
(schedule.c) (Page 2/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(schedule.c) (65/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 66
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T (e->evcode, e->date, e->x, e->y, e->systemname\);) N
(#) S 8 T (endif) N
() S 8 T (Now.eventptr[e->evcode & E_EVENT] = 0;) N
() S 8 T (e->date = 1e50;) N
() S 8 T (e->evcode = 0;) N
() S 8 T () S
(return) K
(;) p n
(}) N
() N
() N
(/*) c n
(**  Abreviated schedule routine) N
(**) N
(**) S 8 T (Parameters are the event index and a factor for the time) N
(**) S 8 T (figure.) N
(*/) N
() p n
(struct) k
( event *) p n
(xsched\() S
(int) k
( ev1, ) p
(int) k
( factor, ) p
(int) k
( x, ) p
(int) k
( y, ) p
(int) k
( z\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T (ev;) N
() N
() S 8 T (ev = ev1;) N
() S 8 T () S
(return) K
( \(schedule\(ev, -Param.eventdly[ev] * Param.time * log\(franf\(\)\) / f) p n
(actor, x, y, z\)\);) N
(}) N
() N
() N
(/*) c n
(**  Simplified reschedule routine) N
(**) N
(**) S 8 T (Parameters are the event index, the initial date, and the) N
(**) S 8 T (division factor.  Look at the code to see what really happens.) N
(*/) N
() p n
(void) k n
(xresched\() p
(struct) k
( event *e1, ) p
(int) k
( ev1, ) p
(int) k
( factor\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (ev;) N
() S 8 T () S
(struct) k
( event) p 24 T (*e;) N
() N
() S 8 T (ev = ev1;) N
() S 8 T (e = e1;) N
() S 8 T (reschedule\(e, -Param.eventdly[ev] * Param.time * log\(franf\(\)\) / factor\);) N
(}) N
(schedule.c) (Page 3/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(schedule.c) (66/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 67
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)score.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/score.c,v 1.4 1999/11/30 03:49:53 billf Exp $) N
( * $DragonFly: src/games/trek/score.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
() N
(/*) c n
(**  PRINT OUT THE CURRENT SCORE) N
(*/) N
() p n
(long) k n
(score\() p
(void) k
(\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (u;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (t;) N
() S 8 T () S
(long) k
() p 16 T () S 24 T () S 32 T (s;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (r;) N
() N
() S 8 T (printf\(") S
(\\n*** Your score:\\n) str
("\);) p n
() S 8 T (s = t = Param.klingpwr / 4 * \(u = Game.killk\);) N
() S 8 T () S
(if) K
( \(t != 0\)) p n
() S 8 T () S 16 T (printf\(") S
(%d Klingons killed\\t\\t\\t%6d\\n) str
(", u, t\);) p n
() S 8 T (r = Now.date - Param.date;) N
() S 8 T () S
(if) K
( \(r < 1.0\)) p n
() S 8 T () S 16 T (r = 1.0;) N
() S 8 T (r = Game.killk / r;) N
() S 8 T (s += \(t = 400 * r\);) N
() S 8 T () S
(if) K
( \(t != 0\)) p n
(score.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (printf\(") S
(Kill rate %.2f Klingons/stardate  \\t%6d\\n) str
(", r, t\);) p n
() S 8 T (r = Now.klings;) N
() S 8 T (r /= Game.killk + 1;) N
() S 8 T (s += \(t = -400 * r\);) N
() S 8 T () S
(if) K
( \(t != 0\)) p n
() S 8 T () S 16 T (printf\(") S
(Penalty for %d klingons remaining\\t%6d\\n) str
(", Now.klings, t\);) p n
() S 8 T () S
(if) K
( \(Move.endgame > 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (s += \(t = 100 * \(u = Game.skill\)\);) N
() S 8 T () S 16 T (printf\(") S
(Bonus for winning a %s%s game\\t\\t%6d\\n) str
(", Skitab[u - 1].abrev, Ski) p n
(tab[u - 1].full, t\);) N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(Game.killed\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (s -= 500;) N
() S 8 T () S 16 T (printf\(") S
(Penalty for getting killed\\t\\t  -500\\n) str
("\);) p n
() S 8 T (}) N
() S 8 T (s += \(t = -100 * \(u = Game.killb\)\);) N
() S 8 T () S
(if) K
( \(t != 0\)) p n
() S 8 T () S 16 T (printf\(") S
(%d starbases killed\\t\\t\\t%6d\\n) str
(", u, t\);) p n
() S 8 T (s += \(t = -100 * \(u = Game.helps\)\);) N
() S 8 T () S
(if) K
( \(t != 0\)) p n
() S 8 T () S 16 T (printf\(") S
(%d calls for help\\t\\t\\t%6d\\n) str
(", u, t\);) p n
() S 8 T (s += \(t = -5 * \(u = Game.kills\)\);) N
() S 8 T () S
(if) K
( \(t != 0\)) p n
() S 8 T () S 16 T (printf\(") S
(%d stars destroyed\\t\\t\\t%6d\\n) str
(", u, t\);) p n
() S 8 T (s += \(t = -150 * \(u = Game.killinhab\)\);) N
() S 8 T () S
(if) K
( \(t != 0\)) p n
() S 8 T () S 16 T (printf\(") S
(%d inhabited starsystems destroyed\\t%6d\\n) str
(", u, t\);) p n
() S 8 T () S
(if) K
( \(Ship.ship != ENTERPRISE\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (s -= 200;) N
() S 8 T () S 16 T (printf\(") S
(penalty for abandoning ship\\t\\t  -200\\n) str
("\);) p n
() S 8 T (}) N
() S 8 T (s += \(t = 3 * \(u = Game.captives\)\);) N
() S 8 T () S
(if) K
( \(t != 0\)) p n
() S 8 T () S 16 T (printf\(") S
(%d Klingons captured\\t\\t\\t%6d\\n) str
(", u, t\);) p n
() S 8 T (s += \(t = -\(u = Game.deaths\)\);) N
() S 8 T () S
(if) K
( \(t != 0\)) p n
() S 8 T () S 16 T (printf\(") S
(%d casualties\\t\\t\\t\\t%6d\\n) str
(", u, t\);) p n
() S 8 T (printf\(") S
(\\n***  TOTAL\\t\\t\\t%14ld\\n) str
(", s\);) p n
() S 8 T () S
(return) K
( \(s\);) p n
(}) N
(score.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(score.c) (67/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 68
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)setup.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/setup.c,v 1.6 1999/11/30 03:49:54 billf Exp $) N
( * $DragonFly: src/games/trek/setup.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
() N
(/*) c n
(**  INITIALIZE THE GAME) N
(**) N
(**) S 8 T (The length, skill, and password are read, and the game) N
(**) S 8 T (is initialized.  It is far too difficult to describe all) N
(**) S 8 T (that goes on in here, but it is all straight-line code;) N
(**) S 8 T (give it a look.) N
(**) N
(**) S 8 T (Game restart and tournament games are handled here.) N
(*/) N
() p n
(struct) k
( cvntab) p 16 T (Lentab[] =) N
({) N
() S 8 T ({ ") S
(s) str
(",) p 16 T () S 24 T (") S
(hort) str
(",) p 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)1,) p 64 T (0 },) N
() S 8 T ({ ") S
(m) str
(",) p 16 T () S 24 T (") S
(edium) str
(",) p 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)2,) p 64 T (0 },) N
() S 8 T ({ ") S
(l) str
(",) p 16 T () S 24 T (") S
(ong) str
(",) p 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)4,) p 64 T (0 },) N
() S 8 T ({ ") S
(restart) str
(",) p 24 T ("",) S 32 T () S 40 T () S
(NULL) K
(,) p 48 T () S 56 T () S 64 T (0 },) N
() S 8 T ({ ) S
(NULL) K
(,) p 16 T () S 24 T () S
(NULL) K
(,) p 32 T () S 40 T () S
(NULL) K
(,) p 48 T () S 56 T () S 64 T (0 }) N
(};) N
() N
(struct) k
( cvntab) p 16 T (Skitab[] =) N
({) N
(setup.c) (Page 1/5) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T ({ ") S
(n) str
(",) p 16 T () S 24 T (") S
(ovice) str
(",) p 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)1,) p 64 T (0 },) N
() S 8 T ({ ") S
(f) str
(",) p 16 T () S 24 T (") S
(air) str
(",) p 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)2,) p 64 T (0 },) N
() S 8 T ({ ") S
(g) str
(",) p 16 T () S 24 T (") S
(ood) str
(",) p 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)3,) p 64 T (0 },) N
() S 8 T ({ ") S
(e) str
(",) p 16 T () S 24 T (") S
(xpert) str
(",) p 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)4,) p 64 T (0 },) N
() S 8 T ({ ") S
(c) str
(",) p 16 T () S 24 T (") S
(ommodore) str
(",) p 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)5,) p 64 T (0 },) N
() S 8 T ({ ") S
(i) str
(",) p 16 T () S 24 T (") S
(mpossible) str
(",) p 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)6,) p 64 T (0 },) N
() S 8 T ({ ) S
(NULL) K
(, ) p 24 T () S
(NULL) K
(,) p 32 T () S 40 T () S
(NULL) K
(,) p 48 T () S 56 T () S 64 T (0 }) N
(};) N
() N
(void) k n
(setup\() p
(void) k
(\)) p n
({) N
() S 8 T () S
(struct) k
( cvntab) p 24 T () S 32 T (*r;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i, j;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (f;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (d;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (klump;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (ix, iy;) N
() S 8 T () S
(struct) k
( quad) p 24 T (*q;) N
() S 8 T () S
(struct) k
( event) p 24 T () S 32 T (*e;) N
() N
() S 8 T () S
(while) K
( \(1\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (r = getcodpar\(") S
(What length game) str
(", Lentab\);) p n
() S 8 T () S 16 T (Game.length = \() S
(long) k
(\) r->value;) p n
() S 8 T () S 16 T () S
(if) K
( \(Game.length == 0\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(restartgame\(\)\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(break) K
(;) p n
() S 8 T (}) N
() S 8 T (r = getcodpar\(") S
(What skill game) str
(", Skitab\);) p n
() S 8 T (Game.skill = \() S
(long) k
(\) r->value;) p n
() S 8 T (Game.tourn = 0;) N
() S 8 T (getstrpar\(") S
(Enter a password) str
(", Game.passwd, 14, 0\);) p n
() S 8 T () S
(if) K
( \(sequal\(Game.passwd, ") p
(tournament) str
("\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (getstrpar\(") S
(Enter tournament code) str
(", Game.passwd, 14, 0\);) p n
() S 8 T () S 16 T (Game.tourn = 1;) N
() S 8 T () S 16 T (d = 0;) N
() S 8 T () S 16 T () S
(for) K
( \(i = 0; Game.passwd[i]; i++\)) p n
() S 8 T () S 16 T () S 24 T (d += Game.passwd[i] << i;) N
() S 8 T () S 16 T (srandom\(d\);) N
() S 8 T (}) N
() S 8 T (Param.bases = Now.bases = ranf\(6 - Game.skill\) + 2;) N
() S 8 T () S
(if) K
( \(Game.skill == 6\)) p n
() S 8 T () S 16 T (Param.bases = Now.bases = 1;) N
() S 8 T (Param.time = Now.time = 6.0 * Game.length + 2.0;) N
() S 8 T (i = Game.skill;) N
() S 8 T (j = Game.length;) N
() S 8 T (Param.klings = Now.klings = i * j * 3.5 * \(franf\(\) + 0.75\);) N
() S 8 T () S
(if) K
( \(Param.klings < i * j * 5\)) p n
() S 8 T () S 16 T (Param.klings = Now.klings = i * j * 5;) N
() S 8 T () S
(if) K
( \(Param.klings <= i\)) p 32 T () S 40 T () S
(/* numerical overflow problems */) c n
() p 8 T () S 16 T (Param.klings = Now.klings = 127;) N
() S 8 T (Param.energy = Ship.energy = 5000;) N
() S 8 T (Param.torped = Ship.torped = 10;) N
() S 8 T (Ship.ship = ENTERPRISE;) N
() S 8 T (Ship.shipname = ") S
(Enterprise) str
(";) p n
() S 8 T (Param.shield = Ship.shield = 1500;) N
(setup.c) (Page 2/5) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(setup.c) (68/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 69
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (Param.resource = Now.resource = Param.klings * Param.time;) N
() S 8 T (Param.reserves = Ship.reserves = \(6 - Game.skill\) * 2.0;) N
() S 8 T (Param.crew = Ship.crew = 387;) N
() S 8 T (Param.brigfree = Ship.brigfree = 400;) N
() S 8 T (Ship.shldup = 1;) N
() S 8 T (Ship.cond = GREEN;) N
() S 8 T (Ship.warp = 5.0;) N
() S 8 T (Ship.warp2 = 25.0;) N
() S 8 T (Ship.warp3 = 125.0;) N
() S 8 T (Ship.sinsbad = 0;) N
() S 8 T (Ship.cloaked = 0;) N
() S 8 T (Param.date = Now.date = \(ranf\(20\) + 20\) * 100;) N
() S 8 T (f = Game.skill;) N
() S 8 T (f = log\(f + 0.5\);) N
() S 8 T () S
(for) K
( \(i = 0; i < NDEV; i++\)) p n
() S 8 T () S 16 T () S
(if) K
( \(Device[i].name[0] == ') p
(*) str
('\)) p n
() S 8 T () S 16 T () S 24 T (Param.damfac[i] = 0;) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T (Param.damfac[i] = f;) N
() S 8 T () S
(/* these probabilities must sum to 1000 */) c n
() p 8 T (Param.damprob[WARP] = 70;) S 40 T () S
(/* warp drive) c 56 T () S 64 T ( 7.0% */) N
() p 8 T (Param.damprob[SRSCAN] = 110;) S 40 T () S
(/* short range scanners) c 64 T (11.0% */) N
() p 8 T (Param.damprob[LRSCAN] = 110;) S 40 T () S
(/* long range scanners) c 64 T (11.0% */) N
() p 8 T (Param.damprob[PHASER] = 125;) S 40 T () S
(/* phasers) c 56 T () S 64 T (12.5% */) N
() p 8 T (Param.damprob[TORPED] = 125;) S 40 T () S
(/* photon torpedoes) c 64 T (12.5% */) N
() p 8 T (Param.damprob[IMPULSE] = 75;) S 40 T () S
(/* impulse engines) c 64 T ( 7.5% */) N
() p 8 T (Param.damprob[SHIELD] = 150;) S 40 T () S
(/* shield control) c 64 T (15.0% */) N
() p 8 T (Param.damprob[COMPUTER] = 20;) S 40 T () S
(/* computer) c 56 T () S 64 T ( 2.0% */) N
() p 8 T (Param.damprob[SSRADIO] = 35;) S 40 T () S
(/* subspace radio) c 64 T ( 3.5% */) N
() p 8 T (Param.damprob[LIFESUP] = 30;) S 40 T () S
(/* life support) c 56 T () S 64 T ( 3.0% */) N
() p 8 T (Param.damprob[SINS] = 20;) S 40 T () S
(/* navigation system) c 64 T ( 2.0% */) N
() p 8 T (Param.damprob[CLOAK] = 50;) S 40 T () S
(/* cloaking device) c 64 T ( 5.0% */) N
() p 8 T (Param.damprob[XPORTER] = 80;) S 40 T () S
(/* transporter) c 56 T () S 64 T ( 8.0% */) N
() p 8 T () S
(/* check to see that I didn't blow it */) c n
() p 8 T () S
(for) K
( \(i = j = 0; i < NDEV; i++\)) p n
() S 8 T () S 16 T (j += Param.damprob[i];) N
() S 8 T () S
(if) K
( \(j != 1000\)) p n
() S 8 T () S 16 T (syserr\(") S
(Device probabilities sum to %d) str
(", j\);) p n
() S 8 T (Param.dockfac = 0.5;) N
() S 8 T (Param.regenfac = \(5 - Game.skill\) * 0.05;) N
() S 8 T () S
(if) K
( \(Param.regenfac < 0.0\)) p n
() S 8 T () S 16 T (Param.regenfac = 0.0;) N
() S 8 T (Param.warptime = 10;) N
() S 8 T (Param.stopengy = 50;) N
() S 8 T (Param.shupengy = 40;) N
() S 8 T (i = Game.skill;) N
() S 8 T (Param.klingpwr = 100 + 150 * i;) N
() S 8 T () S
(if) K
( \(i >= 6\)) p n
() S 8 T () S 16 T (Param.klingpwr += 150;) N
() S 8 T (Param.phasfac = 0.8;) N
() S 8 T (Param.hitfac = 0.5;) N
() S 8 T (Param.klingcrew = 200;) N
() S 8 T (Param.srndrprob = 0.0035;) N
() S 8 T (Param.moveprob[KM_OB] = 45;) N
() S 8 T (Param.movefac[KM_OB] = .09;) N
() S 8 T (Param.moveprob[KM_OA] = 40;) N
() S 8 T (Param.movefac[KM_OA] = -0.05;) N
() S 8 T (Param.moveprob[KM_EB] = 40;) N
() S 8 T (Param.movefac[KM_EB] = 0.075;) N
() S 8 T (Param.moveprob[KM_EA] = 25 + 5 * Game.skill;) N
() S 8 T (Param.movefac[KM_EA] = -0.06 * Game.skill;) N
() S 8 T (Param.moveprob[KM_LB] = 0;) N
(setup.c) (Page 3/5) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (Param.movefac[KM_LB] = 0.0;) N
() S 8 T (Param.moveprob[KM_LA] = 10 + 10 * Game.skill;) N
() S 8 T (Param.movefac[KM_LA] = 0.25;) N
() S 8 T (Param.eventdly[E_SNOVA] = 0.5;) N
() S 8 T (Param.eventdly[E_LRTB] = 25.0;) N
() S 8 T (Param.eventdly[E_KATSB] = 1.0;) N
() S 8 T (Param.eventdly[E_KDESB] = 3.0;) N
() S 8 T (Param.eventdly[E_ISSUE] = 1.0;) N
() S 8 T (Param.eventdly[E_SNAP] = 0.5;) N
() S 8 T (Param.eventdly[E_ENSLV] = 0.5;) N
() S 8 T (Param.eventdly[E_REPRO] = 2.0;) N
() S 8 T (Param.navigcrud[0] = 1.50;) N
() S 8 T (Param.navigcrud[1] = 0.75;) N
() S 8 T (Param.cloakenergy = 1000;) N
() S 8 T (Param.energylow = 1000;) N
() S 8 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (e = &Event[i];) N
() S 8 T () S 16 T (e->date = 1e50;) N
() S 8 T () S 16 T (e->evcode = 0;) N
() S 8 T (}) N
() S 8 T (xsched\(E_SNOVA, 1, 0, 0, 0\);) N
() S 8 T (xsched\(E_LRTB, Param.klings, 0, 0, 0\);) N
() S 8 T (xsched\(E_KATSB, 1, 0, 0, 0\);) N
() S 8 T (xsched\(E_ISSUE, 1, 0, 0, 0\);) N
() S 8 T (xsched\(E_SNAP, 1, 0, 0, 0\);) N
() S 8 T (Ship.sectx = ranf\(NSECTS\);) N
() S 8 T (Ship.secty = ranf\(NSECTS\);) N
() S 8 T (Game.killk = Game.kills = Game.killb = 0;) N
() S 8 T (Game.deaths = Game.negenbar = 0;) N
() S 8 T (Game.captives = 0;) N
() S 8 T (Game.killinhab = 0;) N
() S 8 T (Game.helps = 0;) N
() S 8 T (Game.killed = 0;) N
() S 8 T (Game.snap = 0;) N
() S 8 T (Move.endgame = 0;) N
() N
() S 8 T () S
(/* setup stars */) c n
() p 8 T () S
(for) K
( \(i = 0; i < NQUADS; i++\)) p n
() S 8 T () S 16 T () S
(for) K
( \(j = 0; j < NQUADS; j++\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (q = &Quad[i][j];) N
() S 8 T () S 16 T () S 24 T (q->klings = q->bases = 0;) N
() S 8 T () S 16 T () S 24 T (q->scanned = -1;) N
() S 8 T () S 16 T () S 24 T (q->stars = ranf\(9\) + 1;) N
() S 8 T () S 16 T () S 24 T (q->holes = ranf\(3\) - q->stars / 5;) N
() S 8 T () S 16 T () S 24 T (q->qsystemname = 0;) N
() S 8 T () S 16 T (}) N
() N
() S 8 T () S
(/* select inhabited starsystems */) c n
() p 8 T () S
(for) K
( \(d = 1; d < NINHAB; d++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(do) K n
() p 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (i = ranf\(NQUADS\);) N
() S 8 T () S 16 T () S 24 T (j = ranf\(NQUADS\);) N
() S 8 T () S 16 T () S 24 T (q = &Quad[i][j];) N
() S 8 T () S 16 T (} ) S
(while) K
( \(q->qsystemname\);) p n
() S 8 T () S 16 T (q->qsystemname = d;) N
() S 8 T (}) N
() N
() S 8 T () S
(/* position starbases */) c n
(setup.c) (Page 4/5) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(setup.c) (69/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 70
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(for) K
( \(i = 0; i < Param.bases; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(while) K
( \(1\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (ix = ranf\(NQUADS\);) N
() S 8 T () S 16 T () S 24 T (iy = ranf\(NQUADS\);) N
() S 8 T () S 16 T () S 24 T (q = &Quad[ix][iy];) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(q->bases > 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (q->bases = 1;) N
() S 8 T () S 16 T (Now.base[i].x = ix;) N
() S 8 T () S 16 T (Now.base[i].y = iy;) N
() S 8 T () S 16 T (q->scanned = 1001;) N
() S 8 T () S 16 T () S
(/* start the Enterprise near starbase */) c n
() p 8 T () S 16 T () S
(if) K
( \(i == 0\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (Ship.quadx = ix;) N
() S 8 T () S 16 T () S 24 T (Ship.quady = iy;) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() N
() S 8 T () S
(/* position klingons */) c n
() p 8 T () S
(for) K
( \(i = Param.klings; i > 0; \)) p n
() S 8 T ({) N
() S 8 T () S 16 T (klump = ranf\(4\) + 1;) N
() S 8 T () S 16 T () S
(if) K
( \(klump > i\)) p n
() S 8 T () S 16 T () S 24 T (klump = i;) N
() S 8 T () S 16 T () S
(while) K
( \(1\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (ix = ranf\(NQUADS\);) N
() S 8 T () S 16 T () S 24 T (iy = ranf\(NQUADS\);) N
() S 8 T () S 16 T () S 24 T (q = &Quad[ix][iy];) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(q->klings + klump > MAXKLQUAD\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T (q->klings += klump;) N
() S 8 T () S 16 T () S 24 T (i -= klump;) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() N
() S 8 T () S
(/* initialize this quadrant */) c n
() p 8 T (printf\(") S
(%d Klingons\\n%d starbase) str
(", Param.klings, Param.bases\);) p n
() S 8 T () S
(if) K
( \(Param.bases > 1\)) p n
() S 8 T () S 16 T (printf\(") S
(s) str
("\);) p n
() S 8 T (printf\(") S
( at %d,%d) str
(", Now.base[0].x, Now.base[0].y\);) p n
() S 8 T () S
(for) K
( \(i = 1; i < Param.bases; i++\)) p n
() S 8 T () S 16 T (printf\(") S
(, %d,%d) str
(", Now.base[i].x, Now.base[i].y\);) p n
() S 8 T (printf\(") S
(\\nIt takes %d units to kill a Klingon\\n) str
(", Param.klingpwr\);) p n
() S 8 T (Move.free = 0;) N
() S 8 T (initquad\(0\);) N
() S 8 T (srscan\(1\);) N
() S 8 T (attack\(0\);) N
(}) N
(setup.c) (Page 5/5) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(setup.c) (70/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 71
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)setwarp.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/setwarp.c,v 1.2 1999/11/30 03:49:54 billf Exp $) N
( * $DragonFly: src/games/trek/setwarp.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
() N
(/*) c n
(**  SET WARP FACTOR) N
(**) N
(**) S 8 T (The warp factor is set for future move commands.  It is) N
(**) S 8 T (checked for consistancy.) N
(*/) N
() p n
(void) k n
(setwarp\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(double) k
() p 16 T (warpfac;) N
() N
() S 8 T (warpfac = getfltpar\(") S
(Warp factor) str
("\);) p n
() S 8 T () S
(if) K
( \(warpfac < 0.0\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T () S
(if) K
( \(warpfac < 1.0\) {) p n
() S 8 T () S 16 T (printf\(") S
(Minimum warp speed is 1.0\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(warpfac > 10.0\) {) p n
() S 8 T () S 16 T (printf\(") S
(Maximum speed is warp 10.0\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
(setwarp.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (}) N
() S 8 T () S
(if) K
( \(warpfac > 6.0\)) p n
() S 8 T () S 16 T (printf\(") S
(Damage to warp engines may occur above warp 6.0\\n) str
("\);) p n
() S 8 T (Ship.warp = warpfac;) N
() S 8 T (Ship.warp2 = Ship.warp * warpfac;) N
() S 8 T (Ship.warp3 = Ship.warp2 * warpfac;) N
(}) N
(setwarp.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(setwarp.c) (71/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 72
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)shield.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/shield.c,v 1.5 1999/11/30 03:49:54 billf Exp $) N
( * $DragonFly: src/games/trek/shield.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
() N
(/*) c n
(**  SHIELD AND CLOAKING DEVICE CONTROL) N
(**) N
(**) S 8 T ('f' is one for auto shield up \(in case of Condition RED\),) N
(**) S 8 T (zero for shield control, and negative one for cloaking) N
(**) S 8 T (device control.) N
(**) N
(**) S 8 T (Called with an 'up' or 'down' on the same line, it puts) N
(**) S 8 T (the shields/cloak into the specified mode.  Otherwise it) N
(**) S 8 T (reports to the user the current mode, and asks if she wishes) N
(**) S 8 T (to change.) N
(**) N
(**) S 8 T (This is not a free move.  Hits that occur as a result of) N
(**) S 8 T (this move appear as though the shields are half up/down,) N
(**) S 8 T (so you get partial hits.) N
(*/) N
() p n
(struct) k
( cvntab Udtab[] =) p n
({) N
() S 8 T ({ ") S
(u) str
(",) p 16 T () S 24 T (") S
(p) str
(",) p 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)1,) p 64 T (0 },) N
() S 8 T ({ ") S
(d) str
(",) p 16 T () S 24 T (") S
(own) str
(",) p 32 T () S 40 T (\() S
(void) k
( \(*\)\() p
(int) k
(\)\)0,) p 64 T (0 },) N
() S 8 T ({ ) S
(NULL) K
(,) p 16 T () S 24 T () S
(NULL) K
(,) p 32 T () S 40 T () S
(NULL) K
(,) p 48 T () S 56 T () S 64 T (0 }) N
(shield.c) (Page 1/3) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(};) p n
() N
(void) k n
(shield\() p
(int) k
( f\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(struct) k
( cvntab) p 24 T () S 32 T (*r;) N
() S 8 T () S
(char) k
() p 16 T () S 24 T () S 32 T (s[100];) N
() S 8 T () S
(const) K
( ) p
(char) k
() p 24 T () S 32 T (*device, *dev2, *dev3;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (ind;) N
() S 8 T () S
(char) k
() p 16 T () S 24 T () S 32 T (*stat;) N
() N
() S 8 T () S
(if) K
( \(f > 0 && \(Ship.shldup || damaged\(SRSCAN\)\)\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T () S
(if) K
( \(f < 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* cloaking device */) c n
() p 8 T () S 16 T () S
(if) K
( \(Ship.ship == QUEENE\) {) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(Ye Faire Queene does not have the cloaking device.\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (device = ") S
(Cloaking device) str
(";) p n
() S 8 T () S 16 T (dev2 = ") S
(is) str
(";) p n
() S 8 T () S 16 T (ind = CLOAK;) N
() S 8 T () S 16 T (dev3 = ") S
(it) str
(";) p n
() S 8 T () S 16 T (stat = &Ship.cloaked;) N
() S 8 T (}) N
() S 8 T () S
(else) K n
() p 8 T ({) N
() S 8 T () S 16 T () S
(/* shields */) c n
() p 8 T () S 16 T (device = ") S
(Shields) str
(";) p n
() S 8 T () S 16 T (dev2 = ") S
(are) str
(";) p n
() S 8 T () S 16 T (dev3 = ") S
(them) str
(";) p n
() S 8 T () S 16 T (ind = SHIELD;) N
() S 8 T () S 16 T (stat = &Ship.shldup;) N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(damaged\(ind\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(f <= 0\)) p n
() S 8 T () S 16 T () S 24 T (out\(ind\);) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(Ship.cond == DOCKED\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(%s %s down while docked\\n) str
(", device, dev2\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(f <= 0 && !testnl\(\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (r = getcodpar\(") S
(Up or down) str
(", Udtab\);) p n
() S 8 T () S 16 T (i = \() S
(long) k
(\) r->value;) p n
() S 8 T (}) N
() S 8 T () S
(else) K n
() p 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(*stat\)) p n
() S 8 T () S 16 T () S 24 T (sprintf\(s, ") S
(%s %s up.  Do you want %s down) str
(", device, dev2, dev) p n
(3\);) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T (sprintf\(s, ") S
(%s %s down.  Do you want %s up) str
(", device, dev2, dev) p n
(3\);) N
() S 8 T () S 16 T () S
(if) K
( \(!getynpar\(s\)\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
(shield.c) (Page 2/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(shield.c) (72/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 73
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (i = !*stat;) N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(*stat == i\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(%s already ) str
(", device\);) p n
() S 8 T () S 16 T () S
(if) K
( \(i\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(up\\n) str
("\);) p n
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T (printf\(") S
(down\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(i\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(f >= 0\)) p n
() S 8 T () S 16 T () S 24 T (Ship.energy -= Param.shupengy;) N
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T (Ship.cloakgood = 0;) N
() S 8 T (}) N
() S 8 T (Move.free = 0;) N
() S 8 T () S
(if) K
( \(f >= 0\)) p n
() S 8 T () S 16 T (Move.shldchg = 1;) N
() S 8 T (*stat = i;) N
() S 8 T () S
(return) K
(;) p n
(}) N
(shield.c) (Page 3/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(shield.c) (73/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 74
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)snova.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/snova.c,v 1.4 1999/11/30 03:49:54 billf Exp $) N
( * $DragonFly: src/games/trek/snova.c,v 1.4 2007/05/13 22:25:41 swildner Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  CAUSE SUPERNOVA TO OCCUR) N
(**) N
(**) S 8 T (A supernova occurs.  If 'ix' < 0, a random quadrant is chosen;) N
(**) S 8 T (otherwise, the current quadrant is taken, and \(ix, iy\) give) N
(**) S 8 T (the sector quadrants of the star which is blowing up.) N
(**) N
(**) S 8 T (If the supernova turns out to be in the quadrant you are in,) N
(**) S 8 T (you go into "emergency override mode", which tries to get you) N
(**) S 8 T (out of the quadrant as fast as possible.  However, if you) N
(**) S 8 T (don't have enough fuel, or if you by chance run into something,) N
(**) S 8 T (or some such thing, you blow up anyway.  Oh yeh, if you are) N
(**) S 8 T (within two sectors of the star, there is nothing that can) N
(**) S 8 T (be done for you.) N
(**) N
(**) S 8 T (When a star has gone supernova, the quadrant becomes uninhab-) N
(**) S 8 T (itable for the rest of eternity, i.e., the game.  If you ever) N
(**) S 8 T (try stopping in such a quadrant, you will go into emergency) N
(**) S 8 T (override mode.) N
(*/) N
() p n
(void) k n
(snova\() p
(int) k
( x, ) p
(int) k
( y\)) p n
(snova.c) (Page 1/3) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
({) p n
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (qx, qy;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (ix, iy = 0;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (f;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (dx, dy;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (n;) N
() S 8 T () S
(struct) k
( quad) p 24 T (*q;) N
() N
() S 8 T (f = 0;) N
() S 8 T (ix = x;) N
() S 8 T () S
(if) K
( \(ix < 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* choose a quadrant */) c n
() p 8 T () S 16 T () S
(while) K
( \(1\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (qx = ranf\(NQUADS\);) N
() S 8 T () S 16 T () S 24 T (qy = ranf\(NQUADS\);) N
() S 8 T () S 16 T () S 24 T (q = &Quad[qx][qy];) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(q->stars > 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(if) K
( \(Ship.quadx == qx && Ship.quady == qy\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(/* select a particular star */) c n
() p 8 T () S 16 T () S 24 T (n = ranf\(q->stars\);) N
() S 8 T () S 16 T () S 24 T () S
(for) K
( \(ix = 0; ix < NSECTS; ix++\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(for) K
( \(iy = 0; iy < NSECTS; iy++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(Sect[ix][iy] == STAR || Sect[ix][iy]) p n
( == INHABIT\)) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(if) K
( \(\(n -= 1\) <= 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(n <= 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (f = 1;) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() S 8 T () S
(else) K n
() p 8 T ({) N
() S 8 T () S 16 T () S
(/* current quadrant */) c n
() p 8 T () S 16 T (iy = y;) N
() S 8 T () S 16 T (qx = Ship.quadx;) N
() S 8 T () S 16 T (qy = Ship.quady;) N
() S 8 T () S 16 T (q = &Quad[qx][qy];) N
() S 8 T () S 16 T (f = 1;) N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(f\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* supernova is in same quadrant as Enterprise */) c n
() p 8 T () S 16 T (printf\(") S
(^G\\nRED ALERT: supernova occurring at %d,%d\\n) str
(", ix, iy\);) p n
() S 8 T () S 16 T (dx = ix - Ship.sectx;) N
() S 8 T () S 16 T (dy = iy - Ship.secty;) N
() S 8 T () S 16 T () S
(if) K
( \(dx * dx + dy * dy <= 2\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(***  Emergency override attem) str
("\);) p n
() S 8 T () S 16 T () S 24 T (sleep\(1\);) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T (lose\(L_SNOVA\);) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (q->scanned = 1000;) N
() S 8 T (}) N
(snova.c) (Page 2/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(snova.c) (74/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 75
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(else) K n
() p 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(!damaged\(SSRADIO\)\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (q->scanned = 1000;) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(\\nUhura: Captain, Starfleet Command reports a supernova\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(  in quadrant %d,%d.  Caution is advised\\n) str
(", qx, qy\);) p n
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() N
() S 8 T () S
(/* clear out the supernova'ed quadrant */) c n
() p 8 T (dx = q->klings;) N
() S 8 T (dy = q->stars;) N
() S 8 T (Now.klings -= dx;) N
() S 8 T () S
(if) K
( \(x >= 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* Enterprise caused supernova */) c n
() p 8 T () S 16 T (Game.kills += dy;) N
() S 8 T () S 16 T () S
(if) K
( \(q->bases\)) p n
() S 8 T () S 16 T () S 24 T (killb\(qx, qy\);) N
() S 8 T () S 16 T (Game.killk += dx;) N
() S 8 T (}) N
() S 8 T () S
(else) K n
() p 8 T () S 16 T () S
(if) K
( \(q->bases\)) p n
() S 8 T () S 16 T () S 24 T (killb\(qx, qy\);) N
() S 8 T (killd\(qx, qy, \(x >= 0\)\);) N
() S 8 T (q->stars = -1;) N
() S 8 T (q->klings = 0;) N
() S 8 T () S
(if) K
( \(Now.klings <= 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Lucky devil, that supernova destroyed the last klingon\\n) str
("\);) p n
() S 8 T () S 16 T (win\(\);) N
() S 8 T (}) N
() S 8 T () S
(return) K
(;) p n
(}) N
(snova.c) (Page 3/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(snova.c) (75/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 76
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)srscan.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/srscan.c,v 1.4 1999/11/30 03:49:55 billf Exp $) N
( * $DragonFly: src/games/trek/srscan.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
() N
(/*) c n
(**  SHORT RANGE SENSOR SCAN) N
(**) N
(**) S 8 T (A short range scan is taken of the current quadrant.  If the) N
(**) S 8 T (flag 'f' is one, it is an "auto srscan".  It does a status) N
(**) S 8 T (report and a srscan.) N
(**) S 8 T (If 'f' is -1, you get a status report only.  If it is zero,) N
(**) S 8 T (you get a srscan and an optional status report.  The status) N
(**) S 8 T (report is taken if you enter "srscan yes"; for all srscans) N
(**) S 8 T (thereafter you get a status report with your srscan until) N
(**) S 8 T (you type "srscan no".  It defaults to on.) N
(**) N
(**) S 8 T (The current quadrant is filled in on the computer chart.) N
(*/) N
() p n
(const) K
( ) p
(char) k
() p 16 T (*Color[4] =) N
({) N
() S 8 T (") S
(GREEN) str
(",) p n
() S 8 T (") S
(DOCKED) str
(",) p n
() S 8 T (") S
(YELLOW) str
(",) p n
() S 8 T (") S
(RED) str
(") p n
(};) N
(srscan.c) (Page 1/3) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(void) k n
(srscan\() p
(int) k
( f\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i, j;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (statinfo;) N
() S 8 T () S
(const) K
( ) p
(char) k
() p 24 T () S 32 T (*s;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (percent;) N
() S 8 T () S
(struct) k
( quad) p 24 T () S 32 T (*q = ) S
(NULL) K
(;) p n
() S 8 T () S
(struct) k
( cvntab) p 24 T () S 32 T (*p;) N
() N
() S 8 T () S
(if) K
( \(f >= 0 && check_out\(SRSCAN\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(f\)) p n
() S 8 T () S 16 T (statinfo = 1;) N
() S 8 T () S
(else) K n
() p 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(!testnl\(\)\)) p n
() S 8 T () S 16 T () S 24 T (Etc.statreport = getynpar\(") S
(status report) str
("\);) p n
() S 8 T () S 16 T (statinfo = Etc.statreport;) N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(f > 0\)) p n
() S 8 T () S 16 T (Etc.statreport = 1;) N
() S 8 T () S
(if) K
( \(f >= 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(\\nShort range sensor scan\\n) str
("\);) p n
() S 8 T () S 16 T (q = &Quad[Ship.quadx][Ship.quady];) N
() S 8 T () S 16 T (q->scanned = q->klings * 100 + q->bases * 10 + q->stars;) N
() S 8 T () S 16 T (printf\(") S
(  ) str
("\);) p n
() S 8 T () S 16 T () S
(for) K
( \(i = 0; i < NSECTS; i++\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(%d ) str
(", i\);) p n
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (printf\(") S
(\\n) str
("\);) p n
() S 8 T (}) N
() N
() S 8 T () S
(for) K
( \(i = 0; i < NSECTS; i++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(if) K
( \(f >= 0\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(%d ) str
(", i\);) p n
() S 8 T () S 16 T () S 24 T () S
(for) K
( \(j = 0; j < NSECTS; j++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(%c ) str
(", Sect[i][j]\);) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(%d) str
(", i\);) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(statinfo\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(   ) str
("\);) p n
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(if) K
( \(statinfo\)) p n
() S 8 T () S 16 T () S 24 T () S
(switch) K
( \(i\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( 0:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(stardate      %.2f) str
(", Now.date\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( 1:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(condition     %s) str
(", Color[Ship.cond]\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(Ship.cloaked\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(, CLOAKED) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( 2:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(position      %d,%d/%d,%d) str
(",Ship.quadx, Ship.qu) p n
(srscan.c) (Page 2/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(srscan.c) (76/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 77
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(ady, Ship.sectx, Ship.secty\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( 3:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(warp factor   %.1f) str
(", Ship.warp\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( 4:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(total energy  %d) str
(", Ship.energy\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( 5:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(torpedoes     %d) str
(", Ship.torped\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( 6:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (s = ") S
(down) str
(";) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(Ship.shldup\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (s = ") S
(up) str
(";) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(damaged\(SHIELD\)\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (s = ") S
(damaged) str
(";) p n
() S 8 T () S 16 T () S 24 T () S 32 T (percent = 100.0 * Ship.shield / Param.shield;) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(shields       %s, %d%%) str
(", s, percent\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( 7:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(Klingons left %d) str
(", Now.klings\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( 8:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(time left     %.2f) str
(", Now.time\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( 9:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(life support  ) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(damaged\(LIFESUP\)\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (printf\(") S
(damaged, reserves = %.2f) str
(", Ship.reserv) p n
(es\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(active) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T (printf\(") S
(\\n) str
("\);) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(f < 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(current crew  %d\\n) str
(", Ship.crew\);) p n
() S 8 T () S 16 T (printf\(") S
(brig space    %d\\n) str
(", Ship.brigfree\);) p n
() S 8 T () S 16 T (printf\(") S
(Klingon power %d\\n) str
(", Param.klingpwr\);) p n
() S 8 T () S 16 T (p = &Lentab[Game.length - 1];) N
() S 8 T () S 16 T () S
(if) K
( \(Game.length > 2\)) p n
() S 8 T () S 16 T () S 24 T (p--;) N
() S 8 T () S 16 T (printf\(") S
(Length, Skill %s%s, ) str
(", p->abrev, p->full\);) p n
() S 8 T () S 16 T (p = &Skitab[Game.skill - 1];) N
() S 8 T () S 16 T (printf\(") S
(%s%s\\n) str
(", p->abrev, p->full\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T (printf\(") S
(  ) str
("\);) p n
() S 8 T () S
(for) K
( \(i = 0; i < NSECTS; i++\)) p n
() S 8 T () S 16 T (printf\(") S
(%d ) str
(", i\);) p n
() S 8 T (printf\(") S
(\\n) str
("\);) p n
() N
() S 8 T () S
(if) K
( \(q->qsystemname & Q_DISTRESSED\)) p n
() S 8 T () S 16 T (printf\(") S
(Distressed ) str
("\);) p n
() S 8 T () S
(if) K
( \(q->qsystemname\)) p n
() S 8 T () S 16 T (printf\(") S
(Starsystem %s\\n) str
(", systemname\(q\)\);) p n
(}) N
(srscan.c) (Page 3/3) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(srscan.c) (77/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 78
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)systemname.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/systemname.c,v 1.4 1999/11/30 03:49:55 billf Exp $) N
( * $DragonFly: src/games/trek/systemname.c,v 1.3 2006/09/07 21:19:44 pavalos Exp) N
( $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  RETRIEVE THE STARSYSTEM NAME) N
(**) N
(**) S 8 T (Very straightforward, this routine just gets the starsystem) N
(**) S 8 T (name.  It returns zero if none in the specified quadrant) N
(**) S 8 T (\(which, by the way, is passed it\).) N
(**) N
(**) S 8 T (This routine knows all about such things as distressed) N
(**) S 8 T (starsystems, etc.) N
(*/) N
() p n
(const) K
( ) p
(char) k
( *) p n
(systemname\() S
(struct) k
( quad *q1\)) p n
({) N
() S 8 T () S
(struct) k
( quad) p 24 T (*q;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() N
() S 8 T (q = q1;) N
() N
() S 8 T (i = q->qsystemname;) N
() S 8 T () S
(if) K
( \(i & Q_DISTRESSED\)) p n
() S 8 T () S 16 T (i = Event[i & Q_SYSTEM].systemname;) N
(systemname.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 8 T (i &= Q_SYSTEM;) N
() S 8 T () S
(if) K
( \(i == 0\)) p n
() S 8 T () S 16 T () S
(return) K
( \(0\);) p n
() S 8 T () S
(return) K
( \(Systemname[i]\);) p n
(}) N
(systemname.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(systemname.c) (78/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 79
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)torped.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/torped.c,v 1.5 1999/11/30 03:49:55 billf Exp $) N
( * $DragonFly: src/games/trek/torped.c,v 1.3 2006/09/07 21:19:44 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(static) K
( ) p
(int) k
() p 16 T (randcourse\() S
(int) k
(\);) p n
() N
(/*) c n
(**  PHOTON TORPEDO CONTROL) N
(**) N
(**) S 8 T (Either one or three photon torpedoes are fired.  If three) N
(**) S 8 T (are fired, it is called a "burst" and you also specify) N
(**) S 8 T (a spread angle.) N
(**) N
(**) S 8 T (Torpedoes are never 100% accurate.  There is always a random) N
(**) S 8 T (cludge factor in their course which is increased if you have) N
(**) S 8 T (your shields up.  Hence, you will find that they are more) N
(**) S 8 T (accurate at close range.  However, they have the advantage that) N
(**) S 8 T (at long range they don't lose any of their power as phasers) N
(**) S 8 T (do, i.e., a hit is a hit is a hit, by any other name.) N
(**) N
(**) S 8 T (When the course spreads too much, you get a misfire, and the) N
(**) S 8 T (course is randomized even more.  You also have the chance that) N
(**) S 8 T (the misfire damages your torpedo tubes.) N
(*/) N
() p n
(void) k n
(torped.c) (Page 1/5) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(torped\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (ix, iy;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (x, y, dx, dy;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (angle;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (course, course2;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (k;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (bigger;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (sectsize;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (burst;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (n;) N
() N
() S 8 T () S
(if) K
( \(Ship.cloaked\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Federation regulations do not permit attack while cloaked.\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(check_out\(TORPED\)\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T () S
(if) K
( \(Ship.torped <= 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(All photon torpedos expended\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() N
() S 8 T () S
(/* get the course */) c n
() p 8 T (course = getintpar\(") S
(Torpedo course) str
("\);) p n
() S 8 T () S
(if) K
( \(course < 0 || course > 360\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (burst = -1;) N
() N
() S 8 T () S
(/* need at least three torpedoes for a burst */) c n
() p 8 T () S
(if) K
( \(Ship.torped < 3\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(No-burst mode selected\\n) str
("\);) p n
() S 8 T () S 16 T (burst = 0;) N
() S 8 T (}) N
() S 8 T () S
(else) K n
() p 8 T ({) N
() S 8 T () S 16 T () S
(/* see if the user wants one */) c n
() p 8 T () S 16 T () S
(if) K
( \(!testnl\(\)\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (k = ungetc\(cgetc\(0\), stdin\);) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(k >= ') p
(0) str
(' && k <= ') p
(9) str
('\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (burst = 1;) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(burst < 0\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (burst = getynpar\(") S
(Do you want a burst) str
("\);) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(burst\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (burst = getintpar\(") S
(burst angle) str
("\);) p n
() S 8 T () S 16 T () S
(if) K
( \(burst <= 0\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T () S 16 T () S
(if) K
( \(burst > 15\) {) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(Maximum burst angle is 15 degrees\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() S 8 T (sectsize = NSECTS;) N
(torped.c) (Page 2/5) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(torped.c) (79/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 80
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (n = -1;) N
() S 8 T () S
(if) K
( \(burst\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (n = 1;) N
() S 8 T () S 16 T (course -= burst;) N
() S 8 T (}) N
() S 8 T () S
(for) K
( \(; n && n <= 3; n++\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* select a nice random course */) c n
() p 8 T () S 16 T (course2 = course + randcourse\(n\);) N
() S 8 T () S 16 T (angle = course2 * 0.0174532925;) S 48 T () S 56 T () S 64 T () S
(/* convert to ra) c n
(dians */) N
() p 8 T () S 16 T (dx = -cos\(angle\);) N
() S 8 T () S 16 T (dy =  sin\(angle\);) N
() S 8 T () S 16 T (bigger = fabs\(dx\);) N
() S 8 T () S 16 T (x = fabs\(dy\);) N
() S 8 T () S 16 T () S
(if) K
( \(x > bigger\)) p n
() S 8 T () S 16 T () S 24 T (bigger = x;) N
() S 8 T () S 16 T (dx /= bigger;) N
() S 8 T () S 16 T (dy /= bigger;) N
() S 8 T () S 16 T (x = Ship.sectx + 0.5;) N
() S 8 T () S 16 T (y = Ship.secty + 0.5;) N
() S 8 T () S 16 T () S
(if) K
( \(Ship.cond != DOCKED\)) p n
() S 8 T () S 16 T () S 24 T (Ship.torped -= 1;) N
() S 8 T () S 16 T (printf\(") S
(Torpedo track) str
("\);) p n
() S 8 T () S 16 T () S
(if) K
( \(n > 0\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(, torpedo number %d) str
(", n\);) p n
() S 8 T () S 16 T (printf\(") S
(:\\n%6.1f\\t%4.1f\\n) str
(", x, y\);) p n
() S 8 T () S 16 T () S
(while) K
( \(1\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (ix = x += dx;) N
() S 8 T () S 16 T () S 24 T (iy = y += dy;) N
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(x < 0.0 || x >= sectsize || y < 0.0 || y >= sectsize) p n
(\)) N
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(Torpedo missed\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(%6.1f\\t%4.1f\\n) str
(", x, y\);) p n
() S 8 T () S 16 T () S 24 T () S
(switch) K
( \(Sect[ix][iy]\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( EMPTY:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(continue) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( HOLE:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(Torpedo disappears into a black hole\\n) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( KLINGON:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(for) K
( \(k = 0; k < Etc.nkling; k++\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(Etc.klingon[k].x != ix || Etc.klingo) p n
(n[k].y != iy\)) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(continue) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (Etc.klingon[k].power -= 500 + ranf\(501\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(if) K
( \(Etc.klingon[k].power > 0\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T (printf\(") S
(*** Hit on Klingon at %d,%d: exte) str n
(nsive damages\\n) S
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T (ix, iy\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (}) N
(torped.c) (Page 3/5) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T (killk\(ix, iy\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (}) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( STAR:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (nova\(ix, iy\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( INHABIT:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (kills\(ix, iy, -1\);) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() N
() S 8 T () S 16 T () S 24 T (  ) S
(case) K
( BASE:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (killb\(Ship.quadx, Ship.quady\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (Game.killb += 1;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (  ) S
(default) K
(:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (printf\(") S
(Unknown object %c at %d,%d destroyed\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (Sect[ix][iy], ix, iy\);) N
() S 8 T () S 16 T () S 24 T () S 32 T (Sect[ix][iy] = EMPTY;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(break) K
(;) p n
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(if) K
( \(damaged\(TORPED\) || Quad[Ship.quadx][Ship.quady].stars < 0\)) p n
() S 8 T () S 16 T () S 24 T () S
(break) K
(;) p n
() S 8 T () S 16 T (course += burst;) N
() S 8 T (}) N
() S 8 T (Move.free = 0;) N
(}) N
() N
() N
(/*) c n
(**  RANDOMIZE COURSE) N
(**) N
(**) S 8 T (This routine randomizes the course for torpedo number 'n'.) N
(**) S 8 T (Other things handled by this routine are misfires, damages) N
(**) S 8 T (to the tubes, etc.) N
(*/) N
() p n
(static) K
( ) p
(int) k n
(randcourse\() p
(int) k
( n\)) p n
({) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (r;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (d;) N
() N
() S 8 T (d = \(\(franf\(\) + franf\(\)\) - 1.0\) * 20;) N
() S 8 T () S
(if) K
( \(abs\(d\) > 12\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Photon tubes misfire) str
("\);) p n
() S 8 T () S 16 T () S
(if) K
( \(n < 0\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(\\n) str
("\);) p n
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T (printf\(") S
( on torpedo %d\\n) str
(", n\);) p n
() S 8 T () S 16 T () S
(if) K
( \(ranf\(2\)\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (damage\(TORPED, 0.2 * abs\(d\) * \(franf\(\) + 1.0\)\);) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (d *= 1.0 + 2.0 * franf\(\);) N
() S 8 T (}) N
() S 8 T () S
(if) K
( \(Ship.shldup || Ship.cond == DOCKED\)) p n
(torped.c) (Page 4/5) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(torped.c) (80/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 81
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T ({) N
() S 8 T () S 16 T (r = Ship.shield;) N
() S 8 T () S 16 T (r = 1.0 + r / Param.shield;) N
() S 8 T () S 16 T () S
(if) K
( \(Ship.cond == DOCKED\)) p n
() S 8 T () S 16 T () S 24 T (r = 2.0;) N
() S 8 T () S 16 T (d *= r;) N
() S 8 T (}) N
() S 8 T () S
(return) K
( \(d\);) p n
(}) N
(torped.c) (Page 5/5) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(torped.c) (81/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 82
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)utility.c) S 24 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/utility.c,v 1.5 1999/11/30 03:49:55 billf Exp $) N
( * $DragonFly: src/games/trek/utility.c,v 1.4 2006/09/07 21:19:45 pavalos Exp $) N
( */) N
() p n
(#include) K
( <errno.h>) p n
(#include) K
( <stdarg.h>) p n
(#include) K
( ") p
(trek.h) str
(") p n
() N
(/*) c n
(**  ASSORTED UTILITY ROUTINES) N
(*/) N
() p n
(/*) c n
(**  BLOCK MOVE) N
(**) N
(**) S 8 T (Moves a block of storage of length `l' bytes from the data) N
(**) S 8 T (area pointed to by `a' to the area pointed to by `b'.) N
(**) S 8 T (Returns the address of the byte following the `b' field.) N
(**) S 8 T (Overflow of `b' is not tested.) N
(*/) N
() p n
(char) k
( *) p n
(bmove\() S
(const) K
( ) p
(void) k
( *a, ) p
(void) k
( *b, size_t l\)) p n
({) N
() S 8 T () S
(return) K
(\(\() p
(char) k
( *\)memcpy\(b, a, l\) + l\);) p n
(}) N
() N
() N
(/*) c n
(utility.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(**  STRING EQUALITY TEST) c n
(**) S 8 T (null-terminated strings `a' and `b' are tested for) N
(**) S 8 T (absolute equality.) N
(**) S 8 T (returns one if equal, zero otherwise.) N
(*/) N
() p n
(bool) N
(sequal\() S
(const) K
( ) p
(char) k
( *a, ) p
(const) K
( ) p
(char) k
( *b\)) p n
({) N
() S 8 T () S
(return) K
(\(!strcmp\(a, b\)\);) p n
(}) N
() N
() N
(/*) c n
(**  SYSTEM ERROR) N
(*/) N
() p n
(void) k n
(syserr\() p
(const) K
( ) p
(char) k
( *fmt, ...\)) p n
({) N
() S 8 T (va_list ap;) N
() N
() S 8 T (va_start\(ap, fmt\);) N
() S 8 T (printf\(") S
(\\n\\07TREK SYSERR: ) str
("\);) p n
() S 8 T (vprintf\(fmt, ap\);) N
() S 8 T (printf\(") S
(\\n) str
("\);) p n
() S 8 T () S
(if) K
( \(errno\)) p n
() S 8 T () S 16 T (printf\(") S
(\\tsystem error %d\\n) str
(", errno\);) p n
() S 8 T (va_end\(ap\);) N
() S 8 T (exit\(1\);) N
(}) N
(utility.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(utility.c) (82/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 83
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)visual.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/visual.c,v 1.4 1999/11/30 03:49:56 billf Exp $) N
( * $DragonFly: src/games/trek/visual.c,v 1.3 2006/09/07 21:19:45 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  VISUAL SCAN) N
(**) N
(**) S 8 T (A visual scan is made in a particular direction of three sectors) N
(**) S 8 T (in the general direction specified.  This takes time, and) N
(**) S 8 T (Klingons can attack you, so it should be done only when sensors) N
(**) S 8 T (are out.) N
(*/) N
() p n
(/* This struct[] has the delta x, delta y for particular directions */) c n
(struct) k
( xy) p 16 T (Visdelta[11] =) N
({) N
() S 8 T ({ -1,) S 16 T (-1 },) N
() S 8 T ({ -1,) S 16 T ( 0 },) N
() S 8 T ({ -1,) S 16 T ( 1 },) N
() S 8 T ({  0,) S 16 T ( 1 },) N
() S 8 T ({  1,) S 16 T ( 1 },) N
() S 8 T ({  1,) S 16 T ( 0 },) N
() S 8 T ({  1,) S 16 T (-1 },) N
() S 8 T ({  0,) S 16 T (-1 },) N
() S 8 T ({ -1,) S 16 T (-1 },) N
() S 8 T ({ -1,) S 16 T ( 0 },) N
(visual.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T ({ -1,) S 16 T ( 1 }) N
(};) N
() N
(void) k n
(visual\(__unused ) p
(int) k
( unused\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (ix, iy;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (co;) N
() S 8 T () S
(struct) k
( xy) p 24 T (*v;) N
() N
() S 8 T (co = getintpar\(") S
(direction) str
("\);) p n
() S 8 T () S
(if) K
( \(co < 0 || co > 360\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (co = \(co + 22\) / 45;) N
() S 8 T (v = &Visdelta[co];) N
() S 8 T (ix = Ship.sectx + v->x;) N
() S 8 T (iy = Ship.secty + v->y;) N
() S 8 T () S
(if) K
( \(ix < 0 || ix >= NSECTS || iy < 0 || iy >= NSECTS\)) p n
() S 8 T () S 16 T (co = ') S
(?) str
(';) p n
() S 8 T () S
(else) K n
() p 8 T () S 16 T (co = Sect[ix][iy];) N
() S 8 T (printf\(") S
(%d,%d %c ) str
(", ix, iy, co\);) p n
() S 8 T (v++;) N
() S 8 T (ix = Ship.sectx + v->x;) N
() S 8 T (iy = Ship.secty + v->y;) N
() S 8 T () S
(if) K
( \(ix < 0 || ix >= NSECTS || iy < 0 || iy >= NSECTS\)) p n
() S 8 T () S 16 T (co = ') S
(?) str
(';) p n
() S 8 T () S
(else) K n
() p 8 T () S 16 T (co = Sect[ix][iy];) N
() S 8 T (printf\(") S
(%c ) str
(", co\);) p n
() S 8 T (v++;) N
() S 8 T (ix = Ship.sectx + v->x;) N
() S 8 T (iy = Ship.secty + v->y;) N
() S 8 T () S
(if) K
( \(ix < 0 || ix >= NSECTS || iy < 0 || iy >= NSECTS\)) p n
() S 8 T () S 16 T (co = ') S
(?) str
(';) p n
() S 8 T () S
(else) K n
() p 8 T () S 16 T (co = Sect[ix][iy];) N
() S 8 T (printf\(") S
(%c %d,%d\\n) str
(", co, ix, iy\);) p n
() S 8 T (Move.time = 0.05;) N
() S 8 T (Move.free = 0;) N
(}) N
(visual.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(visual.c) (83/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 84
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)warp.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/warp.c,v 1.4 1999/11/30 03:49:56 billf Exp $) N
( * $DragonFly: src/games/trek/warp.c,v 1.4 2007/05/13 18:33:55 swildner Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
() N
(/*) c n
(**  MOVE UNDER WARP POWER) N
(**) N
(**) S 8 T (This is both the "move" and the "ram" commands, differing) N
(**) S 8 T (only in the flag 'fl'.  It is also used for automatic) N
(**) S 8 T (emergency override mode, when 'fl' is < 0 and 'c' and 'd') N
(**) S 8 T (are the course and distance to be moved.  If 'fl' >= 0,) N
(**) S 8 T (the course and distance are asked of the captain.) N
(**) N
(**) S 8 T (The guts of this routine are in the routine move\(\), which) N
(**) S 8 T (is shared with impulse\(\).  Also, the working part of this) N
(**) S 8 T (routine is very small; the rest is to handle the slight chance) N
(**) S 8 T (that you may be moving at some riduculous speed.  In that) N
(**) S 8 T (case, there is code to handle time warps, etc.) N
(*/) N
() p n
(void) k n
(warp\() p
(int) k
( fl, ) p
(int) k
( c, ) p
(double) k
( d\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T () S 24 T () S 32 T (course;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (power;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (dist;) N
(warp.c) (Page 1/4) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (p_time;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (speed;) N
() S 8 T () S
(double) k
() p 16 T () S 24 T () S 32 T (frac;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (percent;) N
() S 8 T () S
(int) k
() p 16 T () S 24 T (i;) N
() S 8 T () S
(char) k
() p 16 T () S 24 T (*s;) N
() N
() S 8 T () S
(if) K
( \(Ship.cond == DOCKED\) {) p n
() S 8 T () S 16 T (printf\(") S
(%s is docked\\n) str
(", Ship.shipname\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T () S
(if) K
( \(damaged\(WARP\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (out\(WARP\);) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T (course = c;) N
() S 8 T (dist = d;) N
() N
() S 8 T () S
(/* check to see that we are not using an absurd amount of power */) c n
() p 8 T (power = \(dist + 0.05\) * Ship.warp3;) N
() S 8 T (percent = 100 * power / Ship.energy + 0.5;) N
() S 8 T () S
(if) K
( \(percent >= 85\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Scotty: That would consume %d%% of our remaining energy.\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T (percent\);) N
() S 8 T () S 16 T () S
(if) K
( \(!getynpar\(") p
(Are you sure that is wise) str
("\)\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T (}) N
() N
() S 8 T () S
(/* compute the speed we will move at, and the time it will take */) c n
() p 8 T (speed = Ship.warp2 / Param.warptime;) N
() S 8 T (p_time = dist / speed;) N
() N
() S 8 T () S
(/* check to see that that value is not ridiculous */) c n
() p 8 T (percent = 100 * p_time / Now.time + 0.5;) N
() S 8 T () S
(if) K
( \(percent >= 85\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Spock: That would take %d%% of our remaining time.\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T (percent\);) N
() S 8 T () S 16 T () S
(if) K
( \(!getynpar\(") p
(Are you sure that is wise) str
("\)\)) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T (}) N
() N
() S 8 T () S
(/* compute how far we will go if we get damages */) c n
() p 8 T () S
(if) K
( \(Ship.warp > 6.0 && ranf\(100\) < 20 + 15 * \(Ship.warp - 6.0\)\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (frac = franf\(\);) N
() S 8 T () S 16 T (dist *= frac;) N
() S 8 T () S 16 T (p_time *= frac;) N
() S 8 T () S 16 T (damage\(WARP, \(frac + 1.0\) * Ship.warp * \(franf\(\) + 0.25\) * 0.20\)) N
(;) N
() S 8 T (}) N
() N
() S 8 T () S
(/* do the move */) c n
() p 8 T (Move.time = move\(fl, course, p_time, speed\);) N
() N
() S 8 T () S
(/* see how far we actually went, and decrement energy appropriately */) c n
() p 8 T (dist = Move.time * speed;) N
() S 8 T (Ship.energy -= dist * Ship.warp3 * \(Ship.shldup + 1\);) N
() N
() S 8 T () S
(/* test for bizarre events */) c n
(warp.c) (Page 2/4) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(warp.c) (84/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 85
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(if) K
( \(Ship.warp <= 9.0\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (printf\(") S
(\\n\\n  ___ Speed exceeding warp nine ___\\n\\n) str
("\);) p n
() S 8 T (sleep\(2\);) N
() S 8 T (printf\(") S
(Ship's safety systems malfunction\\n) str
("\);) p n
() S 8 T (sleep\(2\);) N
() S 8 T (printf\(") S
(Crew experiencing extreme sensory distortion\\n) str
("\);) p n
() S 8 T (sleep\(4\);) N
() S 8 T () S
(if) K
( \(ranf\(100\) >= 100 * dist\)) p n
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(Equilibrium restored -- all systems normal\\n) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() N
() S 8 T () S
(/* select a bizzare thing to happen to us */) c n
() p 8 T (percent = ranf\(100\);) N
() S 8 T () S
(if) K
( \(percent < 70\)) p n
() S 8 T ({) N
() S 8 T () S 16 T () S
(/* time warp */) c n
() p 8 T () S 16 T () S
(if) K
( \(percent < 35 || !Game.snap\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T () S
(/* positive time warp */) c n
() p 8 T () S 16 T () S 24 T (p_time = \(Ship.warp - 8.0\) * dist * \(franf\(\) + 1.0\);) N
() S 8 T () S 16 T () S 24 T (Now.date += p_time;) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(Positive time portal entered -- it is now Stardate %.2f\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T () S 32 T (Now.date\);) N
() S 8 T () S 16 T () S 24 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (percent = Event[i].evcode;) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( \(percent == E_FIXDV || percent == E_LRTB\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (Event[i].date += p_time;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T () S
(return) K
(;) p n
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(/* s/he got lucky: a negative time portal */) c n
() p 8 T () S 16 T (p_time = Now.date;) N
() S 8 T () S 16 T (s = Etc.snapshot;) N
() S 8 T () S 16 T (bmove\(s, Quad, ) S
(sizeof) K
( Quad\);) p n
() S 8 T () S 16 T (bmove\(s += ) S
(sizeof) K
( Quad, Event, ) p
(sizeof) K
( Event\);) p n
() S 8 T () S 16 T (bmove\(s += ) S
(sizeof) K
( Event, &Now, ) p
(sizeof) K
( Now\);) p n
() S 8 T () S 16 T (printf\(") S
(Negative time portal entered -- it is now Stardate %.2f\\n) str
(",) p n
() S 8 T () S 16 T () S 24 T (Now.date\);) N
() S 8 T () S 16 T () S
(for) K
( \(i = 0; i < MAXEVENTS; i++\)) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( \(Event[i].evcode == E_FIXDV\)) p n
() S 8 T () S 16 T () S 24 T () S 32 T (reschedule\(&Event[i], Event[i].date - p_time\);) N
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (}) N
() N
() S 8 T () S
(/* test for just a lot of damage */) c n
() p 8 T () S
(if) K
( \(percent < 80\)) p n
() S 8 T () S 16 T (lose\(L_TOOFAST\);) N
() S 8 T (printf\(") S
(Equilibrium restored -- extreme damage occurred to ship systems\\n) str
("\);) p n
() S 8 T () S
(for) K
( \(i = 0; i < NDEV; i++\)) p n
() S 8 T () S 16 T (damage\(i, \(3.0 * \(franf\(\) + franf\(\)\) + 1.0\) * Param.damfac[i]\);) N
() S 8 T (Ship.shldup = 0;) N
(}) N
() N
(/*) c n
( * dowarp\(\) is used in a struct cvntab to call warp\(\).  Since it is always ram) N
( * or move, fl is never < 0, so ask the user for course and distance, then pass) N
( * that to warp\(\).) N
(warp.c) (Page 3/4) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( */) c n
(void) k n
(dowarp\() p
(int) k
( fl\)) p n
({) N
() S 8 T () S
(int) k
() p 16 T (c;) N
() S 8 T () S
(double) k
() p 16 T (d;) N
() N
() S 8 T () S
(if) K
(\(getcodi\(&c, &d\)\)) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (warp\(fl, c, d\);) N
(}) N
(warp.c) (Page 4/4) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(warp.c) (85/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 86
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Copyright \(c\) 1980, 1993) N
( *) S 8 T (The Regents of the University of California.  All rights reserved.) N
( *) N
( * Redistribution and use in source and binary forms, with or without) N
( * modification, are permitted provided that the following conditions) N
( * are met:) N
( * 1. Redistributions of source code must retain the above copyright) N
( *    notice, this list of conditions and the following disclaimer.) N
( * 2. Redistributions in binary form must reproduce the above copyright) N
( *    notice, this list of conditions and the following disclaimer in the) N
( *    documentation and/or other materials provided with the distribution.) N
( * 3. All advertising materials mentioning features or use of this software) N
( *    must display the following acknowledgement:) N
( *) S 8 T (This product includes software developed by the University of) N
( *) S 8 T (California, Berkeley and its contributors.) N
( * 4. Neither the name of the University nor the names of its contributors) N
( *    may be used to endorse or promote products derived from this software) N
( *    without specific prior written permission.) N
( *) N
( * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND) N
( * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE) N
( * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE) N
( * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE) N
( * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL) N
( * DAMAGES \(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS) N
( * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION\)) N
( * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT) N
( * LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY) N
( * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF) N
( * SUCH DAMAGE.) N
( *) N
( * @\(#\)win.c) S 16 T (8.1 \(Berkeley\) 5/31/93) N
( * $FreeBSD: src/games/trek/win.c,v 1.4 1999/11/30 03:49:56 billf Exp $) N
( * $DragonFly: src/games/trek/win.c,v 1.3 2006/09/07 21:19:45 pavalos Exp $) N
( */) N
() p n
(# include) K
() p 16 T (") S
(trek.h) str
(") p n
(# include) K
() p 16 T (") S
(getpar.h) str
(") p n
() N
(/*) c n
(**  Signal game won) N
(**) N
(**) S 8 T (This routine prints out the win message, arranges to print out) N
(**) S 8 T (your score, tells you if you have a promotion coming to you,) N
(**) S 8 T (cleans up the current input line, and arranges to have you) N
(**) S 8 T (asked whether or not you want another game \(via the longjmp\(\)) N
(**) S 8 T (call\).) N
(**) N
(**) S 8 T (Pretty straightforward, although the promotion algorithm is) N
(**) S 8 T (pretty off the wall.) N
(*/) N
() p n
(void) k n
(win\() p
(void) k
(\)) p n
({) N
() S 8 T () S
(long) k
() p 16 T () S 24 T () S 32 T (s;) N
() S 8 T () S
(struct) k
( cvntab) p 24 T (*p;) N
() N
() S 8 T (sleep\(1\);) N
() S 8 T (printf\(") S
(\\nCongratulations, you have saved the Federation\\n) str
("\);) p n
() S 8 T (Move.endgame = 1;) N
(win.c) (Page 1/2) (Sep 24, 09 17:46) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 8 T () S
(/* print and return the score */) c n
() p 8 T (s = score\(\);) N
() N
() S 8 T () S
(/* decide if she gets a promotion */) c n
() p 8 T () S
(if) K
( \(Game.helps == 0 && Game.killb == 0 && Game.killinhab == 0 && 5 * Gam) p n
(e.kills + Game.deaths < 100 &&) N
() S 8 T () S 16 T () S 24 T (s >= 1000 && Ship.ship == ENTERPRISE\)) N
() S 8 T ({) N
() S 8 T () S 16 T (printf\(") S
(In fact, you are promoted one step in rank,\\n) str
("\);) p n
() S 8 T () S 16 T () S
(if) K
( \(Game.skill >= 6\)) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(to the exalted rank of Commodore Emeritus\\n) str
("\);) p n
() S 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (p = &Skitab[Game.skill - 1];) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(from %s%s ) str
(", p->abrev, p->full\);) p n
() S 8 T () S 16 T () S 24 T (p++;) N
() S 8 T () S 16 T () S 24 T (printf\(") S
(to %s%s\\n) str
(", p->abrev, p->full\);) p n
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() N
() S 8 T () S
(/* clean out input, and request new game */) c n
() p 8 T (skiptonl\(0\);) N
() S 8 T (longjmp\(env, 1\);) N
(}) N
(win.c) (Page 2/2) (Sep 24, 09 17:46) title
border
grestore
(Printed by Kenji Rikitake) rhead
(win.c) (86/86) (Friday October 25, 2013) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
